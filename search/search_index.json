{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Evergreen \u00b6 Evergreen is a PowerShell module that returns the latest version and download URLs for a set of common Windows applications. The module consists of simple functions to use in scripts when performing several tasks including: Retrieve the latest version of an application to compare against a version already installed or downloaded Return the URL for the latest version of the application to download it for local installation or deployment to target machines Evergreen is intended for use with solutions used to automate software deployments. These solutions could be: Image creation with Hashicorp Packer - images can be created with the latest version of a set of applications Import applications into Microsoft Endpoint Manager - keep Configuration Manager or Microsoft Intune up to date with the latest versions of applications Validating or auditing a desktop image to ensure the current version of an application is installed Create a library of application installers - by regularly running Evergreen functions, you can retrieve and download the current version of an application and store it in an application directory structure for later use Submitting manifests to Winget or Chocolatey or similar - Evergreen can return an object with a version number and download URL that can be used to construct manifests for the most recent versions Functions \u00b6 Primary functions in Evergreen are: Get-EvergreenApp - returns details of the latest release of an application including the version number and download URL Save-EvergreenApp - simplifies downloading application URLs returned from Get-EvergreenApp Find-EvergreenApp - lists applications supported by the module Test-EvergreenApp - tests that the URIs returned by Get-EvergreenApp are valid New-EvergreenLibrary - creates a new Evergreen library for downloading and maintaining multiple versions of application installers Invoke-EvergreenLibraryUpdate - updates the application installers stored in an Evergreen library Export-EvergreenApp.ps1 - exports the application version information returned from Get-EvergreenApp to a JSON file Greentech icon by Icons8","title":"Introduction"},{"location":"#evergreen","text":"Evergreen is a PowerShell module that returns the latest version and download URLs for a set of common Windows applications. The module consists of simple functions to use in scripts when performing several tasks including: Retrieve the latest version of an application to compare against a version already installed or downloaded Return the URL for the latest version of the application to download it for local installation or deployment to target machines Evergreen is intended for use with solutions used to automate software deployments. These solutions could be: Image creation with Hashicorp Packer - images can be created with the latest version of a set of applications Import applications into Microsoft Endpoint Manager - keep Configuration Manager or Microsoft Intune up to date with the latest versions of applications Validating or auditing a desktop image to ensure the current version of an application is installed Create a library of application installers - by regularly running Evergreen functions, you can retrieve and download the current version of an application and store it in an application directory structure for later use Submitting manifests to Winget or Chocolatey or similar - Evergreen can return an object with a version number and download URL that can be used to construct manifests for the most recent versions","title":"Evergreen"},{"location":"#functions","text":"Primary functions in Evergreen are: Get-EvergreenApp - returns details of the latest release of an application including the version number and download URL Save-EvergreenApp - simplifies downloading application URLs returned from Get-EvergreenApp Find-EvergreenApp - lists applications supported by the module Test-EvergreenApp - tests that the URIs returned by Get-EvergreenApp are valid New-EvergreenLibrary - creates a new Evergreen library for downloading and maintaining multiple versions of application installers Invoke-EvergreenLibraryUpdate - updates the application installers stored in an Evergreen library Export-EvergreenApp.ps1 - exports the application version information returned from Get-EvergreenApp to a JSON file Greentech icon by Icons8","title":"Functions"},{"location":"apps/","text":"206 Supported applications \u00b6 Evergreen 2209.629 supports the following applications: Name Application Link 1Password 1Password https://1password.com/ 1Password7 1Password 7 https://1password.com/ 7zip 7zip https://www.7-zip.org/ 7ZipZS 7-Zip ZS https://mcmilk.de/projects/7-Zip-zstd/ AdobeAcrobat Adobe Acrobat updates https://helpx.adobe.com/au/enterprise/using/deploying-acrobat.html AdobeAcrobatDC Adobe Acrobat DC updates https://www.adobe.com/devnet-docs/acrobatetk/tools/ReleaseNotesDC/index.html AdobeAcrobatProStdDC Adobe Acrobat DC Pro and Standard https://helpx.adobe.com/acrobat/kb/acrobat-dc-downloads.html AdobeAcrobatReaderDC Adobe Acrobat Reader DC https://acrobat.adobe.com/us/en/acrobat/pdf-reader.html AdobeBrackets Adobe Brackets http://brackets.io/ AdoptiumTemurin11 Adoptium Temurin 11 https://adoptium.net/ AdoptiumTemurin16 Adoptium Temurin 16 https://adoptium.net/ AdoptiumTemurin17 Adoptium Temurin 17 https://adoptium.net/ AdoptiumTemurin18 Adoptium Temurin 18 https://adoptium.net/ AdoptiumTemurin8 Adoptium Temurin 8 https://adoptium.net/ AdoptOpenJDK11 AdoptOpenJDK OpenJDK Official Binaries (JDK 11u) https://adoptopenjdk.net/index.html AdoptOpenJDK16 AdoptOpenJDK OpenJDK Official Binaries (JDK 16u) https://adoptopenjdk.net/index.html AdoptOpenJDK8 AdoptOpenJDK OpenJDK Official Binaries (JDK 8u) https://adoptopenjdk.net/index.html AkeoRufus Akeo Rufus https://rufus.ie/ AmazonCorretto Amazon Corretto https://aws.amazon.com/corretto/ Anaconda Anaconda https://www.anaconda.com/ Anki Anki https://github.com/ankitects/anki/ AppVentix AppVentix https://appventix.com/ ArtifexGhostscript Artifex Ghostscript https://www.ghostscript.com/ AtlassianSourcetree Atlassian Sourcetree https://www.sourcetreeapp.com/ Audacity Audacity https://www.audacityteam.org/ AutoDarkMode Windows Auto Dark Mode https://github.com/AutoDarkMode/Windows-Auto-Night-Mode BeekeeperStudio Beekeeper Studio https://www.beekeeperstudio.io/ BISF Base Image Script Framework https://eucweb.com/ BitwardenDesktop Bitwarden Desktop https://bitwarden.com/ BlenderLauncher Blender Launcher https://dotbow.github.io/Blender-Launcher/ BlueJ BlueJ https://www.bluej.org/ CendioThinLinc Cendio ThinLinc https://www.cendio.com/ CitrixVMTools Citrix VM Tools https://www.citrix.com/downloads/citrix-hypervisor/ CitrixWorkspaceApp Citrix Workspace app https://www.citrix.com/downloads/workspace-app/ CodelerityApacheNetBeans Codelerity Apache NetBeans https://www.codelerity.com/netbeans/ ControlUpAgent ControlUp Agent https://www.controlup.com/products/controlup/agent/ ControlUpConsole ControlUp Console https://www.controlup.com/products/controlup/management/ Cyberduck iterate GmbH Cyberduck https://cyberduck.io/ dbeaver dbeaver https://github.com/dbeaver/dbeaver DebaucheeBarrier Debauchee Barrier https://github.com/debauchee/barrier deviceTRUST deviceTRUST https://devicetrust.com/ DevToys DevToys https://devtoys.app/ diagrams.net diagrams.net https://www.diagrams.net/ dnGrep dnGrep https://dngrep.github.io/ DockerDesktop Docker Desktop https://www.docker.com/products/docker-desktop/ EgnyteDesktopApp Egnyte Desktop App https://www.egnyte.com/solutions/sharing-collaboration FileZilla FileZilla https://filezilla-project.org/ Fork Dan Pristupov Fork https://www.fork.dev FoxitPDFEditor Foxit PDF Editor https://www.foxit.com/pdf-editor/ FoxitReader Foxit Reader https://www.foxitsoftware.com/pdf-reader/ FreedomScientificFusion Freedom Scientific Fusion https://www.freedomscientific.com/products/software/fusion/ FreedomScientificJAWS Freedom Scientific JAWS https://www.freedomscientific.com/products/software/jaws/ FreedomScientificZoomText Freedom Scientific ZoomText https://www.freedomscientific.com/products/software/zoomtext/ FreeFem FreeFem https://freefem.org/ GeekSoftwarePDF24Creator Geek Software PDF24 Creator https://tools.pdf24.org/en/creator/ Gephi Gephi https://gephi.org/ GhislerTotalCommander Ghisler TotalCommander https://www.ghisler.com/ Gimp GIMP https://www.gimp.org/ GitForWindows Git for Windows https://gitforwindows.org/ GitHubAtom GitHub Atom https://atom.io/ GitHubRelease GitHub release https://github.com/ GoogleChrome Google Chrome https://cloud.google.com/chrome-enterprise/browser/download/ Gpg4win Gpg4win https://www.gpg4win.org/ Greenshot Greenshot https://getgreenshot.org/ gretl gretl http://gretl.sourceforge.net/ Handbrake Handbrake https://handbrake.fr/ HashicorpBoundary Hashicorp Boundary https://www.boundaryproject.io/ HashicorpConsul Hashicorp Consul https://www.consul.io/ HashicorpNomad Hashicorp Nomad https://www.nomadproject.io/ HashicorpPacker Hashicorp Packer https://packer.io/ HashicorpTerraform Hashicorp Terraform https://www.terraform.io/ HashicorpVault Hashicorp Vault https://www.vaultproject.io/ HashicorpWaypoint Hashicorp Waypoint https://www.waypointproject.io/ ImageGlass ImageGlass https://imageglass.org/ ImageMagickStudioImageMagick ImageMagick Studio ImageMagick https://imagemagick.org/ JamTreeSizeFree JAM Software TreeSize Free https://www.jam-software.com/treesize_free/ JamTreeSizeProfessional JAM Software TreeSize Professional https://www.jam-software.com/treesize/ JASP JASP https://jasp-stats.org/ JeremyMainGPUProfiler JeremyMain GPUProfiler https://github.com/JeremyMain/GPUProfiler JetBrainsIntelliJIDEA JetBrains IntelliJ IDEA https://www.jetbrains.com/ JetBrainsPyCharm JetBrains PyCharm https://www.jetbrains.com/ jq jq http://stedolan.github.io/jq/ jrsoftwareInnoSetup jrsoftware InnoSetup https://www.innosetup.com KarakunOpenWebStart Karakun OpenWebStart https://openwebstart.com/ows/ KeePass KeePass https://keepass.net/ KeePassXCTeamKeePassXC KeePassXC Team KeePassXC https://keepassxc.org/ LogMeInGoToMeeting LogMeIn GoToMeeting https://support.goto.com/meeting/help/install-via-msi-windows-g2m010013 LogMeInGoToOpener LogMeIn GoToOpener https://support.goto.com/meeting/help/what-is-the-multi-user-launcher-opener-msi-g2m850002 MasterPackager Master Packager https://www.masterpackager.com/ MattermostDesktop Mattermost Desktop https://github.com/mattermost/desktop McNeelRhino McNeel Rhino https://www.rhino3d.com/ MendeleyDesktop Mendeley Desktop https://www.mendeley.com/ MestrelabMnova Mestrelab Mnova https://mestrelab.com/software/mnova/ Microsoft.NET Microsoft .NET Desktop Runtime https://dotnet.microsoft.com/download/ Microsoft365Apps Microsoft 365 Apps https://www.microsoft.com/office MicrosoftAzureDataStudio Microsoft Azure Data Studio https://docs.microsoft.com/en-us/sql/azure-data-studio/ MicrosoftAzureFunctionsCoreTools Azure Functions Core Tools https://docs.microsoft.com/en-us/azure/azure-functions/functions-run-local MicrosoftAzureStorageExplorer Microsoft Azure Storage Explorer https://azure.microsoft.com/en-au/features/storage-explorer/ MicrosoftBicep Microsoft Bicep https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/overview MicrosoftBotFrameworkEmulator Microsoft Bot Framework Emulator https://github.com/microsoft/BotFramework-Emulator/ MicrosoftEdge Microsoft Edge https://www.microsoft.com/edge MicrosoftEdgeDriver Microsoft Edge https://www.microsoft.com/edge MicrosoftEdgeWebView2Runtime Microsoft Edge WebView2 Runtime https://developer.microsoft.com/en-us/microsoft-edge/webview2/ MicrosoftFSLogixApps Microsoft FSLogix Apps https://docs.microsoft.com/fslogix/ MicrosoftOneDrive Microsoft OneDrive https://onedrive.live.com/ MicrosoftPowerShell Microsoft PowerShell https://docs.microsoft.com/powershell/ MicrosoftPowerToys Microsoft PowerToys https://github.com/microsoft/PowerToys/ MicrosoftSsms Microsoft SQL Server Management Studio https://go.microsoft.com/fwlink/?LinkId=531355 MicrosoftTeams Microsoft Teams https://www.microsoft.com/teams MicrosoftVisualStudio Microsoft Visual Studio https://visualstudio.microsoft.com/ MicrosoftVisualStudioCode Microsoft Visual Studio Code https://code.visualstudio.com MicrosoftWindowsPackageManagerClient Microsoft Windows Package Manager Client https://docs.microsoft.com/en-us/windows/package-manager/ MicrosoftWvdBootloader Microsoft Azure Virtual Desktop Agent Bootloader https://docs.microsoft.com/en-us/azure/virtual-desktop/create-host-pools-powershell MicrosoftWvdInfraAgent Microsoft Azure Virtual Desktop Agent https://docs.microsoft.com/en-us/azure/virtual-desktop/create-host-pools-powershell MicrosoftWvdMultimediaRedirection Microsoft Azure Virtual Desktop Multimedia Redirection Extensions https://docs.microsoft.com/en-us/azure/virtual-desktop/multimedia-redirection MicrosoftWvdRemoteDesktop Microsoft Remote Desktop https://docs.microsoft.com/en-us/azure/virtual-desktop/connect-windows-7-10 MicrosoftWvdRtcService Microsoft Remote Desktop WebRTC Redirector Service https://docs.microsoft.com/en-us/azure/virtual-desktop/teams-on-wvd Miniconda Miniconda https://docs.conda.io/en/latest/miniconda.html Minitab Minitab https://www.minitab.com/ MiniZincIDE MiniZinc IDE https://www.minizinc.org/ MirantisLens MirantisLens https://k8slens.dev/ MozillaFirefox Mozilla Firefox https://www.mozilla.org/en-US/firefox/new/ MozillaGeckoDriver Mozilla Gecko Driver https://developer.mozilla.org/en-US/docs/Web/WebDriver MozillaThunderbird Mozilla Thunderbird https://www.thunderbird.net/ mRemoteNG mRemoteNG https://mremoteng.org/ MuseScore MuseScore https://musescore.org/ Naps2 Ben Olden-Cooligan NAPS2 https://www.naps2.com/ NETworkManager NETworkManager https://github.com/BornToBeRoot/NETworkManager NevcairielLAVFilters Nevcairiel LAV Filters https://github.com/Nevcairiel/LAVFilters Nomacs nomacs Image Lounge https://nomacs.org/ Notable Notable https://notable.app/ NotepadPlusPlus Notepad++ https://notepad-plus-plus.org/ Obsidian Obsidian https://obsidian.md/ OBSStudio OBS Studio https://obsproject.com/ OctopusDeployServer Octopus Deploy Server https://octopus.com/ OctopusTentacle Octopus Tentacle https://octopus.com/ OpenJDK OpenJDK https://openjdk.java.net/ OpenShellMenu Open-Shell-Menu https://open-shell.github.io/Open-Shell-Menu/ OpenWebStart OpenWebStart https://openwebstart.com/ OperaBrowser Opera Browser https://www.opera.com/browsers/opera OperaGXBrowser Opera GX Browser https://www.opera.com/gx OracleJava8 Oracle Java 8 https://www.java.com OracleVirtualBox Oracle VirtualBox https://www.virtualbox.org/ PaintDotNet dotPDN LLC Paint.NET https://getpaint.net PaintDotNetOfflineInstaller dotPDN LLC Paint.NET https://getpaint.net/ Pandoc Pandoc https://pandoc.org/ PDFForgePDFCreator pdfforge PDFCreator https://www.pdfforge.org/pdfcreator PeaZipPeaZip PeaZip PeaZip https://peazip.github.io/ Postman Postman https://www.getpostman.com/ Praat Praat https://www.fon.hum.uva.nl/praat/ ProjectLibre ProjectLibre https://www.projectlibre.com/ Protege Protege https://protege.stanford.edu/ PSAppDeployToolkit PSAppDeployToolkit https://psappdeploytoolkit.com/ PSFPython PSF Python https://www.python.org/ PuTTY PuTTY https://www.chiark.greenend.org.uk/~sgtatham/putty/ RCoreTeamRforWindows R Core Team R for Windows https://cran.r-project.org/bin/windows/base/ RDAnalyzer Remote Desktop Analyzer https://rdanalyzer.com/ RingCentral RingCentral https://www.ringcentral.com RStudio RStudio Desktop https://www.rstudio.com/ SafeExamBrowser Safe Exam Browser https://safeexambrowser.org/ SAGAGIS SAGA-GIS http://www.saga-gis.org/ ScooterBeyondCompare Scooter Beyond Compare https://scootersoftware.com/ Scratch Scratch https://scratch.mit.edu/ ScreenToGif ScreenToGif https://github.com/NickeManarin/ScreenToGif ShareX ShareX https://getsharex.com/ SignalDesktop Signal for Windows https://www.signal.org/ Slack Slack https://slack.com/intl/en-au/help/articles/212475728-Deploy-Slack-via-Microsoft-Installer SmartBearSoapUI SmartBear SoapUI https://www.soapui.org/ stealthpuppyWindowsCustomisedDefaults stealthpuppy Windows Customised Defaults https://stealthpuppy.com/image-customise/ StefansToolsgregpWin Stefans Tools gregpWin https://tools.stefankueng.com/grepWin.html SumatraPDFReader Sumatra PDF Reader https://www.sumatrapdfreader.org/ TableauDesktop Tableau Desktop https://www.tableau.com/ TableauPrep Tableau Prep https://www.tableau.com/ TableauReader Tableau Reader https://www.tableau.com/ TeamViewer TeamViewer https://www.teamviewer.com/ TechSmithCamtasia TechSmith Camtasia https://www.techsmith.com/ TechSmithSnagit TechSmith Snagit https://www.techsmith.com/ TelegramDesktop Telegram Desktop https://desktop.telegram.org/ TelerikFiddlerClassic Telerik Fiddler Classic https://www.telerik.com/fiddler/fiddler-classic TelerikFiddlerEverywhere Telerik Fiddler Everywhere https://www.telerik.com/fiddler Terminals Terminals https://github.com/terminals-Origin/Terminals/ TeXstudio TeXstudio https://www.texstudio.org/ TogglDesktop Toggl Desktop https://www.toggl.com/ TorProjectTorBrowser Tor Project Tor Browser https://www.torproject.org/ Tower Tower https://www.git-tower.com/windows/ TrackerSoftwarePDFXChangeEditor Tracker Software PDF X-Change Editor https://pdf-xchange.eu/pdf-xchange-editor/index.htm USBPcap USBPcap https://github.com/desowin/usbpcap/ VastLimitsUberAgent vast limits uberAgent https://uberagent.com/ VeraCrypt VeraCrypt https://www.veracrypt.fr/en/Home.html VercelHyper Vercel Hyper https://hyper.js/ VideoLanVlcPlayer VideoLan VLC Player https://www.videolan.org/vlc/ VisualCppRedistAIO VisualCppRedistAIO https://github.com/abbodi1406/vcredist VMwareHorizonClient VMware Horizon Client https://docs.vmware.com/en/VMware-Horizon-Client/index.html VMwareHorizonClientAlt VMware Horizon Client (alternate method) https://docs.vmware.com/en/VMware-Horizon-Client/index.html VMwareOSOptimizationTool VMware OS Optimization Tool https://techzone.vmware.com/resource/windows-os-optimization-tool-vmware-horizon-guide VMwareTools VMware Tools https://docs.vmware.com/en/VMware-Tools/index.html VMwareWorkstationPlayer VMware Workstation Player https://www.vmware.com/products/workstation-player.html VMwareWorkstationPro VMware Workstation Pro https://www.vmware.com/products/workstation-pro.html voidtoolsEverything voidtools Everything https://www.voidtools.com/ Win32OpenSSH Win32-OpenSSH https://github.com/PowerShell/Win32-OpenSSH/ WinMerge WinMerge https://winmerge.org/ WinSCP WinSCP https://winscp.net/ Wireshark Wireshark https://www.wireshark.org/#download WixToolset WiX Toolset https://wixtoolset.org/ Zoom Zoom https://zoom.us/ Zotero Zotero https://www.zotero.org/","title":"Supported apps"},{"location":"apps/#206-supported-applications","text":"Evergreen 2209.629 supports the following applications: Name Application Link 1Password 1Password https://1password.com/ 1Password7 1Password 7 https://1password.com/ 7zip 7zip https://www.7-zip.org/ 7ZipZS 7-Zip ZS https://mcmilk.de/projects/7-Zip-zstd/ AdobeAcrobat Adobe Acrobat updates https://helpx.adobe.com/au/enterprise/using/deploying-acrobat.html AdobeAcrobatDC Adobe Acrobat DC updates https://www.adobe.com/devnet-docs/acrobatetk/tools/ReleaseNotesDC/index.html AdobeAcrobatProStdDC Adobe Acrobat DC Pro and Standard https://helpx.adobe.com/acrobat/kb/acrobat-dc-downloads.html AdobeAcrobatReaderDC Adobe Acrobat Reader DC https://acrobat.adobe.com/us/en/acrobat/pdf-reader.html AdobeBrackets Adobe Brackets http://brackets.io/ AdoptiumTemurin11 Adoptium Temurin 11 https://adoptium.net/ AdoptiumTemurin16 Adoptium Temurin 16 https://adoptium.net/ AdoptiumTemurin17 Adoptium Temurin 17 https://adoptium.net/ AdoptiumTemurin18 Adoptium Temurin 18 https://adoptium.net/ AdoptiumTemurin8 Adoptium Temurin 8 https://adoptium.net/ AdoptOpenJDK11 AdoptOpenJDK OpenJDK Official Binaries (JDK 11u) https://adoptopenjdk.net/index.html AdoptOpenJDK16 AdoptOpenJDK OpenJDK Official Binaries (JDK 16u) https://adoptopenjdk.net/index.html AdoptOpenJDK8 AdoptOpenJDK OpenJDK Official Binaries (JDK 8u) https://adoptopenjdk.net/index.html AkeoRufus Akeo Rufus https://rufus.ie/ AmazonCorretto Amazon Corretto https://aws.amazon.com/corretto/ Anaconda Anaconda https://www.anaconda.com/ Anki Anki https://github.com/ankitects/anki/ AppVentix AppVentix https://appventix.com/ ArtifexGhostscript Artifex Ghostscript https://www.ghostscript.com/ AtlassianSourcetree Atlassian Sourcetree https://www.sourcetreeapp.com/ Audacity Audacity https://www.audacityteam.org/ AutoDarkMode Windows Auto Dark Mode https://github.com/AutoDarkMode/Windows-Auto-Night-Mode BeekeeperStudio Beekeeper Studio https://www.beekeeperstudio.io/ BISF Base Image Script Framework https://eucweb.com/ BitwardenDesktop Bitwarden Desktop https://bitwarden.com/ BlenderLauncher Blender Launcher https://dotbow.github.io/Blender-Launcher/ BlueJ BlueJ https://www.bluej.org/ CendioThinLinc Cendio ThinLinc https://www.cendio.com/ CitrixVMTools Citrix VM Tools https://www.citrix.com/downloads/citrix-hypervisor/ CitrixWorkspaceApp Citrix Workspace app https://www.citrix.com/downloads/workspace-app/ CodelerityApacheNetBeans Codelerity Apache NetBeans https://www.codelerity.com/netbeans/ ControlUpAgent ControlUp Agent https://www.controlup.com/products/controlup/agent/ ControlUpConsole ControlUp Console https://www.controlup.com/products/controlup/management/ Cyberduck iterate GmbH Cyberduck https://cyberduck.io/ dbeaver dbeaver https://github.com/dbeaver/dbeaver DebaucheeBarrier Debauchee Barrier https://github.com/debauchee/barrier deviceTRUST deviceTRUST https://devicetrust.com/ DevToys DevToys https://devtoys.app/ diagrams.net diagrams.net https://www.diagrams.net/ dnGrep dnGrep https://dngrep.github.io/ DockerDesktop Docker Desktop https://www.docker.com/products/docker-desktop/ EgnyteDesktopApp Egnyte Desktop App https://www.egnyte.com/solutions/sharing-collaboration FileZilla FileZilla https://filezilla-project.org/ Fork Dan Pristupov Fork https://www.fork.dev FoxitPDFEditor Foxit PDF Editor https://www.foxit.com/pdf-editor/ FoxitReader Foxit Reader https://www.foxitsoftware.com/pdf-reader/ FreedomScientificFusion Freedom Scientific Fusion https://www.freedomscientific.com/products/software/fusion/ FreedomScientificJAWS Freedom Scientific JAWS https://www.freedomscientific.com/products/software/jaws/ FreedomScientificZoomText Freedom Scientific ZoomText https://www.freedomscientific.com/products/software/zoomtext/ FreeFem FreeFem https://freefem.org/ GeekSoftwarePDF24Creator Geek Software PDF24 Creator https://tools.pdf24.org/en/creator/ Gephi Gephi https://gephi.org/ GhislerTotalCommander Ghisler TotalCommander https://www.ghisler.com/ Gimp GIMP https://www.gimp.org/ GitForWindows Git for Windows https://gitforwindows.org/ GitHubAtom GitHub Atom https://atom.io/ GitHubRelease GitHub release https://github.com/ GoogleChrome Google Chrome https://cloud.google.com/chrome-enterprise/browser/download/ Gpg4win Gpg4win https://www.gpg4win.org/ Greenshot Greenshot https://getgreenshot.org/ gretl gretl http://gretl.sourceforge.net/ Handbrake Handbrake https://handbrake.fr/ HashicorpBoundary Hashicorp Boundary https://www.boundaryproject.io/ HashicorpConsul Hashicorp Consul https://www.consul.io/ HashicorpNomad Hashicorp Nomad https://www.nomadproject.io/ HashicorpPacker Hashicorp Packer https://packer.io/ HashicorpTerraform Hashicorp Terraform https://www.terraform.io/ HashicorpVault Hashicorp Vault https://www.vaultproject.io/ HashicorpWaypoint Hashicorp Waypoint https://www.waypointproject.io/ ImageGlass ImageGlass https://imageglass.org/ ImageMagickStudioImageMagick ImageMagick Studio ImageMagick https://imagemagick.org/ JamTreeSizeFree JAM Software TreeSize Free https://www.jam-software.com/treesize_free/ JamTreeSizeProfessional JAM Software TreeSize Professional https://www.jam-software.com/treesize/ JASP JASP https://jasp-stats.org/ JeremyMainGPUProfiler JeremyMain GPUProfiler https://github.com/JeremyMain/GPUProfiler JetBrainsIntelliJIDEA JetBrains IntelliJ IDEA https://www.jetbrains.com/ JetBrainsPyCharm JetBrains PyCharm https://www.jetbrains.com/ jq jq http://stedolan.github.io/jq/ jrsoftwareInnoSetup jrsoftware InnoSetup https://www.innosetup.com KarakunOpenWebStart Karakun OpenWebStart https://openwebstart.com/ows/ KeePass KeePass https://keepass.net/ KeePassXCTeamKeePassXC KeePassXC Team KeePassXC https://keepassxc.org/ LogMeInGoToMeeting LogMeIn GoToMeeting https://support.goto.com/meeting/help/install-via-msi-windows-g2m010013 LogMeInGoToOpener LogMeIn GoToOpener https://support.goto.com/meeting/help/what-is-the-multi-user-launcher-opener-msi-g2m850002 MasterPackager Master Packager https://www.masterpackager.com/ MattermostDesktop Mattermost Desktop https://github.com/mattermost/desktop McNeelRhino McNeel Rhino https://www.rhino3d.com/ MendeleyDesktop Mendeley Desktop https://www.mendeley.com/ MestrelabMnova Mestrelab Mnova https://mestrelab.com/software/mnova/ Microsoft.NET Microsoft .NET Desktop Runtime https://dotnet.microsoft.com/download/ Microsoft365Apps Microsoft 365 Apps https://www.microsoft.com/office MicrosoftAzureDataStudio Microsoft Azure Data Studio https://docs.microsoft.com/en-us/sql/azure-data-studio/ MicrosoftAzureFunctionsCoreTools Azure Functions Core Tools https://docs.microsoft.com/en-us/azure/azure-functions/functions-run-local MicrosoftAzureStorageExplorer Microsoft Azure Storage Explorer https://azure.microsoft.com/en-au/features/storage-explorer/ MicrosoftBicep Microsoft Bicep https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/overview MicrosoftBotFrameworkEmulator Microsoft Bot Framework Emulator https://github.com/microsoft/BotFramework-Emulator/ MicrosoftEdge Microsoft Edge https://www.microsoft.com/edge MicrosoftEdgeDriver Microsoft Edge https://www.microsoft.com/edge MicrosoftEdgeWebView2Runtime Microsoft Edge WebView2 Runtime https://developer.microsoft.com/en-us/microsoft-edge/webview2/ MicrosoftFSLogixApps Microsoft FSLogix Apps https://docs.microsoft.com/fslogix/ MicrosoftOneDrive Microsoft OneDrive https://onedrive.live.com/ MicrosoftPowerShell Microsoft PowerShell https://docs.microsoft.com/powershell/ MicrosoftPowerToys Microsoft PowerToys https://github.com/microsoft/PowerToys/ MicrosoftSsms Microsoft SQL Server Management Studio https://go.microsoft.com/fwlink/?LinkId=531355 MicrosoftTeams Microsoft Teams https://www.microsoft.com/teams MicrosoftVisualStudio Microsoft Visual Studio https://visualstudio.microsoft.com/ MicrosoftVisualStudioCode Microsoft Visual Studio Code https://code.visualstudio.com MicrosoftWindowsPackageManagerClient Microsoft Windows Package Manager Client https://docs.microsoft.com/en-us/windows/package-manager/ MicrosoftWvdBootloader Microsoft Azure Virtual Desktop Agent Bootloader https://docs.microsoft.com/en-us/azure/virtual-desktop/create-host-pools-powershell MicrosoftWvdInfraAgent Microsoft Azure Virtual Desktop Agent https://docs.microsoft.com/en-us/azure/virtual-desktop/create-host-pools-powershell MicrosoftWvdMultimediaRedirection Microsoft Azure Virtual Desktop Multimedia Redirection Extensions https://docs.microsoft.com/en-us/azure/virtual-desktop/multimedia-redirection MicrosoftWvdRemoteDesktop Microsoft Remote Desktop https://docs.microsoft.com/en-us/azure/virtual-desktop/connect-windows-7-10 MicrosoftWvdRtcService Microsoft Remote Desktop WebRTC Redirector Service https://docs.microsoft.com/en-us/azure/virtual-desktop/teams-on-wvd Miniconda Miniconda https://docs.conda.io/en/latest/miniconda.html Minitab Minitab https://www.minitab.com/ MiniZincIDE MiniZinc IDE https://www.minizinc.org/ MirantisLens MirantisLens https://k8slens.dev/ MozillaFirefox Mozilla Firefox https://www.mozilla.org/en-US/firefox/new/ MozillaGeckoDriver Mozilla Gecko Driver https://developer.mozilla.org/en-US/docs/Web/WebDriver MozillaThunderbird Mozilla Thunderbird https://www.thunderbird.net/ mRemoteNG mRemoteNG https://mremoteng.org/ MuseScore MuseScore https://musescore.org/ Naps2 Ben Olden-Cooligan NAPS2 https://www.naps2.com/ NETworkManager NETworkManager https://github.com/BornToBeRoot/NETworkManager NevcairielLAVFilters Nevcairiel LAV Filters https://github.com/Nevcairiel/LAVFilters Nomacs nomacs Image Lounge https://nomacs.org/ Notable Notable https://notable.app/ NotepadPlusPlus Notepad++ https://notepad-plus-plus.org/ Obsidian Obsidian https://obsidian.md/ OBSStudio OBS Studio https://obsproject.com/ OctopusDeployServer Octopus Deploy Server https://octopus.com/ OctopusTentacle Octopus Tentacle https://octopus.com/ OpenJDK OpenJDK https://openjdk.java.net/ OpenShellMenu Open-Shell-Menu https://open-shell.github.io/Open-Shell-Menu/ OpenWebStart OpenWebStart https://openwebstart.com/ OperaBrowser Opera Browser https://www.opera.com/browsers/opera OperaGXBrowser Opera GX Browser https://www.opera.com/gx OracleJava8 Oracle Java 8 https://www.java.com OracleVirtualBox Oracle VirtualBox https://www.virtualbox.org/ PaintDotNet dotPDN LLC Paint.NET https://getpaint.net PaintDotNetOfflineInstaller dotPDN LLC Paint.NET https://getpaint.net/ Pandoc Pandoc https://pandoc.org/ PDFForgePDFCreator pdfforge PDFCreator https://www.pdfforge.org/pdfcreator PeaZipPeaZip PeaZip PeaZip https://peazip.github.io/ Postman Postman https://www.getpostman.com/ Praat Praat https://www.fon.hum.uva.nl/praat/ ProjectLibre ProjectLibre https://www.projectlibre.com/ Protege Protege https://protege.stanford.edu/ PSAppDeployToolkit PSAppDeployToolkit https://psappdeploytoolkit.com/ PSFPython PSF Python https://www.python.org/ PuTTY PuTTY https://www.chiark.greenend.org.uk/~sgtatham/putty/ RCoreTeamRforWindows R Core Team R for Windows https://cran.r-project.org/bin/windows/base/ RDAnalyzer Remote Desktop Analyzer https://rdanalyzer.com/ RingCentral RingCentral https://www.ringcentral.com RStudio RStudio Desktop https://www.rstudio.com/ SafeExamBrowser Safe Exam Browser https://safeexambrowser.org/ SAGAGIS SAGA-GIS http://www.saga-gis.org/ ScooterBeyondCompare Scooter Beyond Compare https://scootersoftware.com/ Scratch Scratch https://scratch.mit.edu/ ScreenToGif ScreenToGif https://github.com/NickeManarin/ScreenToGif ShareX ShareX https://getsharex.com/ SignalDesktop Signal for Windows https://www.signal.org/ Slack Slack https://slack.com/intl/en-au/help/articles/212475728-Deploy-Slack-via-Microsoft-Installer SmartBearSoapUI SmartBear SoapUI https://www.soapui.org/ stealthpuppyWindowsCustomisedDefaults stealthpuppy Windows Customised Defaults https://stealthpuppy.com/image-customise/ StefansToolsgregpWin Stefans Tools gregpWin https://tools.stefankueng.com/grepWin.html SumatraPDFReader Sumatra PDF Reader https://www.sumatrapdfreader.org/ TableauDesktop Tableau Desktop https://www.tableau.com/ TableauPrep Tableau Prep https://www.tableau.com/ TableauReader Tableau Reader https://www.tableau.com/ TeamViewer TeamViewer https://www.teamviewer.com/ TechSmithCamtasia TechSmith Camtasia https://www.techsmith.com/ TechSmithSnagit TechSmith Snagit https://www.techsmith.com/ TelegramDesktop Telegram Desktop https://desktop.telegram.org/ TelerikFiddlerClassic Telerik Fiddler Classic https://www.telerik.com/fiddler/fiddler-classic TelerikFiddlerEverywhere Telerik Fiddler Everywhere https://www.telerik.com/fiddler Terminals Terminals https://github.com/terminals-Origin/Terminals/ TeXstudio TeXstudio https://www.texstudio.org/ TogglDesktop Toggl Desktop https://www.toggl.com/ TorProjectTorBrowser Tor Project Tor Browser https://www.torproject.org/ Tower Tower https://www.git-tower.com/windows/ TrackerSoftwarePDFXChangeEditor Tracker Software PDF X-Change Editor https://pdf-xchange.eu/pdf-xchange-editor/index.htm USBPcap USBPcap https://github.com/desowin/usbpcap/ VastLimitsUberAgent vast limits uberAgent https://uberagent.com/ VeraCrypt VeraCrypt https://www.veracrypt.fr/en/Home.html VercelHyper Vercel Hyper https://hyper.js/ VideoLanVlcPlayer VideoLan VLC Player https://www.videolan.org/vlc/ VisualCppRedistAIO VisualCppRedistAIO https://github.com/abbodi1406/vcredist VMwareHorizonClient VMware Horizon Client https://docs.vmware.com/en/VMware-Horizon-Client/index.html VMwareHorizonClientAlt VMware Horizon Client (alternate method) https://docs.vmware.com/en/VMware-Horizon-Client/index.html VMwareOSOptimizationTool VMware OS Optimization Tool https://techzone.vmware.com/resource/windows-os-optimization-tool-vmware-horizon-guide VMwareTools VMware Tools https://docs.vmware.com/en/VMware-Tools/index.html VMwareWorkstationPlayer VMware Workstation Player https://www.vmware.com/products/workstation-player.html VMwareWorkstationPro VMware Workstation Pro https://www.vmware.com/products/workstation-pro.html voidtoolsEverything voidtools Everything https://www.voidtools.com/ Win32OpenSSH Win32-OpenSSH https://github.com/PowerShell/Win32-OpenSSH/ WinMerge WinMerge https://winmerge.org/ WinSCP WinSCP https://winscp.net/ Wireshark Wireshark https://www.wireshark.org/#download WixToolset WiX Toolset https://wixtoolset.org/ Zoom Zoom https://zoom.us/ Zotero Zotero https://www.zotero.org/","title":"206 Supported applications"},{"location":"changelog/","text":"Change log \u00b6 2209.629 \u00b6 Adds TrackerSoftwarePDFXChangeEditor #371 , MozillaGeckoDriver #375 Adds additional release rings for MicrosoftTeams Updates MicrosoftOneDrive to better handle the update source that returns BOM characters without having to perform a find/replace Updates public functions for better support for -WhatIf #372 2209.622 \u00b6 Updates BitwardenDesktop to fix an issue with a change in GitHub repositories #365 Updates VMwareTools to address returning the latest Tools version where that version is not yet bundled with ESXi. #336 Updates PDFForgePDFCreator to change the source location for updates and ensure it returns the current version #368 2208.618 \u00b6 Updates Zoom to add x64 and ARM64 support for meetings clients. Updates Platform property to better identify application installer Updates Invoke-EvergreenLibraryUpdate to add installer path to application version information JSON file #362 BREAKING CHANGES The values of the Property property in Zoom have changed. The values are Meetings , Rooms , Plugin , VDI , Citrix , VMware 2207.609 \u00b6 Adds functions to create an Evergreen library - a library is a directory that contains application installers and allows you to keep multiple versions. Functions are New-EvergreenLibrary , Invoke-EvergreenLibraryUpdate , and Get-EvergreenLibrary #357 Updates MicrosoftFSLogixApps to revert the source URL to https://aka.ms/fslogix/download . Hey, Microsoft, any chance you could stop changing the source URL please!? #359 Updates output from Get-EvergreenApp where a an unsupported value for -Name is specified. Get-EvergreenApp will attempt to output supported similar applications Fixes an issue in AdoptiumTemurin8 , AdoptiumTemurin11 , AdoptiumTemurin16 , AdoptiumTemurin17 , AdoptiumTemurin18 to address instances where releases returned from the update feed don't include details for MSI installers #360 2207.596 \u00b6 Adds function Export-EvergreenApp - exports application details gathered by Get-EvergreenApp to an external JSON file. This function reads any existing JSON for that application, adds the new version content, sorts for unique versions, then outputs the new content back to the target JSON file. 2207.592 \u00b6 Updates the approach to detecting new versions in MicrosoftWvdRemoteDesktop . Uses update details available in JSON format and addresses issue #352 Fixes and issue in VMwareTools where the download URL returned doesn't match the latest version available #336 Removes hard-coded ErrorAction = Continue in private function Invoke-WebRequestWrapper to enable setting ErrorAction preference when calling this function from an application function 2206.583 \u00b6 Fixes an issue with MozillaThunderbird when attempting to return downloads for the full language list #350 2206.581 \u00b6 Adds AppVentiX #205 Updates MozillaThunderbird to align with MozillaFirefox - this function will return en-US as the default language. Additional languages can be passed to MozillaThunderbird via Get-EvergreenApp -AppParams Updates private function Get-GitHubRepoRelease to support authentication to the GitHub API with a personal access token. The function will look for the GITHUB_TOKEN or GH_TOKEN environment variables and use the value of that variable in the authentication request, if the variable exists #195 2206.574 \u00b6 Adds AutoDarkMode #335 , CodelerityApacheNetBeans #339 , JeremyMainGPUProfiler #337 , EgnyteDesktopApp #340 Fixes SumatraPDFReader due to changes in download URLs #338 2205.567 \u00b6 Adds DockerDesktop #332 Updates 1Password to return 1Password 8.x update; 1Password7 will now continue to return updates for 1Password 7.x #330 Addresses an issue in RCoreTeamRforWindows to better handle when the source site is down Updates the source used for MicrosoftFSLogixApps - this is a workaround because Microsoft has changed the aka.ms link to the FSLogix Apps agent download, again. I really wish they would stop doing that. 2205.561 \u00b6 Adds VMwareOSOptimizationTool Adds VMwareHorizonClientAlt (an alternative method for retrieving details for the VMware Horizon Client.) Fix an issue with VMwareTools due to changes in source data Fix an issue with MattermostDesktop due to changes in releases on the GitHub repository BREAKING CHANGES The following applications have been removed from Evergreen as they provide only links to downloads rather than direct links to installers - CitrixAppLayeringFeed , CitrixApplicationDeliveryManagementFeed , CitrixEndpointManagementFeed , CitrixGatewayFeed , CitrixHypervisorFeed , CitrixLicensingFeed , CitrixReceiverFeed , CitrixSdwanFeed , CitrixVirtualAppsDesktopsFeed , CitrixWorkspaceAppFeed 2205.555 \u00b6 Adds AdoptiumTemurin18 , Tower Adds VMwareWorkstationPlayer , VMwareWorkstationPro #275 Updates Resolve-DnsNameWrapper (and GhislerTotalCommander ) to work under PowerShell Core using DnsClient-PS . Manual installation of DnsClient-PS on macOS or Linux is required 2205.549 \u00b6 Fixes an issue in TechSmithSnagit and GitForWindows under Linux where filename case was preventing Get-EvergreenApp from sourcing application functions Removes Date property from PuTTY as the value is updated on each query, rather than when the version was released Updates Resolve-DnsNameWrapper with Import-Module -Name \"DnsClient\" to ensure the Resolve-DnsName command is available 2205.546 \u00b6 Updates RStudio with new update sources for all curren branches and now returns Free and Pro editions #318 Fixes an issue with installers returned by MicrosoftEdgeDriver and MicrosoftEdgeWebView2Runtime Updates McNeelRhino to work under PowerShell 6/7 - resolves an issue when using Invoke-RestMethod which does not follow a HTTP 302 response BREAKING CHANGES RStudio returns new properties that will require filtering the output. Properties include: Branch , Channel , ProductName , and InstallerName 2205.541 \u00b6 Fixes MicrosoftSsms to address returning the latest version and binaries #305 Fixes an issue in MicrosoftEdge , MicrosoftEdgeDriver , MicrosoftEdgeWebView2Runtime where versions were sorted differently between PowerShell Core and Windows PowerShell to ensure the correct versions are returned #311 Fixes an issue in VeraCrypt where the version string returned was not correct 2205.537 \u00b6 Adds AdobeAcrobatProStdDC to return the current version number and the trial installer for Adobe Acrobat DC Standard and Pro Fixes a regression introduced in version 2204.534 where AdobeAcrobatReaderDC was renamed to AdobeAcrobatReader 2204.534 \u00b6 Adds Test-EvergreenApp that enables testing of installers returned by Save-EvergreenApp to determine whether the URI is valid Adds AdobeAcrobatDC that uses an alternative method to AdobeAcrobat to determine the current version of Adobe Acrobat Standard/Pro DC and Adobe Acrobat Reader DC. AdobeAcrobat has been left as-is to avoid a breaking change and to continue to provide updates for earlier versions of Acrobat / Reader updates Adds Obsidian #310 , ScreenToGif Updates MicrosoftEdge , MicrosoftEdgeDriver , MicrosoftEdgeWebView2Runtime to ensure that the correct versions are returned for the Enterprise view for Edge installers #311 Updates various functions to use Write-Error instead of throw to ensure that functions continue where a specific query for an installer fails #306 BREAKING CHANGES: Updates the approach used in AdobeAcrobatReaderDC to determine the version and available downloads for Adobe Acrobat Reader DC. Adobe has changed the available enterprise installers at https://get.adobe.com/uk/reader/enterprise/ #312 2202.525 \u00b6 Adds DevToys , DebaucheeBarrier Update Save-EvergreenApp to return error code on download failure instead of Throw. This allows the function to continue when multiple objects are passed into the function 2202.521 \u00b6 Adds HashicorpPacker , HashicorpBoundary , HashicorpVault , HashicorpWaypoint , HashicorpConsul , HashicorpTerraform , HashicorpNomad #241 2201.519 \u00b6 Adds TogglDesktop #281 , OperaBrowser #299 , OperaGXBrowser #299 Adds Hindi language to AdobeAcrobatReaderDC to add the MUI installer to the list of returned installers #297 Updates the approach used in Microsoft365Apps to find branch version details #294 . The previous approach would occasionally list incorrect versions 2112.512 \u00b6 Adds MicrosoftWvdMultimediaRedirection https://docs.microsoft.com/en-us/azure/virtual-desktop/multimedia-redirection Updates the source URL for MicrosoftWvdRtcService #288 Updates installer types for NotepadPlusPlus #287 Fixes an issue with MicrosoftPowerShell due to changes in the update source #282 Addresses code issues identified with PSScriptAnalyzer 2112.504 \u00b6 Adds ImageMagickStudioImageMagick #242 , Miniconda #246 , TorProjectTorBrowser #246 , diagrams.net #276 Adds AdoptiumTemurin8 , AdoptiumTemurin11 , AdoptiumTemurin16 , AdoptiumTemurin17 and addresses #273 #199 , Updates MicrosoftOneDrive with new update sources and adds more update channels. Now includes: Production , Enterprise , Insider , InternalSlow , InternalFast #269 Updates MicrosoftTeams with new approach for dynamically determining download URLs and adds .exe installers Updates Microsoft.NET due to changes in source location for .NET 6. Dynamically finds installer source URLs and provides windowsdesktop , runtime , sdk installers. Includes .NET 6.0 , 5.0 and 3.1 #278 Updates FoxitPDFEditor to fix an issue with changes to language properties from the update source #274 Updates GitHubRelease with additional file types to return by default Thanks to @JonathanPitre 2111.488 \u00b6 Adds -CustomPath parameter to Save-EvergreenApp - allows for specifying a specific target directory for downloads instead of building the directory structure automatically from the input object #260 Adds OctopusDeployServer #238 , OctopusTentacle #239 , 7ZipZS #232 , PDF24Creator #258 , MicrosoftEdgeDriver #262 , MirantisLens #248 , GeekSoftwarePDF24Creator #256 Adds dbeaver , MattermostDesktop , PuTTY #255 . Thanks to @BornToBeRoot Adds VisualCppRedistAIO #250 , OpenWebStart #263 . Thanks to @JonathanPitre Updates MozillaFirefox to output MSIX file type and ARM64 architecture Updates AmazonCorretto to include version 17 #249 Updates GoogleChrome to include channels Dev and Beta #243 Updates source URI for MicrosoftFSLogixApps due to changes in source #259 Fixes URI values for SumatraPDFViewer due to changes in source #211 Fixes URI values for FoxitReader due to changes in source #261 BREAKING CHANGES: Removes all default languages from MozillaFirefox and includes en-US only. Any supported languages can be passed to MozillaFirefox by passing a hashtable to -AppParams . For example: Get-EvergreenApp -Name \"MozillaFirefox\" -AppParams @{Language=\"en-GB\", \"es-ES\"} Removes FIREFOX_ESR_NEXT from MozillaFirefox as the Firefox update feed is not including the version number 2110.467 \u00b6 Fixes an issue with AdobeAcrobat where the string returned from the Adobe update API added a new line after the version number #233 Adds GhislerTotalCommander #229 , PaintDotNetOfflineInstaller #235 , TelerikFiddlerClassic , voidtoolsEverything #230 Adds USBPcap . Thanks to Dan Gough Updates method used to determine version and download for JSAP Adds private function Resolve-DnsNameWrapper to resolve DNS TXT records. Used by GhislerTotalCommander . Currently supports Windows only BREAKING CHANGES: Disables LibreOffice - the update method keeps changing requiring a significant amount of work to fix each time. #218 Updates Microsoft365Apps to fix some instances where the incorrect version number returned, and updates channel names in Channel property using the names listed in the Channel property in the configuration.xml. A Name property has been added with the full channel names to ensure readability. This reflects the same channel names used when creating a configuration in the Microsoft 365 Apps admin center Channel properties are listed in the following articles: Configuration options for the Office Deployment Tool , Update channel for Office LTSC 2021 , Update channel for Office 2019 Full channel names are listed here: Update history for Microsoft 365 Apps 2108.458 \u00b6 Adds MicrosoftEdgeWebView2Runtime , MicrosoftBotFrameworkEmulator , Naps2 , SmartBearSoapUI , NevcairielLAVFilters Adds the parameter -AppParams to Get-EvergreenApp that takes a hashtable of parameters to be passed to the internal application functions. Right now, this will only work with GitHubRelease - enabling Evergreen to return the releases for any GitHub repository with Windows releases that you pass via -AppParams Updates the approach used for TelegramDesktop , because Telegram posts a release to GitHub that doesn't match the latest Windows release BREAKING CHANGES: Updates the channel names, and adds additional channels, in Microsoft365Apps - this release adds all available Microsoft 365 Apps channels - FirstReleaseCurrent , Insiders , Monthly , Current , MonthlyEnterprise , Deferred , Broad , Targeted , FirstReleaseDeferred , Perpetual2019 , PerpetualVL2019 Disables CiscoWebEx - function is unable to return the current WebEx version using the existing method and no working method has been found 2108.450 \u00b6 Adds deviceTRUST Fixes an issue in Save-EvergreenApp when the path specified in the -Path parameter does not exist Updates LibreOffice to gracefully handle download a scenario where the The Document Foundation pulls the download links for a published version #218 BREAKING CHANGES: Updates Postman with x86 and x64 architecture Updates LibreOffice with Release property with a value of Still or Fresh 2107.441 \u00b6 Adds FoxitPDFEditor Adds FreedomScientificFusion , FreedomScientificJAWS , FreedomScientificZoomText , MestrelabMnova , jrsoftwareInnoSetup . Thanks to @adotcoop Updates the process used to determine updates in TableauDesktop . Thanks to @adotcoop Updates DatePattern in PSFPython to return the correct localised date Updates AdobeReaderDC with internal function Invoke-RestMethodWrapper replacing direct use of Invoke-RestMethod Updates MicrosoftWvdBootloader , MicrosoftWvdInfraAgent , MicrosoftWvdRemoteDesktop , MicrosoftWvdRtcService , OracleVirtualBox , and LibreOffice to use internal function Invoke-WebRequestWrapper replacing direct use of Invoke-WebRequest Updates internal function Invoke-WebRequestWrapper with parameter -ReturnObject to enable application functions to return Headers, Content, RawContent etc. Updates internal function Invoke-WebRequestWrapper with parameter -Method that allows, Default , Head , Post , etc., required by various application functions 2107.431 \u00b6 Adds SignalDesktop Updates MicrosoftAzureCoreFunctionTools to return MSI installers #213 Updates CitrixWorkspaceApp to return a Stream property that includes a value of Current or LTSR Updates LibreOffice #171 , CitrixWorkspaceApp , OracleJava8 , MicrosoftSsms to use Invoke-RestMethodWrapper to avoid needing to convert update feed into XML simplifying the code BREAKING CHANGES: Renames AtlassianBitbucket to AtlassianSourcetree #177 2107.425 \u00b6 Adds jq , PSAppDeployToolkit Adds Anaconda , McNeelRhino , PSFPython , TableauPrep , TableauReader , TechSmithCamtasia , TechSmithSnagit . Thanks to @adotcoop Updates Get-GitHubRepoRelease to actively query the GitHub API for available requests to avoid issues when rate limited Updates Get-GitHubRepoRelease with a new parameter - -ReturnVersionOnly that enables returning only the version property of the latest release. This enables finding the version number and using alternative download sources, where the vendor does not include binary releases on the GitHub repository 2107.418 \u00b6 Adds BlueJ , Postman , TableauDesktop . Thanks to @adotcoop Adds MicrosoftAzureFunctionsCoreTools , MasterPackager Updates Get-EvergreenApp to sort output on the Version property in descending order Updates internal functions Invoke-SystemNetRequest , Invoke-WebRequestWrapper , Resolve-InvokeWebRequest , Resolve-SystemNetWebRequest to not throw in the event of a source URL being unavailable, to allow for more graceful handling of vendor sources being temporarily unavailable 2106.407 \u00b6 Adds CendioThinLinc , JASP , JetBrainsIntelliJIDEA , JetBrainsPyCharm , MendeleyDesktop , MiniZincIDE , Minitab , MuseScore , Pandoc , Protege , RDAnalyzer , RStudio , SafeExamBrowser , Zotero . Thanks to @adotcoop Updates MicrosoftWindowsPackageManagerClient to return the .appxbundle installer Fixes an issue in Save-EvergreenApp when calling Remove-Variable 2106.402 \u00b6 Adds AmazonCorretto , ArtifexGhostscript , FreeFem , Gephi , Praat , SAGAGIS , Scratch , TeXstudio , gretl . Thanks to @adotcoop Updates private function Get-Architecture with additional processor architecture detections Updates private function Get-GitHubRepoRelease to return a custom object if the GitHub API is rate limited BREAKING CHANGES: Remove portable installers and .zip file types from Notepad++ 2106.395 \u00b6 Adds AkeoRufus #179 , BlenderLauncher #178 Updates MicrosoftFSLogixApps to return both the production and preview releases #176 Updates Veracrypt to return the complete version number (e.g. 1.24-Update7 ) #166 BREAKING CHANGES: Adds the Production and Preview channels to MicrosoftFSLogixApps that will require filtering with Where-Object 2105.388 \u00b6 Update VMwareHorizonClient with additional filtering to select the latest version correctly to address #161 Add internal function Save-File to download a URL with Invoke-WebRequest and return the downloaded file path Update internal application functions for consistent use of Resolve-SystemNetWebRequest to address #174 - Get-FoxitReader , Get-LogMeInGoToOpener , Get-MicrosoftSsms , Get-MicrosoftVisualStudio , Get-RingCentral , Get-Slack Update references to documentation site https://stealthpuppy.com/Evergreen to https://stealthpuppy.com/evergreen 2105.383 \u00b6 Adds CiscoWebEx ( #141 ), VeraCrypt ( #160 ), KarakunOpenWebStart ( #163 ) Updates MicrosoftWvdRemoteDesktop with the Preview release and fixes source URLs for the public release Adds ARM64 architecture to MicrosoftTeams #162 Adds MSI file type to Wireshark Updates internal function Get-SourceForgeRepoRelease with improvements to find releases and download URIs 2105.371 \u00b6 Adds Audacity , Wireshark ( #153 ), LogMeInGoToMeeting ( #152 ), LogMeInGoToOpener Updates AdobeAcrobat to include Reader updates for 2015 , 2017 , 2020 Updates AdobeAcrobat to include 64-bit updates for Reader and Acrobat DC BREAKING CHANGES Adds the Architecture property to AdobeAcrobat 2105.366 \u00b6 Fixes an issue with Remove-Variable in Save-EvergreenApp Fix #149 Updates Save-EvergreenApp to skip downloading a file if it already exists and adds support for -Force Updates help for Save-EvergreenApp Adds nb-NO language support to MozillaFirefox Fix #146 2105.363 \u00b6 Adds ImageGlass , MicrosoftAzureStorageExplorer , Nomacs , Notable , OBSStudio Updates URL used by TeamViewer to return the current version #147 Updates Save-EvergreenApp to output the result of Get-ChildItem as the output to the pipeline Updates module to use external help MAML-based help with platyPS to make updating help content easier General code improvements 2104.355 \u00b6 Changes FoxitReader to return MSI installers instead of EXEs. Removes Elex, Portuguese (Portugal), and Turkish language support from this application because the installers returned are out of date. Adds the following languages to AdobeAcrobatReaderDC : Swedish, Basque, Catalan, Croatian, Czech, Hungarian, Polish, Romanian, Russian, Slovakian, Slovenian, Turkish, Ukrainian Adds a known issues list to the documentation: https://stealthpuppy.com/evergreen/knownissues.html 2104.348 \u00b6 Adds the Consumer release (to the existing Enterprise release) and Dev, Beta channels, and ARM64 architecture to MicrosoftEdge Adds 64-bit architecture to MicrosoftOneDrive Adds BeekeeperStudio , VMwareHorizonClient , AdoptOpenJDK 8 , AdoptOpenJDK 11 , AdoptOpenJDK 16 Modifies Get-EvergreenApp to load internal per-application functions on demand, instead of loading all of these function into memory at module import Updates Get-CitrixRssFeed to use Invoke-RestMethod to simplify handling of the XML feed Updates various functions to Throw more consistently when encountering errors General code improvements 2104.337 \u00b6 BREAKING CHANGE : This version removes the Get- function for each application and introduces Get-EvergreenApp . See the docs site on how to use the new functions https://stealthpuppy.com/evergreen/ Adds Get-EvergreenApp , Find-EvergreenApp and Save-EvergreenApp Adds file type to SourceForge applications Re-instates ControlUpAgent and ControlUpConsole Fixes the LTS release in Microsoft.NET Fixes localised date format for Gimp , GoogleChrome , MicrosoftEdge , MicrosoftFSLogixApps , MicrosoftSsms , FoxitReader Migrates tests to Pester 5 Adds additional Pester tests for private functions General code optimisations and fixes 2103.305 \u00b6 Fixes an issue with Get-AdobeAcrobat to ensure that Track property has the correct value (DC, 2020, etc.) and the Language property (Neutral, Multi) #130 2103.303 \u00b6 Adds Get-NETworkManager , Get-Anki Updates Get-AdobeAcrobat to include updates for Adobe Acrobat Reader DC. This function now returns updates for both Acrobat Pro and Reader Retrieve the installers for Adobe Acrobat Reader DC with Get-AdobeAcrobatReaderDC and any available updates with Get-AdobeAcrobat Temporarily disables Get-ControlUpAgent and Get-ControlUpConsole 2103.298 \u00b6 Adds Get-MicrosoftAzureDataStudio , Get-ControlUpConsole Updates Get-ControlUpAgent to use the published JSON at https://www.controlup.com/latest-agent-console/ - the last vestiges of any screen scraping code have been swept away Updates Get-AdobeAcrobatReaderDC to account for the new 64-bit version of Reader to add #121 . Filter with Where-Object to return the required version, language and architecture BREAKING CHANGES Adds Architecture property and removes Type property from the output of Get-AdobeAcrobatReaderDC Removes the Adobe Acrobat Reader DC updaters from Get-AdobeAcrobatReaderDC as there is no consistent automated method to determine whether an update is required or optional Changes the output of Get-ControlUpAgent - the values in the Framework property have changed and the function only returns the most recent agent version 2102.291 \u00b6 Renames function Get-AdobeAcrobatProDC to Get-AdobeAcrobat and includes support for returning updates for Adobe Acrobat Pro/Standard DC, 2020, 2017, and 2015. Addresses #114 Alias Get-AdobeAcrobatProDC included for backward compatibility Adds Preview ring to Get-MicrosoftTeams Updates function comment-based help and corrects spelling across several functions BREAKING CHANGES Adds Track property to Get-AdobeAcrobat with values of DC , 2020 , 2017 , 2015 - filter with Where-Object Adds Ring property to Get-MicrosoftTeams for General (i.e., current / production ring) and Preview rings - filter with Where-Object 2102.286 \u00b6 Adds the ARM architecture to Get-MicrosoftVisualStudioCode Updates Get-MicrosoftWvdRemoteDesktop to output the URI property value in the format https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE4MntQ instead of the original fwlink source URL (e.g. https://go.microsoft.com/fwlink/?linkid=2068602 ) Updates the following functions to use Invoke-RestMethod (via Invoke-RestMethodWrapper ) instead of Invoke-WebRequest to simplify code and fix an issue where some functions where returning Version as a PSObject instead of System.String ( #109 ) Get-AtlassianBitbucket , Get-Cyberduck , Get-FileZilla , Get-Fork , Get-RingCentral , Get-ScooterBeyondCompare , Get-SumatraPDFReader , Get-VideoLanVlcPlayer Updates module ReleaseNotes location to: https://stealthpuppy.com/evergreen/changelog.html 2101.281 \u00b6 Renames Get-MicrosoftOffice , to Get-Microsoft365Apps to align with product name. The alias Get-MicrosoftOffice is included for backward compatibility Adds the Monthly Enterprise channel to Get-Microsoft365Apps output. See #107 Adds private function Invoke-RestMethodWrapper to enable normalisation across public functions and PowerShell/Windows PowerShell that use Invoke-RestMethod Updates private function Get-GitHubRepoRelease to use Invoke-RestMethodWrapper Updates several public functions to use Invoke-RestMethodWrapper instead of the previous method of Invoke-WebRequest | ConvertTo-Json - Get-1Password , Get-CitrixVMTools , Get-FoxitReader , Get-GoogleChrome , Get-Microsoft365Apps , Get-MicrosoftEdge , Get-MicrosoftTeams , Get-MicrosoftVisualStudioCode , Get-MozillaFirefox , Get-MozillaThunderbird Updates public functions that used Invoke-RestMethod to use Invoke-RestMethodWrapper instead - Get-Gimp , Get-MicrosoftPowerShell , Get-MicrosoftVisualStudio Renames private function Invoke-WebContent to Invoke-WebRequestWrapper and makes general improvements to the handling of Invoke-WebRequest Renames private function ConvertFrom-SourceForgeReleasesJson to Get-SourceForgeRepoRelease Updates and optimises this function to make use of Invoke-RestMethodWrapper so that it can query a SourceForge repository and return the required output in a single function Simplifies code in public functions that return SourceForge releases - Get-7zip , Get-KeePass , Get-PDFForgePDFCreator , Get-ProjectLibre , Get-WinMerge , Get-WinSCP Renames private functions for more descriptive function names (these resolve HTTP 301/302 return codes): Resolve-Uri to Resolve-SystemNetWebRequest Resolve-RedirectedUri to Resolve-InvokeWebRequest BREAKING CHANGES Removes parameter from several functions (below) to simplify existing functions and support a move to a single Get-EvergreenApp function Removes the -Channel and -Platform parameters from Get-MicrosoftVisualStudioCode . Filter output using Where-Object on the Channel and Platform parameters on the function output Removes the -Language parameter from Get-MozillaFirefox and Get-MozillaThunderbird . Filter output using Where-Object { $_.Language -eq \"en-US\" } or similar. These functions will return the following languages (for additional languages, please open an issue on the project): en-US , en-GB , en-CA , es-ES , sv-SE , pt-BR , pt-PT , de , fr , it , ja , nl , zh-CN , zh-TW , ar , hi-IN , ru 2101.275 \u00b6 Adds Get-AtlassianBitbucket , Get-TelegramDesktop , Get-Gimp , Get-BitwardenDesktop , Get-MicrosoftBicep Updates Get-MicrosoftPowerShell to return both the Stable and LTS releases of PowerShell BREAKING CHANGES Update output of Get-MicrosoftOneDrive - changes property Sha256Hash to Sha256 to be consistent with other functions Adds a Release property to the output of Get-MicrosoftPowerShell - use Where-Object to filter on Stable or LTS 2101.263 \u00b6 Adds Get-AdobeBrackets , Get-Fork , Get-MicrosoftVisualStudio , Get-VercelHyper Updates manifest for MicrosoftWvdRemoteDesktop to ensure evergreen source URLs used for resolving downloads Updates manifest for MicrosoftVisualStudioCode 2101.256 \u00b6 Adds Get-Terminals , Get-PeaZipPeaZip , Get-Slack , Get-MicrosoftWindowsPackageManagerClient , Get-KeePassXCTeamKeePassXC , Get-SumatraPDFReader Renames Get-Atom , to Get-GitHubAtom to better align with vendor name. The alias Get-Atom is included for backward compatibility Fixes an issue with Get-AdobeAcrobatReaderDC - Adobe doesn't use HTTPS with their download locations yet. See #99 Updates Get-AdobeAcrobatReaderDC to simplify code and better align manifest with standard structure 2101.249 \u00b6 Adds Get-MicrosoftWvdRemoteDesktop , Get-MozillaThunderbird , Get-ProjectLibre , Get-RingCentral , Get-RCoreTeamRforWindows , Get-StefansToolsgregpWin Renames Get-MicrosoftPowerShellCore to Get-MicrosoftPowerShell - PowerShell Core was renamed to PowerShell with the release of PowerShell 7.0. The alias Get-MicrosoftPowerShellCore is included for backward compatibility Fixes an issue with Get-GitHubRelease that ignored anything passed to the -Uri parameter Adds the MSIX format to the output of Get-MicrosoftOneDrive - filter output with the Type property (I'm not really sure how useful MSIX format for the OneDrive client is right now though...) Adds the VboxGuestAdditions ISO to the output of Get-OracleVirtualBox - filter output with the Type property Refactors Get-Zoom to simplify function code and improve output Updates version output for Get-MicrosoftWvdRtcService and Get-MicrosoftWvdInfraAgent Updates manifest for a number of functions to better align with an updated standard structure (see Manifests/Template.json ) BREAKING CHANGES: Output of Get-MicrosoftOneDrive has changed - Platform has been removed and Type has been added Output of Get-OracleVirtualBox has changed - Type property has been added Output of Get-Zoom has changed - filter output with the Platform and Type properties 2012.242 \u00b6 Adds Get-AdobeAcrobatProDC , Get-TelerikFiddlerEverywhere , Get-1Password Adds Windows Installer downloads output to Get-FoxitReader Updates Get-MicrosoftSsms to query an evergreen update URL to gather new versions from the product releases feed NOTE: the version of SSMS in the releases feed is not the actual current release version - we can only work with what the feed returns; See #82 Updates Get-MicrosoftSsms to output all supported languages for downloads - filter output on the Language property Updates Get-MozillaFirefox to return both Exe and Msi versions of the Firefox installer Adds SHA256 hash property to output from Get-MicrosoftVisualStudioCode Fixes an issue with the URI output in Get-Cyberduck that was returning an additional / character Refactors private function to query the GitHub releases API ( Get-GitHubRepoRelease , replacing ConvertFrom-GitHubReleasesJson ) to use Invoke-RestMethod for simpler public functions used to return GitHub releases Updates the following functions to use Get-GitHubRepoRelease - Get-Atom , Get-AdoptOpenJdk , Get-BISF , Get-dnGrep , Get-GitForWindows , Get-GitHubRelease , Get-Greenshot , Get-Handbrake , Get-MicrosoftPowerShellCore , Get-MicrosoftPowerToys , Get-mRemoteNG , Get-NotepadPlusPlus , Get-OpenJDK , Get-OpenShellMenu , Get-ShareX , Get-Win32OpenSSH , Get-WixToolSet Updates manifest for a number of functions to better align with an updated standard structure (see Manifests/Template.json ) Updates private function ConvertTo-DateTime to better handle date/time format conversion. Still some improvements to be made here BREAKING CHANGES: Updates Get-OpenJDK to return only Msi releases and removes Debug, zip etc. On-going improvements - see #76 Removes Beta and Snapshots releases from Get-Cyberduck Removes Debug releases from Get-Greenshot Removes SafeMode releases from Get-Handbrake Removes Beta channel and ARM64 releases from Get-MicrosoftEdge Removes Zip format releases from Get-MicrosoftPowerShellCore Removes Symbols releases from Get-Win32OpenSSH 2012.225 \u00b6 Adds Get-Microsoft.NET (.NET 5.0 and .NET Core), Get-Win32OpenSSH , Get-MicrosoftPowerToys Updates Get-OpenJDK to return all releases. Further filtering will be added in the future per #76 Updates Get-MozillaFirefox to resolve download URIs for both EXE and MSI Firefox installers and updates output with additional properties ( Architecture , Channel and Type ). See #83 . Note: this introduces a breaking change - the -Platform switch has been removed, you will need to filter the output on the Architecture property Updates Get-AdobeAcrobatReader to return additional languages #84 . Note that Reader DC does not provide the latest version for all languages - it may be a better approach to use the MUI version of the Reader installer if your language is supported 2010.219 \u00b6 Update Get-FileZilla to fix invalid download URI returned from the FileZilla update feed. Fix #75 Update Get-Cyberduck to remove code that replaces // with / . Returns unfiltered URL from Cyberduck update feed. Fix #75 2009.218 \u00b6 Fix Get-FoxitReader with changes to download page in FoxitReader.json . Address #72 Fix Get-Zoom with changes to resolved URIs. Address #73 Update MicrosoftWvdRtcService.json to new version of the Microsoft Remote Desktop WebRTC Redirector Service Update Resolve-Uri with additional verbose output 2006.212 \u00b6 Renames Get-CitrixXenServerTools to Get-CitrixVMTools and adds Get-CitrixXenServerTools alias Updates Get-CitrixVMTools with new release URL for v7 updates and add v9 updates Updates install command lines for Get-CitrixVMTools Adds Get-AdoptOpenJDK - closes #69 2006.207 \u00b6 Fix path in downloads from apps hosted on Source Forge returned in ConvertFrom-SourceForgeReleasesJson.ps1 . Fixes #67 Update Get-MozillaFirefox to return Extended Support Release as well as Current Release. Address #61 Update manifests to address #57 #54 #53 #52 2006.203 \u00b6 Removes Size property from Get-FoxitReader because this isn't being gathered consistently for each download Updates version / releases feed for Get-MicrosoftSsms to ensure the current version is returned Updates the way private function ConvertFrom-SourceForgeReleasesJson returns available downloads from SourceForge Updates Get-7zip , Get-KeePass , Get-PDFForgePDFCreator and Get-WinMerge to support new approach to retrieving SourceForge downloads 2005.190 \u00b6 Adds Get-MicrosoftWvdBootLoader - Get the filename and download URL for the Microsoft Windows Virtual Desktop Remote Desktop Boot Loader Updates Get-FoxitReader to sort release versions correctly and return latest (v10.x) 2005.187 \u00b6 Adds Get-MicrosoftWvdRtcService - returns the version, filename and download for the Microsoft Remote Desktop WebRTC Redirector service for Windows Virtual Desktop 2005.183 \u00b6 Updates Get-VMwareTools to return the very latest version with updated download URL Adds Get-WixToolset 2005.176 \u00b6 Fixes an issue where Get-MicrosoftEdge was only returning ARM64 downloads Updates Get-MicrosoftEdge to only return downloads for the Enterprise ring (removed Consumer ring) Fixes an issue with Get-MicrosoftTeams where it was returning an incorrect download URL 2005.172 \u00b6 Updates Get-MicrosoftEdge to correctly return the latest version and policy files for the Enterprise ring Updates output for private function Resolve-Uri with addition properties Updates Get-FoxitReader , Get-MicrosoftFSLogixApps , and Get-MicrosoftSsms to use Resolve-Uri instead of Resolve-RedirectedUri for improved performance Updates Get-LibreOffice to retrieve latest version from the update API instead of page scraping Updates private function ConvertTo-DateTime with improvements in returning localised date (so the rest of us don't need to be stuck with US date formats) Aligns Get-NotepadPlusPlus with private function ConvertFrom-GitHubReleasesJson to return GitHub release data Fixes output in Get-VMwareTools to ensure correct version and download URL are returned Adds date to output in several functions General code and inline help improvements Adds module icon for display in the PowerShell Gallery 2004.161 \u00b6 Updates Get-MicrosoftEdge with the following: Returns Edge for Windows only Removes -Channels and -Platforms parameters. Filter output with Where-Object instead Returns these channels and downloads only Stable , Beta , EdgeUpdate , and Policy (administrative templates) Filters and returns only the latest version of each of the above channels and downloads Output includes Channel (Stable, Beta etc.) and Release (Enterprise, Consumer) to enable filtering 2004.157 \u00b6 Adds Get-MicrosoftWvdInfraAgent Adds Get-dnGrep Recode of Get-PaintDotNet (or how did I not know about ConvertFrom-StringData before?) To simplify output, removes Linux, macOS output from Get-CitrixWorkspaceApp , Get-GoogleChrome , Get-OracleVirtuaBox , Get-LibreOffice , Get-MicrosoftVisualStudioCode , Get-MozillaFirefox , Get-OracleVirtualBox , Get-TeamViewer Updates RegEx method to extract version across various functions to simplify code Splits Pester tests for Public functions to allow for faster local testing 2004.147 \u00b6 Adds Get-Handbrake , Get-KeePass , Get-OpenShellMenu , Get-VastLimitsUberAgent , Get-WinSCP Removes macOS and Linux output from Get-AdobeAcrobatReader , Get-LibreOffice Filters macOS and Linux output from private function ConvertFrom-GitHubReleasesJson.ps1 Fixes spaces in private function ConvertFrom-SourceForgeReleasesJson 2004.141 \u00b6 Adds private function ConvertFrom-SourceForgeReleasesJson to convert JSON release info from SourceForge projects and simplify adding additional functions that pull release info from SourceForge projects. Release information is limited by what's provided from SourceForge Updates Get-WinMerge to use ConvertFrom-SourceForgeReleasesJson Adds Get-7Zip , Get-PDFForgePDFCreator Renames -TrustCertificate parameter in private function Invoke-WebContent to -SkipCertificateCheck to align with -SkipCertificateCheck available in ' Invoke-WebRequest in PowerShell Core Enables -SkipCertificateCheck for both PowerShell Core and Windows PowerShell in Invoke-WebContent . Previously supported Windows PowerShell only Improves code in Invoke-WebContent Adds -Uri parameter validation in Get-GitHubRelease to ensure valid GitHub URLs are passed to the function Sets function global ErrorPreference to Stop to ensure better exception output from functions in the event of failures 2004.139 \u00b6 Adds ConvertFrom-GitHubReleasesJson to standardise queries to GitHub repositories Updates Get-Atom , Get-BISF , Get-GitForWindows , Get-Greenshot , Get-MicrosoftPowerShellCore , Get-OpenJDK , Get-ShareX , Get-mRemoteNG to use ConvertFrom-GitHubReleasesJson Updates RegEx for version matching strings for BISF , GitForWindows , ShareX Adds Get-Architecture and Get-Platform private functions Adds Get-GitHubRelease to enable returning version and downloads from any GitHub repository. Use to get versions of applications on GitHub that aren't yet included in Evergreen 2004.134 \u00b6 Fixes an issue where Get-Zoom was still returning a URI to downloads with query strings attached. 2004.133 \u00b6 Updates URL to current version for TeamViewer . New URL requires different approach to query Adds Invoke-SystemNetRequest that uses System.Net.WebRequest to make a HTTP request and return response Updates Get-TeamViewer to use Invoke-SystemNetRequest to retrieve version from updated URL. Updates code to return version and download URL as a result Updates Get-Zoom to use Resolve-Uri to follow download URLs and find version number. Get-Zoom now returns more versions numbers for Zoom downloads than previously. Updates RegEx approach that returns version numbers from download URLs 2004.126 \u00b6 Adds back Get-FileZilla using the application update API. Currently returns only the 64-bit version of FileZilla for Windows. 2004.125 \u00b6 Adds Get-MicrosoftOneDrive . We recommend validating versions returned by this function with OneDrive release notes Removes Get-FileZilla until a more robust process to return versions and download can be created Removes progress bar for Invoke-WebRequest for faster query of APIs Updates Get-NotepadPlusPlus to use the GitHub releases API to find new versions as the application update API can be out of date 2002.120 \u00b6 Updates Get-GitForWindows to return correct version number Updates Get-Zoom to return version number correctly Adds Resolve-Uri with a new method of returning redirects from 301/302 via @iainbrighton 2001.117 \u00b6 Updates Get-FileZilla to return 32-bit and 64-bit download URIs 2001.110 \u00b6 Adds Get-MicrosoftTeams Update error handling in Get-VideoLanVlcPlayer 2001.104 \u00b6 Adds Get-MicrosoftEdge for the new Chromium based Microsoft Edge Additional verbose output in Invoke-WebContent 1911.101 \u00b6 Adds Get-ScooterBeyondCompare Updates XML parsing approach in Get-CitrixRssFeed , Get-CitrixWorkspaceApp , Get-NotepadPlusPlus , Get-VideoLanVlcPlayer 1911.97 \u00b6 Adds private function Resolve-RedirectedUri to handle resolving 301/302 redirects on PowerShell Core and Windows PowerShell Updates Get-VideoLanVlcPlayer , Get-MicrosoftSsms , Get-FoxitReader , Get-MicrosoftFSLogixApps , Get-Zoom with full support for PowerShell Core Updates logic to filter out prerelease assets in Get-Atom , Get-BISF , Get-GitForWindows , Get-Greenshot , Get-MicrosoftPowerShellCore , Get-OpenJDK , Get-ShareX , Get-mRemoteNG Prevents Get-MicrosoftSsms , Get-CitrixRssFeed , Get-Cyberduck , Get-OracleJava8 from throwing on error Updates to application manifests with some work on silent install commands 1911.95 \u00b6 Adds Get-MicrosoftFSLogixApps 1911.93 \u00b6 Fixes version match in Get-ControlUpAgent 1911.91 \u00b6 Adds Get-Cyberduck 1911.87 \u00b6 Adds Get-JamTreeSizeFree and Get-JamTreeSizeProfessional Fixes URL to Release notes / CHANGELOG in module manifest 1911.84 \u00b6 Changes approach used in Get-ControlUpAgent to retrieve agent details and enables PowerShell Core support Implemented per-application manifests (URLs, RegEx, strings etc.) for simpler function management Adds Export-EvergreenFunctionStrings to export per-application manifests Renames function Get-Java8 to Get-OracleJava8 Adds Pester tests for Public functions to ensure URI properties are valid 1911.75 \u00b6 Updates Get-LibreOffice update query approach to provide a more consistent output Updates Get-LibreOffice to work on PowerShell Core Changes Get-LibreOffice output and parameters to align with other functions Updates Get-NotepadPlusPlus to gracefully handle update server issues (CloudFlare DDOS challenges) Fixes version output in Get-OpenJDK Updates Get-mRemoteNG with handling issues when getting Updates Updates to Public function Pester tests Updates Evergreen.json with consistent property naming and corresponding functions 1910.62 \u00b6 Updates Get-MicrosoftSsms to ensure that the URI property returns the correct SSMS download for the latest version 1910.53 \u00b6 Adds Get-WinMerge 1910.50 \u00b6 Updates Get-VideoLanVlcPlayer output to include ZIP and MSI links for VLC Player for Windows 1910.49 \u00b6 Updates Get-MicrosoftSsms to URL (e.g. https://go.microsoft.com/fwlink/?LinkId=761491 ) to return actual URI 1910.48 \u00b6 Updates Get-VideoLanVlcPlayer to return download mirrors for URI values 1910.47 \u00b6 Adds Get-Atom and Get-TeamViewer 1910.39 \u00b6 Update Get-Zoom to the same HTTP post as https://zoom.us/support/download to return the download URI. Returns download for Windows and VDI environments Build script changes 1910.28 \u00b6 Adds Get-mRemoteNG Update version format to YearMonth.Build (hopefully we won't change this again) Automate versioning in the module to the new format Automate update of appveyor.yml as YearMonth changes Output variables in AppVeyor to \\tests\\appveyor.md 1910.18.26 \u00b6 Adds Get-OpenJDK Changes version notation to: YearMonth.Day.Build 19.10.25 \u00b6 Adds Get-MicrosoftOffice 19.10.24 \u00b6 Fixes URIs for updates in Get-AdobeAcrobatReaderDC Adds additional Pester tests for Public functions to ensure generated URI values are valid 19.10.21 \u00b6 Adds Get-FoxitReader 19.10.20 \u00b6 Fixes output in Get-GitForWindows , Get-MicrosoftSmss 19.10.19 \u00b6 Adds Get-GitForWindows , Get-ShareX 19.10.11 \u00b6 Adds Get-Java8 19.10.9 \u00b6 Adds Get-BISF Adds ConvertTo-DateTime private function to handle DateTime conversion on PowerShell Core / Windows PowerShell 19.10.2 \u00b6 First version pushed to the PowerShell Gallery Initial functions are: Export-EvergreenResourceStrings , Get-AdobeAcrobatReaderDC , Get-CitrixAppLayeringFeed , Get-CitrixApplicationDeliveryManagementFeed , Get-CitrixEndpointManagementFeed , Get-CitrixGatewayFeed , Get-CitrixHypervisorFeed , Get-CitrixLicensingFeed , Get-CitrixReceiverFeed , Get-CitrixSdwanFeed , Get-CitrixVirtualAppsDesktopsFeed , Get-CitrixWorkspaceApp , Get-CitrixWorkspaceAppFeed , Get-CitrixXenServerTools , Get-ControlUpAgent , Get-FileZilla , Get-GoogleChrome , Get-Greenshot , Get-LibreOffice , Get-MicrosoftPowerShellCore , Get-MicrosoftSsms , Get-MicrosoftVisualStudioCode , Get-MozillaFirefox , Get-NotepadPlusPlus , Get-OracleVirtualBox , Get-PaintDotNet , Get-VideoLanVlcPlayer , Get-VMwareTools , Get-Zoom","title":"Changelog"},{"location":"changelog/#change-log","text":"","title":"Change log"},{"location":"changelog/#2209629","text":"Adds TrackerSoftwarePDFXChangeEditor #371 , MozillaGeckoDriver #375 Adds additional release rings for MicrosoftTeams Updates MicrosoftOneDrive to better handle the update source that returns BOM characters without having to perform a find/replace Updates public functions for better support for -WhatIf #372","title":"2209.629"},{"location":"changelog/#2209622","text":"Updates BitwardenDesktop to fix an issue with a change in GitHub repositories #365 Updates VMwareTools to address returning the latest Tools version where that version is not yet bundled with ESXi. #336 Updates PDFForgePDFCreator to change the source location for updates and ensure it returns the current version #368","title":"2209.622"},{"location":"changelog/#2208618","text":"Updates Zoom to add x64 and ARM64 support for meetings clients. Updates Platform property to better identify application installer Updates Invoke-EvergreenLibraryUpdate to add installer path to application version information JSON file #362 BREAKING CHANGES The values of the Property property in Zoom have changed. The values are Meetings , Rooms , Plugin , VDI , Citrix , VMware","title":"2208.618"},{"location":"changelog/#2207609","text":"Adds functions to create an Evergreen library - a library is a directory that contains application installers and allows you to keep multiple versions. Functions are New-EvergreenLibrary , Invoke-EvergreenLibraryUpdate , and Get-EvergreenLibrary #357 Updates MicrosoftFSLogixApps to revert the source URL to https://aka.ms/fslogix/download . Hey, Microsoft, any chance you could stop changing the source URL please!? #359 Updates output from Get-EvergreenApp where a an unsupported value for -Name is specified. Get-EvergreenApp will attempt to output supported similar applications Fixes an issue in AdoptiumTemurin8 , AdoptiumTemurin11 , AdoptiumTemurin16 , AdoptiumTemurin17 , AdoptiumTemurin18 to address instances where releases returned from the update feed don't include details for MSI installers #360","title":"2207.609"},{"location":"changelog/#2207596","text":"Adds function Export-EvergreenApp - exports application details gathered by Get-EvergreenApp to an external JSON file. This function reads any existing JSON for that application, adds the new version content, sorts for unique versions, then outputs the new content back to the target JSON file.","title":"2207.596"},{"location":"changelog/#2207592","text":"Updates the approach to detecting new versions in MicrosoftWvdRemoteDesktop . Uses update details available in JSON format and addresses issue #352 Fixes and issue in VMwareTools where the download URL returned doesn't match the latest version available #336 Removes hard-coded ErrorAction = Continue in private function Invoke-WebRequestWrapper to enable setting ErrorAction preference when calling this function from an application function","title":"2207.592"},{"location":"changelog/#2206583","text":"Fixes an issue with MozillaThunderbird when attempting to return downloads for the full language list #350","title":"2206.583"},{"location":"changelog/#2206581","text":"Adds AppVentiX #205 Updates MozillaThunderbird to align with MozillaFirefox - this function will return en-US as the default language. Additional languages can be passed to MozillaThunderbird via Get-EvergreenApp -AppParams Updates private function Get-GitHubRepoRelease to support authentication to the GitHub API with a personal access token. The function will look for the GITHUB_TOKEN or GH_TOKEN environment variables and use the value of that variable in the authentication request, if the variable exists #195","title":"2206.581"},{"location":"changelog/#2206574","text":"Adds AutoDarkMode #335 , CodelerityApacheNetBeans #339 , JeremyMainGPUProfiler #337 , EgnyteDesktopApp #340 Fixes SumatraPDFReader due to changes in download URLs #338","title":"2206.574"},{"location":"changelog/#2205567","text":"Adds DockerDesktop #332 Updates 1Password to return 1Password 8.x update; 1Password7 will now continue to return updates for 1Password 7.x #330 Addresses an issue in RCoreTeamRforWindows to better handle when the source site is down Updates the source used for MicrosoftFSLogixApps - this is a workaround because Microsoft has changed the aka.ms link to the FSLogix Apps agent download, again. I really wish they would stop doing that.","title":"2205.567"},{"location":"changelog/#2205561","text":"Adds VMwareOSOptimizationTool Adds VMwareHorizonClientAlt (an alternative method for retrieving details for the VMware Horizon Client.) Fix an issue with VMwareTools due to changes in source data Fix an issue with MattermostDesktop due to changes in releases on the GitHub repository BREAKING CHANGES The following applications have been removed from Evergreen as they provide only links to downloads rather than direct links to installers - CitrixAppLayeringFeed , CitrixApplicationDeliveryManagementFeed , CitrixEndpointManagementFeed , CitrixGatewayFeed , CitrixHypervisorFeed , CitrixLicensingFeed , CitrixReceiverFeed , CitrixSdwanFeed , CitrixVirtualAppsDesktopsFeed , CitrixWorkspaceAppFeed","title":"2205.561"},{"location":"changelog/#2205555","text":"Adds AdoptiumTemurin18 , Tower Adds VMwareWorkstationPlayer , VMwareWorkstationPro #275 Updates Resolve-DnsNameWrapper (and GhislerTotalCommander ) to work under PowerShell Core using DnsClient-PS . Manual installation of DnsClient-PS on macOS or Linux is required","title":"2205.555"},{"location":"changelog/#2205549","text":"Fixes an issue in TechSmithSnagit and GitForWindows under Linux where filename case was preventing Get-EvergreenApp from sourcing application functions Removes Date property from PuTTY as the value is updated on each query, rather than when the version was released Updates Resolve-DnsNameWrapper with Import-Module -Name \"DnsClient\" to ensure the Resolve-DnsName command is available","title":"2205.549"},{"location":"changelog/#2205546","text":"Updates RStudio with new update sources for all curren branches and now returns Free and Pro editions #318 Fixes an issue with installers returned by MicrosoftEdgeDriver and MicrosoftEdgeWebView2Runtime Updates McNeelRhino to work under PowerShell 6/7 - resolves an issue when using Invoke-RestMethod which does not follow a HTTP 302 response BREAKING CHANGES RStudio returns new properties that will require filtering the output. Properties include: Branch , Channel , ProductName , and InstallerName","title":"2205.546"},{"location":"changelog/#2205541","text":"Fixes MicrosoftSsms to address returning the latest version and binaries #305 Fixes an issue in MicrosoftEdge , MicrosoftEdgeDriver , MicrosoftEdgeWebView2Runtime where versions were sorted differently between PowerShell Core and Windows PowerShell to ensure the correct versions are returned #311 Fixes an issue in VeraCrypt where the version string returned was not correct","title":"2205.541"},{"location":"changelog/#2205537","text":"Adds AdobeAcrobatProStdDC to return the current version number and the trial installer for Adobe Acrobat DC Standard and Pro Fixes a regression introduced in version 2204.534 where AdobeAcrobatReaderDC was renamed to AdobeAcrobatReader","title":"2205.537"},{"location":"changelog/#2204534","text":"Adds Test-EvergreenApp that enables testing of installers returned by Save-EvergreenApp to determine whether the URI is valid Adds AdobeAcrobatDC that uses an alternative method to AdobeAcrobat to determine the current version of Adobe Acrobat Standard/Pro DC and Adobe Acrobat Reader DC. AdobeAcrobat has been left as-is to avoid a breaking change and to continue to provide updates for earlier versions of Acrobat / Reader updates Adds Obsidian #310 , ScreenToGif Updates MicrosoftEdge , MicrosoftEdgeDriver , MicrosoftEdgeWebView2Runtime to ensure that the correct versions are returned for the Enterprise view for Edge installers #311 Updates various functions to use Write-Error instead of throw to ensure that functions continue where a specific query for an installer fails #306 BREAKING CHANGES: Updates the approach used in AdobeAcrobatReaderDC to determine the version and available downloads for Adobe Acrobat Reader DC. Adobe has changed the available enterprise installers at https://get.adobe.com/uk/reader/enterprise/ #312","title":"2204.534"},{"location":"changelog/#2202525","text":"Adds DevToys , DebaucheeBarrier Update Save-EvergreenApp to return error code on download failure instead of Throw. This allows the function to continue when multiple objects are passed into the function","title":"2202.525"},{"location":"changelog/#2202521","text":"Adds HashicorpPacker , HashicorpBoundary , HashicorpVault , HashicorpWaypoint , HashicorpConsul , HashicorpTerraform , HashicorpNomad #241","title":"2202.521"},{"location":"changelog/#2201519","text":"Adds TogglDesktop #281 , OperaBrowser #299 , OperaGXBrowser #299 Adds Hindi language to AdobeAcrobatReaderDC to add the MUI installer to the list of returned installers #297 Updates the approach used in Microsoft365Apps to find branch version details #294 . The previous approach would occasionally list incorrect versions","title":"2201.519"},{"location":"changelog/#2112512","text":"Adds MicrosoftWvdMultimediaRedirection https://docs.microsoft.com/en-us/azure/virtual-desktop/multimedia-redirection Updates the source URL for MicrosoftWvdRtcService #288 Updates installer types for NotepadPlusPlus #287 Fixes an issue with MicrosoftPowerShell due to changes in the update source #282 Addresses code issues identified with PSScriptAnalyzer","title":"2112.512"},{"location":"changelog/#2112504","text":"Adds ImageMagickStudioImageMagick #242 , Miniconda #246 , TorProjectTorBrowser #246 , diagrams.net #276 Adds AdoptiumTemurin8 , AdoptiumTemurin11 , AdoptiumTemurin16 , AdoptiumTemurin17 and addresses #273 #199 , Updates MicrosoftOneDrive with new update sources and adds more update channels. Now includes: Production , Enterprise , Insider , InternalSlow , InternalFast #269 Updates MicrosoftTeams with new approach for dynamically determining download URLs and adds .exe installers Updates Microsoft.NET due to changes in source location for .NET 6. Dynamically finds installer source URLs and provides windowsdesktop , runtime , sdk installers. Includes .NET 6.0 , 5.0 and 3.1 #278 Updates FoxitPDFEditor to fix an issue with changes to language properties from the update source #274 Updates GitHubRelease with additional file types to return by default Thanks to @JonathanPitre","title":"2112.504"},{"location":"changelog/#2111488","text":"Adds -CustomPath parameter to Save-EvergreenApp - allows for specifying a specific target directory for downloads instead of building the directory structure automatically from the input object #260 Adds OctopusDeployServer #238 , OctopusTentacle #239 , 7ZipZS #232 , PDF24Creator #258 , MicrosoftEdgeDriver #262 , MirantisLens #248 , GeekSoftwarePDF24Creator #256 Adds dbeaver , MattermostDesktop , PuTTY #255 . Thanks to @BornToBeRoot Adds VisualCppRedistAIO #250 , OpenWebStart #263 . Thanks to @JonathanPitre Updates MozillaFirefox to output MSIX file type and ARM64 architecture Updates AmazonCorretto to include version 17 #249 Updates GoogleChrome to include channels Dev and Beta #243 Updates source URI for MicrosoftFSLogixApps due to changes in source #259 Fixes URI values for SumatraPDFViewer due to changes in source #211 Fixes URI values for FoxitReader due to changes in source #261 BREAKING CHANGES: Removes all default languages from MozillaFirefox and includes en-US only. Any supported languages can be passed to MozillaFirefox by passing a hashtable to -AppParams . For example: Get-EvergreenApp -Name \"MozillaFirefox\" -AppParams @{Language=\"en-GB\", \"es-ES\"} Removes FIREFOX_ESR_NEXT from MozillaFirefox as the Firefox update feed is not including the version number","title":"2111.488"},{"location":"changelog/#2110467","text":"Fixes an issue with AdobeAcrobat where the string returned from the Adobe update API added a new line after the version number #233 Adds GhislerTotalCommander #229 , PaintDotNetOfflineInstaller #235 , TelerikFiddlerClassic , voidtoolsEverything #230 Adds USBPcap . Thanks to Dan Gough Updates method used to determine version and download for JSAP Adds private function Resolve-DnsNameWrapper to resolve DNS TXT records. Used by GhislerTotalCommander . Currently supports Windows only BREAKING CHANGES: Disables LibreOffice - the update method keeps changing requiring a significant amount of work to fix each time. #218 Updates Microsoft365Apps to fix some instances where the incorrect version number returned, and updates channel names in Channel property using the names listed in the Channel property in the configuration.xml. A Name property has been added with the full channel names to ensure readability. This reflects the same channel names used when creating a configuration in the Microsoft 365 Apps admin center Channel properties are listed in the following articles: Configuration options for the Office Deployment Tool , Update channel for Office LTSC 2021 , Update channel for Office 2019 Full channel names are listed here: Update history for Microsoft 365 Apps","title":"2110.467"},{"location":"changelog/#2108458","text":"Adds MicrosoftEdgeWebView2Runtime , MicrosoftBotFrameworkEmulator , Naps2 , SmartBearSoapUI , NevcairielLAVFilters Adds the parameter -AppParams to Get-EvergreenApp that takes a hashtable of parameters to be passed to the internal application functions. Right now, this will only work with GitHubRelease - enabling Evergreen to return the releases for any GitHub repository with Windows releases that you pass via -AppParams Updates the approach used for TelegramDesktop , because Telegram posts a release to GitHub that doesn't match the latest Windows release BREAKING CHANGES: Updates the channel names, and adds additional channels, in Microsoft365Apps - this release adds all available Microsoft 365 Apps channels - FirstReleaseCurrent , Insiders , Monthly , Current , MonthlyEnterprise , Deferred , Broad , Targeted , FirstReleaseDeferred , Perpetual2019 , PerpetualVL2019 Disables CiscoWebEx - function is unable to return the current WebEx version using the existing method and no working method has been found","title":"2108.458"},{"location":"changelog/#2108450","text":"Adds deviceTRUST Fixes an issue in Save-EvergreenApp when the path specified in the -Path parameter does not exist Updates LibreOffice to gracefully handle download a scenario where the The Document Foundation pulls the download links for a published version #218 BREAKING CHANGES: Updates Postman with x86 and x64 architecture Updates LibreOffice with Release property with a value of Still or Fresh","title":"2108.450"},{"location":"changelog/#2107441","text":"Adds FoxitPDFEditor Adds FreedomScientificFusion , FreedomScientificJAWS , FreedomScientificZoomText , MestrelabMnova , jrsoftwareInnoSetup . Thanks to @adotcoop Updates the process used to determine updates in TableauDesktop . Thanks to @adotcoop Updates DatePattern in PSFPython to return the correct localised date Updates AdobeReaderDC with internal function Invoke-RestMethodWrapper replacing direct use of Invoke-RestMethod Updates MicrosoftWvdBootloader , MicrosoftWvdInfraAgent , MicrosoftWvdRemoteDesktop , MicrosoftWvdRtcService , OracleVirtualBox , and LibreOffice to use internal function Invoke-WebRequestWrapper replacing direct use of Invoke-WebRequest Updates internal function Invoke-WebRequestWrapper with parameter -ReturnObject to enable application functions to return Headers, Content, RawContent etc. Updates internal function Invoke-WebRequestWrapper with parameter -Method that allows, Default , Head , Post , etc., required by various application functions","title":"2107.441"},{"location":"changelog/#2107431","text":"Adds SignalDesktop Updates MicrosoftAzureCoreFunctionTools to return MSI installers #213 Updates CitrixWorkspaceApp to return a Stream property that includes a value of Current or LTSR Updates LibreOffice #171 , CitrixWorkspaceApp , OracleJava8 , MicrosoftSsms to use Invoke-RestMethodWrapper to avoid needing to convert update feed into XML simplifying the code BREAKING CHANGES: Renames AtlassianBitbucket to AtlassianSourcetree #177","title":"2107.431"},{"location":"changelog/#2107425","text":"Adds jq , PSAppDeployToolkit Adds Anaconda , McNeelRhino , PSFPython , TableauPrep , TableauReader , TechSmithCamtasia , TechSmithSnagit . Thanks to @adotcoop Updates Get-GitHubRepoRelease to actively query the GitHub API for available requests to avoid issues when rate limited Updates Get-GitHubRepoRelease with a new parameter - -ReturnVersionOnly that enables returning only the version property of the latest release. This enables finding the version number and using alternative download sources, where the vendor does not include binary releases on the GitHub repository","title":"2107.425"},{"location":"changelog/#2107418","text":"Adds BlueJ , Postman , TableauDesktop . Thanks to @adotcoop Adds MicrosoftAzureFunctionsCoreTools , MasterPackager Updates Get-EvergreenApp to sort output on the Version property in descending order Updates internal functions Invoke-SystemNetRequest , Invoke-WebRequestWrapper , Resolve-InvokeWebRequest , Resolve-SystemNetWebRequest to not throw in the event of a source URL being unavailable, to allow for more graceful handling of vendor sources being temporarily unavailable","title":"2107.418"},{"location":"changelog/#2106407","text":"Adds CendioThinLinc , JASP , JetBrainsIntelliJIDEA , JetBrainsPyCharm , MendeleyDesktop , MiniZincIDE , Minitab , MuseScore , Pandoc , Protege , RDAnalyzer , RStudio , SafeExamBrowser , Zotero . Thanks to @adotcoop Updates MicrosoftWindowsPackageManagerClient to return the .appxbundle installer Fixes an issue in Save-EvergreenApp when calling Remove-Variable","title":"2106.407"},{"location":"changelog/#2106402","text":"Adds AmazonCorretto , ArtifexGhostscript , FreeFem , Gephi , Praat , SAGAGIS , Scratch , TeXstudio , gretl . Thanks to @adotcoop Updates private function Get-Architecture with additional processor architecture detections Updates private function Get-GitHubRepoRelease to return a custom object if the GitHub API is rate limited BREAKING CHANGES: Remove portable installers and .zip file types from Notepad++","title":"2106.402"},{"location":"changelog/#2106395","text":"Adds AkeoRufus #179 , BlenderLauncher #178 Updates MicrosoftFSLogixApps to return both the production and preview releases #176 Updates Veracrypt to return the complete version number (e.g. 1.24-Update7 ) #166 BREAKING CHANGES: Adds the Production and Preview channels to MicrosoftFSLogixApps that will require filtering with Where-Object","title":"2106.395"},{"location":"changelog/#2105388","text":"Update VMwareHorizonClient with additional filtering to select the latest version correctly to address #161 Add internal function Save-File to download a URL with Invoke-WebRequest and return the downloaded file path Update internal application functions for consistent use of Resolve-SystemNetWebRequest to address #174 - Get-FoxitReader , Get-LogMeInGoToOpener , Get-MicrosoftSsms , Get-MicrosoftVisualStudio , Get-RingCentral , Get-Slack Update references to documentation site https://stealthpuppy.com/Evergreen to https://stealthpuppy.com/evergreen","title":"2105.388"},{"location":"changelog/#2105383","text":"Adds CiscoWebEx ( #141 ), VeraCrypt ( #160 ), KarakunOpenWebStart ( #163 ) Updates MicrosoftWvdRemoteDesktop with the Preview release and fixes source URLs for the public release Adds ARM64 architecture to MicrosoftTeams #162 Adds MSI file type to Wireshark Updates internal function Get-SourceForgeRepoRelease with improvements to find releases and download URIs","title":"2105.383"},{"location":"changelog/#2105371","text":"Adds Audacity , Wireshark ( #153 ), LogMeInGoToMeeting ( #152 ), LogMeInGoToOpener Updates AdobeAcrobat to include Reader updates for 2015 , 2017 , 2020 Updates AdobeAcrobat to include 64-bit updates for Reader and Acrobat DC BREAKING CHANGES Adds the Architecture property to AdobeAcrobat","title":"2105.371"},{"location":"changelog/#2105366","text":"Fixes an issue with Remove-Variable in Save-EvergreenApp Fix #149 Updates Save-EvergreenApp to skip downloading a file if it already exists and adds support for -Force Updates help for Save-EvergreenApp Adds nb-NO language support to MozillaFirefox Fix #146","title":"2105.366"},{"location":"changelog/#2105363","text":"Adds ImageGlass , MicrosoftAzureStorageExplorer , Nomacs , Notable , OBSStudio Updates URL used by TeamViewer to return the current version #147 Updates Save-EvergreenApp to output the result of Get-ChildItem as the output to the pipeline Updates module to use external help MAML-based help with platyPS to make updating help content easier General code improvements","title":"2105.363"},{"location":"changelog/#2104355","text":"Changes FoxitReader to return MSI installers instead of EXEs. Removes Elex, Portuguese (Portugal), and Turkish language support from this application because the installers returned are out of date. Adds the following languages to AdobeAcrobatReaderDC : Swedish, Basque, Catalan, Croatian, Czech, Hungarian, Polish, Romanian, Russian, Slovakian, Slovenian, Turkish, Ukrainian Adds a known issues list to the documentation: https://stealthpuppy.com/evergreen/knownissues.html","title":"2104.355"},{"location":"changelog/#2104348","text":"Adds the Consumer release (to the existing Enterprise release) and Dev, Beta channels, and ARM64 architecture to MicrosoftEdge Adds 64-bit architecture to MicrosoftOneDrive Adds BeekeeperStudio , VMwareHorizonClient , AdoptOpenJDK 8 , AdoptOpenJDK 11 , AdoptOpenJDK 16 Modifies Get-EvergreenApp to load internal per-application functions on demand, instead of loading all of these function into memory at module import Updates Get-CitrixRssFeed to use Invoke-RestMethod to simplify handling of the XML feed Updates various functions to Throw more consistently when encountering errors General code improvements","title":"2104.348"},{"location":"changelog/#2104337","text":"BREAKING CHANGE : This version removes the Get- function for each application and introduces Get-EvergreenApp . See the docs site on how to use the new functions https://stealthpuppy.com/evergreen/ Adds Get-EvergreenApp , Find-EvergreenApp and Save-EvergreenApp Adds file type to SourceForge applications Re-instates ControlUpAgent and ControlUpConsole Fixes the LTS release in Microsoft.NET Fixes localised date format for Gimp , GoogleChrome , MicrosoftEdge , MicrosoftFSLogixApps , MicrosoftSsms , FoxitReader Migrates tests to Pester 5 Adds additional Pester tests for private functions General code optimisations and fixes","title":"2104.337"},{"location":"changelog/#2103305","text":"Fixes an issue with Get-AdobeAcrobat to ensure that Track property has the correct value (DC, 2020, etc.) and the Language property (Neutral, Multi) #130","title":"2103.305"},{"location":"changelog/#2103303","text":"Adds Get-NETworkManager , Get-Anki Updates Get-AdobeAcrobat to include updates for Adobe Acrobat Reader DC. This function now returns updates for both Acrobat Pro and Reader Retrieve the installers for Adobe Acrobat Reader DC with Get-AdobeAcrobatReaderDC and any available updates with Get-AdobeAcrobat Temporarily disables Get-ControlUpAgent and Get-ControlUpConsole","title":"2103.303"},{"location":"changelog/#2103298","text":"Adds Get-MicrosoftAzureDataStudio , Get-ControlUpConsole Updates Get-ControlUpAgent to use the published JSON at https://www.controlup.com/latest-agent-console/ - the last vestiges of any screen scraping code have been swept away Updates Get-AdobeAcrobatReaderDC to account for the new 64-bit version of Reader to add #121 . Filter with Where-Object to return the required version, language and architecture BREAKING CHANGES Adds Architecture property and removes Type property from the output of Get-AdobeAcrobatReaderDC Removes the Adobe Acrobat Reader DC updaters from Get-AdobeAcrobatReaderDC as there is no consistent automated method to determine whether an update is required or optional Changes the output of Get-ControlUpAgent - the values in the Framework property have changed and the function only returns the most recent agent version","title":"2103.298"},{"location":"changelog/#2102291","text":"Renames function Get-AdobeAcrobatProDC to Get-AdobeAcrobat and includes support for returning updates for Adobe Acrobat Pro/Standard DC, 2020, 2017, and 2015. Addresses #114 Alias Get-AdobeAcrobatProDC included for backward compatibility Adds Preview ring to Get-MicrosoftTeams Updates function comment-based help and corrects spelling across several functions BREAKING CHANGES Adds Track property to Get-AdobeAcrobat with values of DC , 2020 , 2017 , 2015 - filter with Where-Object Adds Ring property to Get-MicrosoftTeams for General (i.e., current / production ring) and Preview rings - filter with Where-Object","title":"2102.291"},{"location":"changelog/#2102286","text":"Adds the ARM architecture to Get-MicrosoftVisualStudioCode Updates Get-MicrosoftWvdRemoteDesktop to output the URI property value in the format https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE4MntQ instead of the original fwlink source URL (e.g. https://go.microsoft.com/fwlink/?linkid=2068602 ) Updates the following functions to use Invoke-RestMethod (via Invoke-RestMethodWrapper ) instead of Invoke-WebRequest to simplify code and fix an issue where some functions where returning Version as a PSObject instead of System.String ( #109 ) Get-AtlassianBitbucket , Get-Cyberduck , Get-FileZilla , Get-Fork , Get-RingCentral , Get-ScooterBeyondCompare , Get-SumatraPDFReader , Get-VideoLanVlcPlayer Updates module ReleaseNotes location to: https://stealthpuppy.com/evergreen/changelog.html","title":"2102.286"},{"location":"changelog/#2101281","text":"Renames Get-MicrosoftOffice , to Get-Microsoft365Apps to align with product name. The alias Get-MicrosoftOffice is included for backward compatibility Adds the Monthly Enterprise channel to Get-Microsoft365Apps output. See #107 Adds private function Invoke-RestMethodWrapper to enable normalisation across public functions and PowerShell/Windows PowerShell that use Invoke-RestMethod Updates private function Get-GitHubRepoRelease to use Invoke-RestMethodWrapper Updates several public functions to use Invoke-RestMethodWrapper instead of the previous method of Invoke-WebRequest | ConvertTo-Json - Get-1Password , Get-CitrixVMTools , Get-FoxitReader , Get-GoogleChrome , Get-Microsoft365Apps , Get-MicrosoftEdge , Get-MicrosoftTeams , Get-MicrosoftVisualStudioCode , Get-MozillaFirefox , Get-MozillaThunderbird Updates public functions that used Invoke-RestMethod to use Invoke-RestMethodWrapper instead - Get-Gimp , Get-MicrosoftPowerShell , Get-MicrosoftVisualStudio Renames private function Invoke-WebContent to Invoke-WebRequestWrapper and makes general improvements to the handling of Invoke-WebRequest Renames private function ConvertFrom-SourceForgeReleasesJson to Get-SourceForgeRepoRelease Updates and optimises this function to make use of Invoke-RestMethodWrapper so that it can query a SourceForge repository and return the required output in a single function Simplifies code in public functions that return SourceForge releases - Get-7zip , Get-KeePass , Get-PDFForgePDFCreator , Get-ProjectLibre , Get-WinMerge , Get-WinSCP Renames private functions for more descriptive function names (these resolve HTTP 301/302 return codes): Resolve-Uri to Resolve-SystemNetWebRequest Resolve-RedirectedUri to Resolve-InvokeWebRequest BREAKING CHANGES Removes parameter from several functions (below) to simplify existing functions and support a move to a single Get-EvergreenApp function Removes the -Channel and -Platform parameters from Get-MicrosoftVisualStudioCode . Filter output using Where-Object on the Channel and Platform parameters on the function output Removes the -Language parameter from Get-MozillaFirefox and Get-MozillaThunderbird . Filter output using Where-Object { $_.Language -eq \"en-US\" } or similar. These functions will return the following languages (for additional languages, please open an issue on the project): en-US , en-GB , en-CA , es-ES , sv-SE , pt-BR , pt-PT , de , fr , it , ja , nl , zh-CN , zh-TW , ar , hi-IN , ru","title":"2101.281"},{"location":"changelog/#2101275","text":"Adds Get-AtlassianBitbucket , Get-TelegramDesktop , Get-Gimp , Get-BitwardenDesktop , Get-MicrosoftBicep Updates Get-MicrosoftPowerShell to return both the Stable and LTS releases of PowerShell BREAKING CHANGES Update output of Get-MicrosoftOneDrive - changes property Sha256Hash to Sha256 to be consistent with other functions Adds a Release property to the output of Get-MicrosoftPowerShell - use Where-Object to filter on Stable or LTS","title":"2101.275"},{"location":"changelog/#2101263","text":"Adds Get-AdobeBrackets , Get-Fork , Get-MicrosoftVisualStudio , Get-VercelHyper Updates manifest for MicrosoftWvdRemoteDesktop to ensure evergreen source URLs used for resolving downloads Updates manifest for MicrosoftVisualStudioCode","title":"2101.263"},{"location":"changelog/#2101256","text":"Adds Get-Terminals , Get-PeaZipPeaZip , Get-Slack , Get-MicrosoftWindowsPackageManagerClient , Get-KeePassXCTeamKeePassXC , Get-SumatraPDFReader Renames Get-Atom , to Get-GitHubAtom to better align with vendor name. The alias Get-Atom is included for backward compatibility Fixes an issue with Get-AdobeAcrobatReaderDC - Adobe doesn't use HTTPS with their download locations yet. See #99 Updates Get-AdobeAcrobatReaderDC to simplify code and better align manifest with standard structure","title":"2101.256"},{"location":"changelog/#2101249","text":"Adds Get-MicrosoftWvdRemoteDesktop , Get-MozillaThunderbird , Get-ProjectLibre , Get-RingCentral , Get-RCoreTeamRforWindows , Get-StefansToolsgregpWin Renames Get-MicrosoftPowerShellCore to Get-MicrosoftPowerShell - PowerShell Core was renamed to PowerShell with the release of PowerShell 7.0. The alias Get-MicrosoftPowerShellCore is included for backward compatibility Fixes an issue with Get-GitHubRelease that ignored anything passed to the -Uri parameter Adds the MSIX format to the output of Get-MicrosoftOneDrive - filter output with the Type property (I'm not really sure how useful MSIX format for the OneDrive client is right now though...) Adds the VboxGuestAdditions ISO to the output of Get-OracleVirtualBox - filter output with the Type property Refactors Get-Zoom to simplify function code and improve output Updates version output for Get-MicrosoftWvdRtcService and Get-MicrosoftWvdInfraAgent Updates manifest for a number of functions to better align with an updated standard structure (see Manifests/Template.json ) BREAKING CHANGES: Output of Get-MicrosoftOneDrive has changed - Platform has been removed and Type has been added Output of Get-OracleVirtualBox has changed - Type property has been added Output of Get-Zoom has changed - filter output with the Platform and Type properties","title":"2101.249"},{"location":"changelog/#2012242","text":"Adds Get-AdobeAcrobatProDC , Get-TelerikFiddlerEverywhere , Get-1Password Adds Windows Installer downloads output to Get-FoxitReader Updates Get-MicrosoftSsms to query an evergreen update URL to gather new versions from the product releases feed NOTE: the version of SSMS in the releases feed is not the actual current release version - we can only work with what the feed returns; See #82 Updates Get-MicrosoftSsms to output all supported languages for downloads - filter output on the Language property Updates Get-MozillaFirefox to return both Exe and Msi versions of the Firefox installer Adds SHA256 hash property to output from Get-MicrosoftVisualStudioCode Fixes an issue with the URI output in Get-Cyberduck that was returning an additional / character Refactors private function to query the GitHub releases API ( Get-GitHubRepoRelease , replacing ConvertFrom-GitHubReleasesJson ) to use Invoke-RestMethod for simpler public functions used to return GitHub releases Updates the following functions to use Get-GitHubRepoRelease - Get-Atom , Get-AdoptOpenJdk , Get-BISF , Get-dnGrep , Get-GitForWindows , Get-GitHubRelease , Get-Greenshot , Get-Handbrake , Get-MicrosoftPowerShellCore , Get-MicrosoftPowerToys , Get-mRemoteNG , Get-NotepadPlusPlus , Get-OpenJDK , Get-OpenShellMenu , Get-ShareX , Get-Win32OpenSSH , Get-WixToolSet Updates manifest for a number of functions to better align with an updated standard structure (see Manifests/Template.json ) Updates private function ConvertTo-DateTime to better handle date/time format conversion. Still some improvements to be made here BREAKING CHANGES: Updates Get-OpenJDK to return only Msi releases and removes Debug, zip etc. On-going improvements - see #76 Removes Beta and Snapshots releases from Get-Cyberduck Removes Debug releases from Get-Greenshot Removes SafeMode releases from Get-Handbrake Removes Beta channel and ARM64 releases from Get-MicrosoftEdge Removes Zip format releases from Get-MicrosoftPowerShellCore Removes Symbols releases from Get-Win32OpenSSH","title":"2012.242"},{"location":"changelog/#2012225","text":"Adds Get-Microsoft.NET (.NET 5.0 and .NET Core), Get-Win32OpenSSH , Get-MicrosoftPowerToys Updates Get-OpenJDK to return all releases. Further filtering will be added in the future per #76 Updates Get-MozillaFirefox to resolve download URIs for both EXE and MSI Firefox installers and updates output with additional properties ( Architecture , Channel and Type ). See #83 . Note: this introduces a breaking change - the -Platform switch has been removed, you will need to filter the output on the Architecture property Updates Get-AdobeAcrobatReader to return additional languages #84 . Note that Reader DC does not provide the latest version for all languages - it may be a better approach to use the MUI version of the Reader installer if your language is supported","title":"2012.225"},{"location":"changelog/#2010219","text":"Update Get-FileZilla to fix invalid download URI returned from the FileZilla update feed. Fix #75 Update Get-Cyberduck to remove code that replaces // with / . Returns unfiltered URL from Cyberduck update feed. Fix #75","title":"2010.219"},{"location":"changelog/#2009218","text":"Fix Get-FoxitReader with changes to download page in FoxitReader.json . Address #72 Fix Get-Zoom with changes to resolved URIs. Address #73 Update MicrosoftWvdRtcService.json to new version of the Microsoft Remote Desktop WebRTC Redirector Service Update Resolve-Uri with additional verbose output","title":"2009.218"},{"location":"changelog/#2006212","text":"Renames Get-CitrixXenServerTools to Get-CitrixVMTools and adds Get-CitrixXenServerTools alias Updates Get-CitrixVMTools with new release URL for v7 updates and add v9 updates Updates install command lines for Get-CitrixVMTools Adds Get-AdoptOpenJDK - closes #69","title":"2006.212"},{"location":"changelog/#2006207","text":"Fix path in downloads from apps hosted on Source Forge returned in ConvertFrom-SourceForgeReleasesJson.ps1 . Fixes #67 Update Get-MozillaFirefox to return Extended Support Release as well as Current Release. Address #61 Update manifests to address #57 #54 #53 #52","title":"2006.207"},{"location":"changelog/#2006203","text":"Removes Size property from Get-FoxitReader because this isn't being gathered consistently for each download Updates version / releases feed for Get-MicrosoftSsms to ensure the current version is returned Updates the way private function ConvertFrom-SourceForgeReleasesJson returns available downloads from SourceForge Updates Get-7zip , Get-KeePass , Get-PDFForgePDFCreator and Get-WinMerge to support new approach to retrieving SourceForge downloads","title":"2006.203"},{"location":"changelog/#2005190","text":"Adds Get-MicrosoftWvdBootLoader - Get the filename and download URL for the Microsoft Windows Virtual Desktop Remote Desktop Boot Loader Updates Get-FoxitReader to sort release versions correctly and return latest (v10.x)","title":"2005.190"},{"location":"changelog/#2005187","text":"Adds Get-MicrosoftWvdRtcService - returns the version, filename and download for the Microsoft Remote Desktop WebRTC Redirector service for Windows Virtual Desktop","title":"2005.187"},{"location":"changelog/#2005183","text":"Updates Get-VMwareTools to return the very latest version with updated download URL Adds Get-WixToolset","title":"2005.183"},{"location":"changelog/#2005176","text":"Fixes an issue where Get-MicrosoftEdge was only returning ARM64 downloads Updates Get-MicrosoftEdge to only return downloads for the Enterprise ring (removed Consumer ring) Fixes an issue with Get-MicrosoftTeams where it was returning an incorrect download URL","title":"2005.176"},{"location":"changelog/#2005172","text":"Updates Get-MicrosoftEdge to correctly return the latest version and policy files for the Enterprise ring Updates output for private function Resolve-Uri with addition properties Updates Get-FoxitReader , Get-MicrosoftFSLogixApps , and Get-MicrosoftSsms to use Resolve-Uri instead of Resolve-RedirectedUri for improved performance Updates Get-LibreOffice to retrieve latest version from the update API instead of page scraping Updates private function ConvertTo-DateTime with improvements in returning localised date (so the rest of us don't need to be stuck with US date formats) Aligns Get-NotepadPlusPlus with private function ConvertFrom-GitHubReleasesJson to return GitHub release data Fixes output in Get-VMwareTools to ensure correct version and download URL are returned Adds date to output in several functions General code and inline help improvements Adds module icon for display in the PowerShell Gallery","title":"2005.172"},{"location":"changelog/#2004161","text":"Updates Get-MicrosoftEdge with the following: Returns Edge for Windows only Removes -Channels and -Platforms parameters. Filter output with Where-Object instead Returns these channels and downloads only Stable , Beta , EdgeUpdate , and Policy (administrative templates) Filters and returns only the latest version of each of the above channels and downloads Output includes Channel (Stable, Beta etc.) and Release (Enterprise, Consumer) to enable filtering","title":"2004.161"},{"location":"changelog/#2004157","text":"Adds Get-MicrosoftWvdInfraAgent Adds Get-dnGrep Recode of Get-PaintDotNet (or how did I not know about ConvertFrom-StringData before?) To simplify output, removes Linux, macOS output from Get-CitrixWorkspaceApp , Get-GoogleChrome , Get-OracleVirtuaBox , Get-LibreOffice , Get-MicrosoftVisualStudioCode , Get-MozillaFirefox , Get-OracleVirtualBox , Get-TeamViewer Updates RegEx method to extract version across various functions to simplify code Splits Pester tests for Public functions to allow for faster local testing","title":"2004.157"},{"location":"changelog/#2004147","text":"Adds Get-Handbrake , Get-KeePass , Get-OpenShellMenu , Get-VastLimitsUberAgent , Get-WinSCP Removes macOS and Linux output from Get-AdobeAcrobatReader , Get-LibreOffice Filters macOS and Linux output from private function ConvertFrom-GitHubReleasesJson.ps1 Fixes spaces in private function ConvertFrom-SourceForgeReleasesJson","title":"2004.147"},{"location":"changelog/#2004141","text":"Adds private function ConvertFrom-SourceForgeReleasesJson to convert JSON release info from SourceForge projects and simplify adding additional functions that pull release info from SourceForge projects. Release information is limited by what's provided from SourceForge Updates Get-WinMerge to use ConvertFrom-SourceForgeReleasesJson Adds Get-7Zip , Get-PDFForgePDFCreator Renames -TrustCertificate parameter in private function Invoke-WebContent to -SkipCertificateCheck to align with -SkipCertificateCheck available in ' Invoke-WebRequest in PowerShell Core Enables -SkipCertificateCheck for both PowerShell Core and Windows PowerShell in Invoke-WebContent . Previously supported Windows PowerShell only Improves code in Invoke-WebContent Adds -Uri parameter validation in Get-GitHubRelease to ensure valid GitHub URLs are passed to the function Sets function global ErrorPreference to Stop to ensure better exception output from functions in the event of failures","title":"2004.141"},{"location":"changelog/#2004139","text":"Adds ConvertFrom-GitHubReleasesJson to standardise queries to GitHub repositories Updates Get-Atom , Get-BISF , Get-GitForWindows , Get-Greenshot , Get-MicrosoftPowerShellCore , Get-OpenJDK , Get-ShareX , Get-mRemoteNG to use ConvertFrom-GitHubReleasesJson Updates RegEx for version matching strings for BISF , GitForWindows , ShareX Adds Get-Architecture and Get-Platform private functions Adds Get-GitHubRelease to enable returning version and downloads from any GitHub repository. Use to get versions of applications on GitHub that aren't yet included in Evergreen","title":"2004.139"},{"location":"changelog/#2004134","text":"Fixes an issue where Get-Zoom was still returning a URI to downloads with query strings attached.","title":"2004.134"},{"location":"changelog/#2004133","text":"Updates URL to current version for TeamViewer . New URL requires different approach to query Adds Invoke-SystemNetRequest that uses System.Net.WebRequest to make a HTTP request and return response Updates Get-TeamViewer to use Invoke-SystemNetRequest to retrieve version from updated URL. Updates code to return version and download URL as a result Updates Get-Zoom to use Resolve-Uri to follow download URLs and find version number. Get-Zoom now returns more versions numbers for Zoom downloads than previously. Updates RegEx approach that returns version numbers from download URLs","title":"2004.133"},{"location":"changelog/#2004126","text":"Adds back Get-FileZilla using the application update API. Currently returns only the 64-bit version of FileZilla for Windows.","title":"2004.126"},{"location":"changelog/#2004125","text":"Adds Get-MicrosoftOneDrive . We recommend validating versions returned by this function with OneDrive release notes Removes Get-FileZilla until a more robust process to return versions and download can be created Removes progress bar for Invoke-WebRequest for faster query of APIs Updates Get-NotepadPlusPlus to use the GitHub releases API to find new versions as the application update API can be out of date","title":"2004.125"},{"location":"changelog/#2002120","text":"Updates Get-GitForWindows to return correct version number Updates Get-Zoom to return version number correctly Adds Resolve-Uri with a new method of returning redirects from 301/302 via @iainbrighton","title":"2002.120"},{"location":"changelog/#2001117","text":"Updates Get-FileZilla to return 32-bit and 64-bit download URIs","title":"2001.117"},{"location":"changelog/#2001110","text":"Adds Get-MicrosoftTeams Update error handling in Get-VideoLanVlcPlayer","title":"2001.110"},{"location":"changelog/#2001104","text":"Adds Get-MicrosoftEdge for the new Chromium based Microsoft Edge Additional verbose output in Invoke-WebContent","title":"2001.104"},{"location":"changelog/#1911101","text":"Adds Get-ScooterBeyondCompare Updates XML parsing approach in Get-CitrixRssFeed , Get-CitrixWorkspaceApp , Get-NotepadPlusPlus , Get-VideoLanVlcPlayer","title":"1911.101"},{"location":"changelog/#191197","text":"Adds private function Resolve-RedirectedUri to handle resolving 301/302 redirects on PowerShell Core and Windows PowerShell Updates Get-VideoLanVlcPlayer , Get-MicrosoftSsms , Get-FoxitReader , Get-MicrosoftFSLogixApps , Get-Zoom with full support for PowerShell Core Updates logic to filter out prerelease assets in Get-Atom , Get-BISF , Get-GitForWindows , Get-Greenshot , Get-MicrosoftPowerShellCore , Get-OpenJDK , Get-ShareX , Get-mRemoteNG Prevents Get-MicrosoftSsms , Get-CitrixRssFeed , Get-Cyberduck , Get-OracleJava8 from throwing on error Updates to application manifests with some work on silent install commands","title":"1911.97"},{"location":"changelog/#191195","text":"Adds Get-MicrosoftFSLogixApps","title":"1911.95"},{"location":"changelog/#191193","text":"Fixes version match in Get-ControlUpAgent","title":"1911.93"},{"location":"changelog/#191191","text":"Adds Get-Cyberduck","title":"1911.91"},{"location":"changelog/#191187","text":"Adds Get-JamTreeSizeFree and Get-JamTreeSizeProfessional Fixes URL to Release notes / CHANGELOG in module manifest","title":"1911.87"},{"location":"changelog/#191184","text":"Changes approach used in Get-ControlUpAgent to retrieve agent details and enables PowerShell Core support Implemented per-application manifests (URLs, RegEx, strings etc.) for simpler function management Adds Export-EvergreenFunctionStrings to export per-application manifests Renames function Get-Java8 to Get-OracleJava8 Adds Pester tests for Public functions to ensure URI properties are valid","title":"1911.84"},{"location":"changelog/#191175","text":"Updates Get-LibreOffice update query approach to provide a more consistent output Updates Get-LibreOffice to work on PowerShell Core Changes Get-LibreOffice output and parameters to align with other functions Updates Get-NotepadPlusPlus to gracefully handle update server issues (CloudFlare DDOS challenges) Fixes version output in Get-OpenJDK Updates Get-mRemoteNG with handling issues when getting Updates Updates to Public function Pester tests Updates Evergreen.json with consistent property naming and corresponding functions","title":"1911.75"},{"location":"changelog/#191062","text":"Updates Get-MicrosoftSsms to ensure that the URI property returns the correct SSMS download for the latest version","title":"1910.62"},{"location":"changelog/#191053","text":"Adds Get-WinMerge","title":"1910.53"},{"location":"changelog/#191050","text":"Updates Get-VideoLanVlcPlayer output to include ZIP and MSI links for VLC Player for Windows","title":"1910.50"},{"location":"changelog/#191049","text":"Updates Get-MicrosoftSsms to URL (e.g. https://go.microsoft.com/fwlink/?LinkId=761491 ) to return actual URI","title":"1910.49"},{"location":"changelog/#191048","text":"Updates Get-VideoLanVlcPlayer to return download mirrors for URI values","title":"1910.48"},{"location":"changelog/#191047","text":"Adds Get-Atom and Get-TeamViewer","title":"1910.47"},{"location":"changelog/#191039","text":"Update Get-Zoom to the same HTTP post as https://zoom.us/support/download to return the download URI. Returns download for Windows and VDI environments Build script changes","title":"1910.39"},{"location":"changelog/#191028","text":"Adds Get-mRemoteNG Update version format to YearMonth.Build (hopefully we won't change this again) Automate versioning in the module to the new format Automate update of appveyor.yml as YearMonth changes Output variables in AppVeyor to \\tests\\appveyor.md","title":"1910.28"},{"location":"changelog/#19101826","text":"Adds Get-OpenJDK Changes version notation to: YearMonth.Day.Build","title":"1910.18.26"},{"location":"changelog/#191025","text":"Adds Get-MicrosoftOffice","title":"19.10.25"},{"location":"changelog/#191024","text":"Fixes URIs for updates in Get-AdobeAcrobatReaderDC Adds additional Pester tests for Public functions to ensure generated URI values are valid","title":"19.10.24"},{"location":"changelog/#191021","text":"Adds Get-FoxitReader","title":"19.10.21"},{"location":"changelog/#191020","text":"Fixes output in Get-GitForWindows , Get-MicrosoftSmss","title":"19.10.20"},{"location":"changelog/#191019","text":"Adds Get-GitForWindows , Get-ShareX","title":"19.10.19"},{"location":"changelog/#191011","text":"Adds Get-Java8","title":"19.10.11"},{"location":"changelog/#19109","text":"Adds Get-BISF Adds ConvertTo-DateTime private function to handle DateTime conversion on PowerShell Core / Windows PowerShell","title":"19.10.9"},{"location":"changelog/#19102","text":"First version pushed to the PowerShell Gallery Initial functions are: Export-EvergreenResourceStrings , Get-AdobeAcrobatReaderDC , Get-CitrixAppLayeringFeed , Get-CitrixApplicationDeliveryManagementFeed , Get-CitrixEndpointManagementFeed , Get-CitrixGatewayFeed , Get-CitrixHypervisorFeed , Get-CitrixLicensingFeed , Get-CitrixReceiverFeed , Get-CitrixSdwanFeed , Get-CitrixVirtualAppsDesktopsFeed , Get-CitrixWorkspaceApp , Get-CitrixWorkspaceAppFeed , Get-CitrixXenServerTools , Get-ControlUpAgent , Get-FileZilla , Get-GoogleChrome , Get-Greenshot , Get-LibreOffice , Get-MicrosoftPowerShellCore , Get-MicrosoftSsms , Get-MicrosoftVisualStudioCode , Get-MozillaFirefox , Get-NotepadPlusPlus , Get-OracleVirtualBox , Get-PaintDotNet , Get-VideoLanVlcPlayer , Get-VMwareTools , Get-Zoom","title":"19.10.2"},{"location":"examples/","text":"Example usage \u00b6 Here's a few examples of using Evergreen functions to return application versions and downloads. Microsoft Edge \u00b6 Get-EvergreenApp -Name MicrosoftEdge will return the latest versions and downloads for Microsoft Edge, including Group Policy administrative templates. To return the latest version of Microsoft Edge and the download URI for 64-bit Windows, use the following syntax: Get-EvergreenApp -Name MicrosoftEdge | Where-Object { $_ . Architecture -eq \"x64\" -and $_ . Channel -eq \"Stable\" -and $_ . Release -eq \"Enterprise\" } This will return output similar to the following: Version : 97 . 0 . 1072 . 69 Platform : Windows Channel : Stable Release : Enterprise Architecture : x64 Date : 20 / 1 / 2022 Hash : AB27CC051E07ADF4EDD807699541A7516E18C32794272482B7F24ECE18917BE3 URI : https :// msedge . sf . dl . delivery . mp . microsoft . com / filestreamingservice / files / 9f730c98-d191 - 4607-aa1e-e28bd4d9f67e / MicrosoftEdgeEnterpriseX64 . msi Microsoft FSLogix Apps \u00b6 Get-EvergreenApp -Name MicrosoftFSLogixApps will return the latest version and download URI for Microsoft FSLogix Apps. Because the output is simple, no additional filtering is required: Get-EvergreenApp -Name MicrosoftFSLogixApps Version : 2 . 9 . 7654 . 46150 Date : 9 / 1 / 2021 12 : 54 : 48 am URI : https :// download . microsoft . com / download / 4 / 8 / 2 / 4828e1c7 - 176a - 45bf-bc6b-cce0f54ce04c / FSLogix_Apps_2 . 9 . 7654 . 46150 . zip Microsoft Teams \u00b6 Most Windows desktop environments are going to be on 64-bit Windows, so to get the 64-bit version of Microsoft Teams use the following syntax: Get-EvergreenApp -Name MicrosoftTeams | Where-Object { $_ . Architecture -eq \"x64\" -and $_ . Ring -eq \"General\" -and $_ . Type -eq \"msi\" } Microsoft OneDrive \u00b6 Get-EvergreenApp -Name MicrosoftOneDrive uses the OneDrive update feed to return version from several release rings - Enterprise , Production and Insider . Often the Production ring returns more than one release: Version : 21 . 016 . 0124 . 0002 Ring : Insider Sha256 : BP / TxWlUFk0rbPVXRlbjYLhddSROtWOFTk7gCK8PWJc = Type : Exe URI : https :// oneclient . sfx . ms / Win / Insiders / 21 . 016 . 0124 . 0002 / OneDriveSetup . exe Version : 21 . 016 . 0124 . 0002 Ring : Insider Sha256 : N / A Type : Msix URI : https :// oneclient . sfx . ms / Win / Insiders / 21 . 016 . 0124 . 0002 / Microsoft . OneDriveSyncClient_8wekyb3d8bbwe . msix Version : 21 . 002 . 0104 . 0005 Ring : Production Sha256 : 8xzNz / Yt2ahAc / BZxN5j5gWc7aWypo0A46uUROq8vzg = Type : Exe URI : https :// oneclient . sfx . ms / Win / Prod / 21 . 002 . 0104 . 0005 / OneDriveSetup . exe Version : 21 . 002 . 0104 . 0005 Ring : Production Sha256 : N / A Type : Msix URI : https :// oneclient . sfx . ms / Win / Prod / 21 . 002 . 0104 . 0005 / Microsoft . OneDriveSyncClient_8wekyb3d8bbwe . msix Version : 20 . 169 . 0823 . 0008 Ring : Enterprise Sha256 : kDd6mfMp34H7gp4JRBoM // 3WNnMZGpz7mba5Ns / OtBs = Type : Exe URI : https :// oneclient . sfx . ms / Win / Enterprise / 20 . 169 . 0823 . 0008 / OneDriveSetup . exe Version : 20 . 169 . 0823 . 0008 Ring : Enterprise Sha256 : N / A Type : Msix URI : https :// oneclient . sfx . ms / Win / Enterprise / 20 . 169 . 0823 . 0008 / Microsoft . OneDriveSyncClient_8wekyb3d8bbwe . msix To ensure that we return only the very latest Production version, we need to filter the output: ( Get-EvergreenApp -Name MicrosoftOneDrive | Where-Object { $_ . Type -eq \"Exe\" -and $_ . Ring -eq \"Production\" }) | ` Sort-Object -Property @{ Expression = { [System.Version] $_ . Version }; Descending = $true } | Select-Object -First 1 Adobe Acrobat Reader DC \u00b6 Adobe Acrobat Reader DC returns a large number of languages as well as x86 and x64 installers, thus filtering the output is required to return a single installer that might be used in creating a gold image: Get-EvergreenApp -Name AdobeAcrobatReaderDC | Where-Object { $_ . Language -eq \"English\" -and $_ . Architecture -eq \"x64\" } Output should then look similar to the following: Version : 21 . 011 . 20039 Language : English Architecture : x64 Name : Reader DC 2021 . 011 . 20039 English Windows ( 64Bit ) URI : http :// ardownload . adobe . com / pub / adobe / acrobat / win / AcrobatDC / 2101120039 / AcroRdrDCx642101120039_en_US . exe The installer can then be downloaded with Save-EvergreenApp : $Reader = Get-EvergreenApp -Name AdobeAcrobatReaderDC | Where-Object { $_ . Language -eq \"English\" -and $_ . Architecture -eq \"x64\" } $Reader | Save-EvergreenApp -Path \"C:\\Temp\\Reader\" Mozilla Firefox \u00b6 Get-EvergreenApp -Name MozillaFirefox returns both the current version and extended support release, along with installers in several languages. This means that to return a single version of the Firefox installer, we have a fairly complex query. The example below will return the 64-bit current release of Firefox in the US language and a Windows Installer package. To be doubly sure that we get a single installer, Sort-Object is also used to sort the Version property and return the most recent: Get-EvergreenApp -Name \"MozillaFirefox\" -AppParams @{ Language = \"en-GB\" } | Where-Object { $_ . Channel -eq \"LATEST_FIREFOX_VERSION\" -and $_ . Architecture -eq \"x64\" -and $_ . type -eq \"msi\" } | ` Sort-Object -Property @{ Expression = { [System.Version] $_ . Version }; Descending = $true } | Select-Object -First 1 Version : 96 . 0 . 2 Architecture : x64 Channel : LATEST_FIREFOX_VERSION Language : en-GB Type : msi Filename : Firefox Setup 96 . 0 . 2 . msi URI : https :// download-installer . cdn . mozilla . net / pub / firefox / releases / 96 . 0 . 2 / win64 / en-GB / Firefox % 20Setup % 2096 . 0 . 2 . msi","title":"Example usage"},{"location":"examples/#example-usage","text":"Here's a few examples of using Evergreen functions to return application versions and downloads.","title":"Example usage"},{"location":"examples/#microsoft-edge","text":"Get-EvergreenApp -Name MicrosoftEdge will return the latest versions and downloads for Microsoft Edge, including Group Policy administrative templates. To return the latest version of Microsoft Edge and the download URI for 64-bit Windows, use the following syntax: Get-EvergreenApp -Name MicrosoftEdge | Where-Object { $_ . Architecture -eq \"x64\" -and $_ . Channel -eq \"Stable\" -and $_ . Release -eq \"Enterprise\" } This will return output similar to the following: Version : 97 . 0 . 1072 . 69 Platform : Windows Channel : Stable Release : Enterprise Architecture : x64 Date : 20 / 1 / 2022 Hash : AB27CC051E07ADF4EDD807699541A7516E18C32794272482B7F24ECE18917BE3 URI : https :// msedge . sf . dl . delivery . mp . microsoft . com / filestreamingservice / files / 9f730c98-d191 - 4607-aa1e-e28bd4d9f67e / MicrosoftEdgeEnterpriseX64 . msi","title":"Microsoft Edge"},{"location":"examples/#microsoft-fslogix-apps","text":"Get-EvergreenApp -Name MicrosoftFSLogixApps will return the latest version and download URI for Microsoft FSLogix Apps. Because the output is simple, no additional filtering is required: Get-EvergreenApp -Name MicrosoftFSLogixApps Version : 2 . 9 . 7654 . 46150 Date : 9 / 1 / 2021 12 : 54 : 48 am URI : https :// download . microsoft . com / download / 4 / 8 / 2 / 4828e1c7 - 176a - 45bf-bc6b-cce0f54ce04c / FSLogix_Apps_2 . 9 . 7654 . 46150 . zip","title":"Microsoft FSLogix Apps"},{"location":"examples/#microsoft-teams","text":"Most Windows desktop environments are going to be on 64-bit Windows, so to get the 64-bit version of Microsoft Teams use the following syntax: Get-EvergreenApp -Name MicrosoftTeams | Where-Object { $_ . Architecture -eq \"x64\" -and $_ . Ring -eq \"General\" -and $_ . Type -eq \"msi\" }","title":"Microsoft Teams"},{"location":"examples/#microsoft-onedrive","text":"Get-EvergreenApp -Name MicrosoftOneDrive uses the OneDrive update feed to return version from several release rings - Enterprise , Production and Insider . Often the Production ring returns more than one release: Version : 21 . 016 . 0124 . 0002 Ring : Insider Sha256 : BP / TxWlUFk0rbPVXRlbjYLhddSROtWOFTk7gCK8PWJc = Type : Exe URI : https :// oneclient . sfx . ms / Win / Insiders / 21 . 016 . 0124 . 0002 / OneDriveSetup . exe Version : 21 . 016 . 0124 . 0002 Ring : Insider Sha256 : N / A Type : Msix URI : https :// oneclient . sfx . ms / Win / Insiders / 21 . 016 . 0124 . 0002 / Microsoft . OneDriveSyncClient_8wekyb3d8bbwe . msix Version : 21 . 002 . 0104 . 0005 Ring : Production Sha256 : 8xzNz / Yt2ahAc / BZxN5j5gWc7aWypo0A46uUROq8vzg = Type : Exe URI : https :// oneclient . sfx . ms / Win / Prod / 21 . 002 . 0104 . 0005 / OneDriveSetup . exe Version : 21 . 002 . 0104 . 0005 Ring : Production Sha256 : N / A Type : Msix URI : https :// oneclient . sfx . ms / Win / Prod / 21 . 002 . 0104 . 0005 / Microsoft . OneDriveSyncClient_8wekyb3d8bbwe . msix Version : 20 . 169 . 0823 . 0008 Ring : Enterprise Sha256 : kDd6mfMp34H7gp4JRBoM // 3WNnMZGpz7mba5Ns / OtBs = Type : Exe URI : https :// oneclient . sfx . ms / Win / Enterprise / 20 . 169 . 0823 . 0008 / OneDriveSetup . exe Version : 20 . 169 . 0823 . 0008 Ring : Enterprise Sha256 : N / A Type : Msix URI : https :// oneclient . sfx . ms / Win / Enterprise / 20 . 169 . 0823 . 0008 / Microsoft . OneDriveSyncClient_8wekyb3d8bbwe . msix To ensure that we return only the very latest Production version, we need to filter the output: ( Get-EvergreenApp -Name MicrosoftOneDrive | Where-Object { $_ . Type -eq \"Exe\" -and $_ . Ring -eq \"Production\" }) | ` Sort-Object -Property @{ Expression = { [System.Version] $_ . Version }; Descending = $true } | Select-Object -First 1","title":"Microsoft OneDrive"},{"location":"examples/#adobe-acrobat-reader-dc","text":"Adobe Acrobat Reader DC returns a large number of languages as well as x86 and x64 installers, thus filtering the output is required to return a single installer that might be used in creating a gold image: Get-EvergreenApp -Name AdobeAcrobatReaderDC | Where-Object { $_ . Language -eq \"English\" -and $_ . Architecture -eq \"x64\" } Output should then look similar to the following: Version : 21 . 011 . 20039 Language : English Architecture : x64 Name : Reader DC 2021 . 011 . 20039 English Windows ( 64Bit ) URI : http :// ardownload . adobe . com / pub / adobe / acrobat / win / AcrobatDC / 2101120039 / AcroRdrDCx642101120039_en_US . exe The installer can then be downloaded with Save-EvergreenApp : $Reader = Get-EvergreenApp -Name AdobeAcrobatReaderDC | Where-Object { $_ . Language -eq \"English\" -and $_ . Architecture -eq \"x64\" } $Reader | Save-EvergreenApp -Path \"C:\\Temp\\Reader\"","title":"Adobe Acrobat Reader DC"},{"location":"examples/#mozilla-firefox","text":"Get-EvergreenApp -Name MozillaFirefox returns both the current version and extended support release, along with installers in several languages. This means that to return a single version of the Firefox installer, we have a fairly complex query. The example below will return the 64-bit current release of Firefox in the US language and a Windows Installer package. To be doubly sure that we get a single installer, Sort-Object is also used to sort the Version property and return the most recent: Get-EvergreenApp -Name \"MozillaFirefox\" -AppParams @{ Language = \"en-GB\" } | Where-Object { $_ . Channel -eq \"LATEST_FIREFOX_VERSION\" -and $_ . Architecture -eq \"x64\" -and $_ . type -eq \"msi\" } | ` Sort-Object -Property @{ Expression = { [System.Version] $_ . Version }; Descending = $true } | Select-Object -First 1 Version : 96 . 0 . 2 Architecture : x64 Channel : LATEST_FIREFOX_VERSION Language : en-GB Type : msi Filename : Firefox Setup 96 . 0 . 2 . msi URI : https :// download-installer . cdn . mozilla . net / pub / firefox / releases / 96 . 0 . 2 / win64 / en-GB / Firefox % 20Setup % 2096 . 0 . 2 . msi","title":"Mozilla Firefox"},{"location":"export/","text":"Export version information \u00b6 Export-EvergreenApp can be used to export application version information, returned from Get-EvergreenApp , to JSON and store the information in a file. This can be useful for tracking details of application versions in a software library. The following example shows how to gather application version information for Microsoft OneDrive, save the OneDrive installers to a target directory and store the application version information in a JSON file. $OneDrive = Get-EvergreenApp -Name \"MicrosoftOneDrive\" Save-EvergreenApp -InputObject $OneDrive -Path \"C:\\Evergreen\\OneDrive\" Export-EvergreenApp -InputObject $OneDrive -Path \"C:\\Evergreen\\OneDrive\\MicrosoftOneDrive.json\" If an existing JSON file is specified on the -Path parameter of Export-EvergreenApp , the new application version information will be added to the file, with duplicates removed. The file will include JSON data similar to the following: [ { \"Version\" : \"22.077.0410.0007\" , \"URI\" : \"https://oneclient.sfx.ms/Win/Enterprise/22.077.0410.0007/OneDriveSetup.exe\" , \"Type\" : \"exe\" , \"Sha256\" : \"jjiooBnk6w0tEt20O1IWzT63jvuFUxpZgJDoJdpkDgg=\" , \"Ring\" : \"Enterprise\" , \"Architecture\" : \"x86\" }, { \"Version\" : \"22.077.0410.0007\" , \"URI\" : \"https://oneclient.sfx.ms/Win/Enterprise/22.077.0410.0007/amd64/OneDriveSetup.exe\" , \"Type\" : \"exe\" , \"Sha256\" : \"JjoeTY78Krp49KXJEyjtE1O9WSuFmFoNKECtVwKGDW8=\" , \"Ring\" : \"Enterprise\" , \"Architecture\" : \"AMD64\" }, { \"Version\" : \"22.131.0619.0001\" , \"URI\" : \"https://oneclient.sfx.ms/Win/Prod/22.131.0619.0001/OneDriveSetup.exe\" , \"Type\" : \"exe\" , \"Sha256\" : \"ObZEdqfd8gn9RhzR4SkuVS+Xu4R0vye5OnAaUgRl9E4=\" , \"Ring\" : \"Production\" , \"Architecture\" : \"x86\" } ] Note Export-EvergreenApp does not truncate date in the exported file. You will have to manage data with a seperate process as the file grows. The JSON file can be read back into an object with ConvertFrom-Json : Get-Content -Path \"C:\\Evergreen\\OneDrive\\MicrosoftOneDrive.json\" | ConvertFrom-Json","title":"Export version information"},{"location":"export/#export-version-information","text":"Export-EvergreenApp can be used to export application version information, returned from Get-EvergreenApp , to JSON and store the information in a file. This can be useful for tracking details of application versions in a software library. The following example shows how to gather application version information for Microsoft OneDrive, save the OneDrive installers to a target directory and store the application version information in a JSON file. $OneDrive = Get-EvergreenApp -Name \"MicrosoftOneDrive\" Save-EvergreenApp -InputObject $OneDrive -Path \"C:\\Evergreen\\OneDrive\" Export-EvergreenApp -InputObject $OneDrive -Path \"C:\\Evergreen\\OneDrive\\MicrosoftOneDrive.json\" If an existing JSON file is specified on the -Path parameter of Export-EvergreenApp , the new application version information will be added to the file, with duplicates removed. The file will include JSON data similar to the following: [ { \"Version\" : \"22.077.0410.0007\" , \"URI\" : \"https://oneclient.sfx.ms/Win/Enterprise/22.077.0410.0007/OneDriveSetup.exe\" , \"Type\" : \"exe\" , \"Sha256\" : \"jjiooBnk6w0tEt20O1IWzT63jvuFUxpZgJDoJdpkDgg=\" , \"Ring\" : \"Enterprise\" , \"Architecture\" : \"x86\" }, { \"Version\" : \"22.077.0410.0007\" , \"URI\" : \"https://oneclient.sfx.ms/Win/Enterprise/22.077.0410.0007/amd64/OneDriveSetup.exe\" , \"Type\" : \"exe\" , \"Sha256\" : \"JjoeTY78Krp49KXJEyjtE1O9WSuFmFoNKECtVwKGDW8=\" , \"Ring\" : \"Enterprise\" , \"Architecture\" : \"AMD64\" }, { \"Version\" : \"22.131.0619.0001\" , \"URI\" : \"https://oneclient.sfx.ms/Win/Prod/22.131.0619.0001/OneDriveSetup.exe\" , \"Type\" : \"exe\" , \"Sha256\" : \"ObZEdqfd8gn9RhzR4SkuVS+Xu4R0vye5OnAaUgRl9E4=\" , \"Ring\" : \"Production\" , \"Architecture\" : \"x86\" } ] Note Export-EvergreenApp does not truncate date in the exported file. You will have to manage data with a seperate process as the file grows. The JSON file can be read back into an object with ConvertFrom-Json : Get-Content -Path \"C:\\Evergreen\\OneDrive\\MicrosoftOneDrive.json\" | ConvertFrom-Json","title":"Export version information"},{"location":"find/","text":"Find supported applications \u00b6 Find-EvergreenApp is used to return a list of applications supported by Evergreen. For example, let's find out whether the Microsoft FSLogix Apps agent is supported by Evergreen: Find-EvergreenApp -Name \"FSLogix\" The Microsoft FSLogix Apps agent is supported by Evergreen, so this returns output like this: Name : MicrosoftFSLogixApps Application : Microsoft FSLogix Apps Link : https :// docs . microsoft . com / fslogix / The value of the Name property can be used with Get-EvergreenApp to return the latest the Microsoft FSLogix Apps agent: Get-EvergreenApp -Name \"MicrosoftFSLogixApps\" Alternatively, we can pass the output from Find-EvergreenApp directly to Get-EvergreenApp : Find-EvergreenApp -Name \"FSLogix\" | Get-EvergreenApp Output from Find-EvergreenApp can be paged to review the entire supported application list with the following command: Find-EvergreenApp | Out-Host -Paging Output \u00b6 Find-EvergreenApp outputs three properties: Name - the identifier of the supported application. This name matches that used in the application manifest Application - the application manifest includes the full application name Link - each application manifest includes a URL to the application's primary home page The output from Find-EvergreenApp will look similar to the following example: Name Application Link ---- ----------- ---- 1Password 1Password https :// 1password . com / 7zip 7zip https :// www . 7-zip . org / AdobeAcrobat Adobe Acrobat https :// helpx . adobe . com / au / enterprise / using / deploying-acrobat . html AdobeAcrobatReaderDC Adobe Acrobat Reader DC https :// acrobat . adobe . com / us / en / acrobat / pdf-reader . html AdobeBrackets Adobe Brackets http :// brackets . io / Parameters \u00b6 Name \u00b6 The -Name parameter is used to specify the application name to return details for. This is a required parameter. The list of supported applications can be found with Find-EvergreenApp . Alias \u00b6 Find-EvergreenApp has an alias of fea to simplify retrieving supported applications, for example: PS / Users / aaron > fea Name Application Link ---- ----------- ---- 1Password 1Password https :// 1password . com / 7zip 7zip https :// www . 7-zip . org /","title":"Find supported apps"},{"location":"find/#find-supported-applications","text":"Find-EvergreenApp is used to return a list of applications supported by Evergreen. For example, let's find out whether the Microsoft FSLogix Apps agent is supported by Evergreen: Find-EvergreenApp -Name \"FSLogix\" The Microsoft FSLogix Apps agent is supported by Evergreen, so this returns output like this: Name : MicrosoftFSLogixApps Application : Microsoft FSLogix Apps Link : https :// docs . microsoft . com / fslogix / The value of the Name property can be used with Get-EvergreenApp to return the latest the Microsoft FSLogix Apps agent: Get-EvergreenApp -Name \"MicrosoftFSLogixApps\" Alternatively, we can pass the output from Find-EvergreenApp directly to Get-EvergreenApp : Find-EvergreenApp -Name \"FSLogix\" | Get-EvergreenApp Output from Find-EvergreenApp can be paged to review the entire supported application list with the following command: Find-EvergreenApp | Out-Host -Paging","title":"Find supported applications"},{"location":"find/#output","text":"Find-EvergreenApp outputs three properties: Name - the identifier of the supported application. This name matches that used in the application manifest Application - the application manifest includes the full application name Link - each application manifest includes a URL to the application's primary home page The output from Find-EvergreenApp will look similar to the following example: Name Application Link ---- ----------- ---- 1Password 1Password https :// 1password . com / 7zip 7zip https :// www . 7-zip . org / AdobeAcrobat Adobe Acrobat https :// helpx . adobe . com / au / enterprise / using / deploying-acrobat . html AdobeAcrobatReaderDC Adobe Acrobat Reader DC https :// acrobat . adobe . com / us / en / acrobat / pdf-reader . html AdobeBrackets Adobe Brackets http :// brackets . io /","title":"Output"},{"location":"find/#parameters","text":"","title":"Parameters"},{"location":"find/#name","text":"The -Name parameter is used to specify the application name to return details for. This is a required parameter. The list of supported applications can be found with Find-EvergreenApp .","title":"Name"},{"location":"find/#alias","text":"Find-EvergreenApp has an alias of fea to simplify retrieving supported applications, for example: PS / Users / aaron > fea Name Application Link ---- ----------- ---- 1Password 1Password https :// 1password . com / 7zip 7zip https :// www . 7-zip . org /","title":"Alias"},{"location":"getlibrary/","text":"Retrieve details from an Evergreen library \u00b6 Once the library has been populated it will contain information that describes the library - the library configuration file, application version information for each application, and the application installers. Over time, the library will contain information on multiple applications and versions. Get-EvergreenLibrary can be used to retrieve application information from the library: Get-EvergreenLibrary -Path \"E:\\EvergreenLibrary\" Library : @{ Name = EvergreenLibrary ; Applications = System . Object []} Inventory : {@{ ApplicationName = Microsoft . NET ; Versions =}, @{ ApplicationName = MicrosoftOneDrive ; Versions = System . Object []}, @{ ApplicationName = MicrosoftEdge ; Versions = System . Object []}, @{ ApplicationName = MicrosoftTeams ; Versions =}} The object returned contains two properties - Library which is the library defined in EvergreenLibrary.json : Name : EvergreenLibrary Applications : {@{ Name = Microsoft . NET ; EvergreenApp = Microsoft . NET ; Filter = $_ . Architecture -eq \"x64\" -and $_ . Installer -eq \"windowsdesktop\" -and $_ . Channel -eq \"LTS\" }, @{ Name = MicrosoftOneDrive ; EvergreenApp = MicrosoftOneDrive ; Filter = $_ . Architecture -eq \"AMD64\" -and $_ . Ring -eq \"Production\" }, @{ Name = MicrosoftEdge ; EvergreenApp = MicrosoftEdge ; Filter = $_ . Platform -eq \"Windows\" -and $_ . Channel -eq \"Stable\" -and $_ . Release -eq \"Enterprise\" -and $_ . Architecture -eq \"x64\" }, @{ Name = MicrosoftTeams ; EvergreenApp = MicrosoftTeams ; Filter = $_ . Ring -eq \"General\" -and $_ . Architecture -eq \"x64\" -and $_ . Type -eq \"msi\" }} And Inventory which is the application version information for each application in the library: ApplicationName : Microsoft . NET Versions : @{ Version = 6 . 0 . 7 ; URI = https :// download . visualstudio . microsoft . com / download / pr / dc0e0e83 - 0115 - 4518 - 8b6a - 590ed594f38a / 65b63e41f6a80decb37fa3c5af79a53d / windowsdesktop-runtime - 6 . 0 . 7-win-x64 . exe ; Type = exe ; Installer = windowsdesktop ; Channel = LTS ; Architecture = x64 } ApplicationName : MicrosoftOneDrive Versions : {@{ Version = 22 . 131 . 0619 . 0001 ; URI = https :// oneclient . sfx . ms / Win / Prod / 22 . 131 . 0619 . 0001 / amd64 / OneDriveSetup . exe ; Type = exe ; Sha256 = oRJK6vbSwqa8EUWBwjnXitZxz8r4RDrTcamdbEB20Mg =; Ring = Production ; Architecture = AMD64 }, @{ Version = 22 . 141 . 0703 . 0002 ; URI = https :// oneclient . sfx . ms / Win / Prod / 22 . 141 . 0703 . 0002 / amd64 / OneDriveSetup . exe ; Type = exe ; Sha256 = 4jrVokZX9R7AGT9wyrwdVeQWxW1q1 / 4YTYW / A + EVUrk =; Ring = Production ; Architecture = AMD64 }} ApplicationName : MicrosoftEdge Versions : {@{ Version = 103 . 0 . 1264 . 62 ; URI = https :// msedge . sf . dl . delivery . mp . microsoft . com / filestreamingservice / files / 4a067ebd - 1766 - 4463-a54b - 1e5a525cb90f / MicrosoftEdgeEnterpriseX64 . msi ; Release = Enterprise ; Platform = Windows ; Hash = 5DA115179E6D4C84B5204BC135ABCB81AA8512C2AD0909440663E8332EE20FD0 ; Channel = Stable ; Architecture = x64 }, @{ Version = 103 . 0 . 1264 . 71 ; URI = https :// msedge . sf . dl . delivery . mp . microsoft . com / filestreamingservice / files / 52956063 - 8ecb - 4407 - 9ac1 - 52db779bb126 / MicrosoftEdgeEnterpriseX64 . msi ; Release = Enterprise ; Platform = Windows ; Hash = 9AB4B17469440056F2E59D7AA04622C6584DC8B47C087300DC97D979AC7D9F99 ; Channel = Stable ; Architecture = x64 }} ApplicationName : MicrosoftTeams Versions : @{ Version = 1 . 5 . 00 . 17656 ; URI = https :// statics . teams . cdn . office . net / production-windows-x64 / 1 . 5 . 00 . 17656 / Teams_windows_x64 . msi ; Type = msi ; Ring = General ; Architecture = x64 }","title":"Retrieve details from a library"},{"location":"getlibrary/#retrieve-details-from-an-evergreen-library","text":"Once the library has been populated it will contain information that describes the library - the library configuration file, application version information for each application, and the application installers. Over time, the library will contain information on multiple applications and versions. Get-EvergreenLibrary can be used to retrieve application information from the library: Get-EvergreenLibrary -Path \"E:\\EvergreenLibrary\" Library : @{ Name = EvergreenLibrary ; Applications = System . Object []} Inventory : {@{ ApplicationName = Microsoft . NET ; Versions =}, @{ ApplicationName = MicrosoftOneDrive ; Versions = System . Object []}, @{ ApplicationName = MicrosoftEdge ; Versions = System . Object []}, @{ ApplicationName = MicrosoftTeams ; Versions =}} The object returned contains two properties - Library which is the library defined in EvergreenLibrary.json : Name : EvergreenLibrary Applications : {@{ Name = Microsoft . NET ; EvergreenApp = Microsoft . NET ; Filter = $_ . Architecture -eq \"x64\" -and $_ . Installer -eq \"windowsdesktop\" -and $_ . Channel -eq \"LTS\" }, @{ Name = MicrosoftOneDrive ; EvergreenApp = MicrosoftOneDrive ; Filter = $_ . Architecture -eq \"AMD64\" -and $_ . Ring -eq \"Production\" }, @{ Name = MicrosoftEdge ; EvergreenApp = MicrosoftEdge ; Filter = $_ . Platform -eq \"Windows\" -and $_ . Channel -eq \"Stable\" -and $_ . Release -eq \"Enterprise\" -and $_ . Architecture -eq \"x64\" }, @{ Name = MicrosoftTeams ; EvergreenApp = MicrosoftTeams ; Filter = $_ . Ring -eq \"General\" -and $_ . Architecture -eq \"x64\" -and $_ . Type -eq \"msi\" }} And Inventory which is the application version information for each application in the library: ApplicationName : Microsoft . NET Versions : @{ Version = 6 . 0 . 7 ; URI = https :// download . visualstudio . microsoft . com / download / pr / dc0e0e83 - 0115 - 4518 - 8b6a - 590ed594f38a / 65b63e41f6a80decb37fa3c5af79a53d / windowsdesktop-runtime - 6 . 0 . 7-win-x64 . exe ; Type = exe ; Installer = windowsdesktop ; Channel = LTS ; Architecture = x64 } ApplicationName : MicrosoftOneDrive Versions : {@{ Version = 22 . 131 . 0619 . 0001 ; URI = https :// oneclient . sfx . ms / Win / Prod / 22 . 131 . 0619 . 0001 / amd64 / OneDriveSetup . exe ; Type = exe ; Sha256 = oRJK6vbSwqa8EUWBwjnXitZxz8r4RDrTcamdbEB20Mg =; Ring = Production ; Architecture = AMD64 }, @{ Version = 22 . 141 . 0703 . 0002 ; URI = https :// oneclient . sfx . ms / Win / Prod / 22 . 141 . 0703 . 0002 / amd64 / OneDriveSetup . exe ; Type = exe ; Sha256 = 4jrVokZX9R7AGT9wyrwdVeQWxW1q1 / 4YTYW / A + EVUrk =; Ring = Production ; Architecture = AMD64 }} ApplicationName : MicrosoftEdge Versions : {@{ Version = 103 . 0 . 1264 . 62 ; URI = https :// msedge . sf . dl . delivery . mp . microsoft . com / filestreamingservice / files / 4a067ebd - 1766 - 4463-a54b - 1e5a525cb90f / MicrosoftEdgeEnterpriseX64 . msi ; Release = Enterprise ; Platform = Windows ; Hash = 5DA115179E6D4C84B5204BC135ABCB81AA8512C2AD0909440663E8332EE20FD0 ; Channel = Stable ; Architecture = x64 }, @{ Version = 103 . 0 . 1264 . 71 ; URI = https :// msedge . sf . dl . delivery . mp . microsoft . com / filestreamingservice / files / 52956063 - 8ecb - 4407 - 9ac1 - 52db779bb126 / MicrosoftEdgeEnterpriseX64 . msi ; Release = Enterprise ; Platform = Windows ; Hash = 9AB4B17469440056F2E59D7AA04622C6584DC8B47C087300DC97D979AC7D9F99 ; Channel = Stable ; Architecture = x64 }} ApplicationName : MicrosoftTeams Versions : @{ Version = 1 . 5 . 00 . 17656 ; URI = https :// statics . teams . cdn . office . net / production-windows-x64 / 1 . 5 . 00 . 17656 / Teams_windows_x64 . msi ; Type = msi ; Ring = General ; Architecture = x64 }","title":"Retrieve details from an Evergreen library"},{"location":"how/","text":"How Evergreen works \u00b6 Attention Application version and download information is only pulled from official vendor sources (vendor web site, vendor maintained application update API, vendor's official repositories on GitHub or SourceForge etc.) and never a third party. Evergreen uses an approach that returns at least the version number and download URI for applications programmatically - thus for each run an Evergreen function it should return the latest version and download link. Evergreen uses several strategies to return the latest version of software: Application update APIs - by using the same approach as the application itself, Evergreen can consistently return the latest version number and download URI - e.g., Microsoft Edge , Mozilla Firefox or Microsoft OneDrive . Fiddler can often be used to find where an application queries for updates Repository APIs - repo hosts including GitHub and SourceForge have APIs that can be queried to return application version and download links - e.g., Audacity , Notepad++ or WinMerge Web page queries - often a vendor download pages will include a query that returns JSON when listing versions and download links - this avoids page scraping. Evergreen can mimic this approach to return application download URLs; however, this approach is likely to fail if the vendor changes how their pages work - e.g., Adobe Acrobat Reader DC Static URLs - some vendors provide static or evergreen URLs to their application installers. These URLs often provide additional information in the URL that can be used to determine the application version and can be resolved to the actual target URL - e.g., Microsoft FSLogix Apps or Zoom What Evergreen Does Not Do \u00b6 Evergreen does not scape HTML - scraping web pages to parse text and determine version strings and download URLs can be problematic when text in the page changes or the page is out of date. While the use of RegEx to determine application properties (particularly version numbers) is used for some applications, this approach is not preferred, if possible. Pull requests to the Evergreen project that use web page scraping will be closed. For additional applications where the only recourse it to use web page scraping, see the Nevergreen project. Evergreen does not query non-vendor sources - the intention is to use the same update mechanisms that an application uses to find an update. Where this is not possible, Evergreen may use data sources (i.e. JSON or XML) used by a vendor's download web page (e.g., AdobeAcrobatReaderDC ) or another vendor maintained source (e.g., an official GitHub repository).","title":"How Evergreen works"},{"location":"how/#how-evergreen-works","text":"Attention Application version and download information is only pulled from official vendor sources (vendor web site, vendor maintained application update API, vendor's official repositories on GitHub or SourceForge etc.) and never a third party. Evergreen uses an approach that returns at least the version number and download URI for applications programmatically - thus for each run an Evergreen function it should return the latest version and download link. Evergreen uses several strategies to return the latest version of software: Application update APIs - by using the same approach as the application itself, Evergreen can consistently return the latest version number and download URI - e.g., Microsoft Edge , Mozilla Firefox or Microsoft OneDrive . Fiddler can often be used to find where an application queries for updates Repository APIs - repo hosts including GitHub and SourceForge have APIs that can be queried to return application version and download links - e.g., Audacity , Notepad++ or WinMerge Web page queries - often a vendor download pages will include a query that returns JSON when listing versions and download links - this avoids page scraping. Evergreen can mimic this approach to return application download URLs; however, this approach is likely to fail if the vendor changes how their pages work - e.g., Adobe Acrobat Reader DC Static URLs - some vendors provide static or evergreen URLs to their application installers. These URLs often provide additional information in the URL that can be used to determine the application version and can be resolved to the actual target URL - e.g., Microsoft FSLogix Apps or Zoom","title":"How Evergreen works"},{"location":"how/#what-evergreen-does-not-do","text":"Evergreen does not scape HTML - scraping web pages to parse text and determine version strings and download URLs can be problematic when text in the page changes or the page is out of date. While the use of RegEx to determine application properties (particularly version numbers) is used for some applications, this approach is not preferred, if possible. Pull requests to the Evergreen project that use web page scraping will be closed. For additional applications where the only recourse it to use web page scraping, see the Nevergreen project. Evergreen does not query non-vendor sources - the intention is to use the same update mechanisms that an application uses to find an update. Where this is not possible, Evergreen may use data sources (i.e. JSON or XML) used by a vendor's download web page (e.g., AdobeAcrobatReaderDC ) or another vendor maintained source (e.g., an official GitHub repository).","title":"What Evergreen Does Not Do"},{"location":"install/","text":"Installing Evergreen \u00b6 PowerShell Support \u00b6 Evergreen supports Windows PowerShell 5.1 and PowerShell 7.0+. Evergreen should work on PowerShell Core 6.x; however, we are not actively testing on that version of PowerShell, so support cannot be guaranteed. Install from the PowerShell Gallery \u00b6 The Evergreen module is published to the PowerShell Gallery and can be found here: Evergreen . The module can be installed from the gallery with: Install-Module -Name Evergreen Import-Module -Name Evergreen Updating the Module \u00b6 If you have installed a previous version of the module from the gallery, you can install the latest update with Update-Module and the -Force parameter: Update-Module -Name Evergreen -Force Advanced Installation \u00b6 In scripted installations (e.g. operating system deployment), you may wish to ensure that the PowerShell Gallery is first trusted before attempting to install the module: if ( Get-PSRepository | Where-Object { $_ . Name -eq \"PSGallery\" -and $_ . InstallationPolicy -ne \"Trusted\" }) { Install-PackageProvider -Name \"NuGet\" -MinimumVersion 2 . 8 . 5 . 208 -Force Set-PSRepository -Name \"PSGallery\" -InstallationPolicy \"Trusted\" } Then we can install or update Evergreen based on whether the module is already installed or out of date: $Installed = Get-Module -Name \"Evergreen\" -ListAvailable | ` Sort-Object -Property @{ Expression = { [System.Version] $_ . Version }; Descending = $true } | ` Select-Object -First 1 $Published = Find-Module -Name \"Evergreen\" if ( $Null -eq $Installed ) { Install-Module -Name \"Evergreen\" } elseif ( [System.Version] $Published . Version -gt [System.Version] $Installed . Version ) { Update-Module -Name \"Evergreen\" } Manual Installation from the Repository \u00b6 The module can be downloaded from the GitHub source repository which includes the module in the Evergreen folder. The folder needs to be copied into one of your PowerShell Module Paths. To see the full list of available PowerShell Module paths, use $env:PSModulePath.split(';') in a PowerShell console. Common PowerShell module paths include: Current User: %USERPROFILE%\\Documents\\WindowsPowerShell\\Modules\\ All Users: %ProgramFiles%\\WindowsPowerShell\\Modules\\ OneDrive: $env:OneDrive\\Documents\\WindowsPowerShell\\Modules\\ To install from the repository Download the main branch to your workstation Copy the contents of the Evergreen folder onto your workstation into the desired PowerShell Module path Open a Powershell console with the Run as Administrator option Run Set-ExecutionPolicy using the parameter RemoteSigned or Bypass Unblock the files with Get-ChildItem -Path <path to module> -Recurse | Unblock-File Once installation is complete, you can validate that the module exists by running Get-Module -ListAvailable Evergreen . To use the module, load it with: Import-Module Evergreen","title":"Installation"},{"location":"install/#installing-evergreen","text":"","title":"Installing Evergreen"},{"location":"install/#powershell-support","text":"Evergreen supports Windows PowerShell 5.1 and PowerShell 7.0+. Evergreen should work on PowerShell Core 6.x; however, we are not actively testing on that version of PowerShell, so support cannot be guaranteed.","title":"PowerShell Support"},{"location":"install/#install-from-the-powershell-gallery","text":"The Evergreen module is published to the PowerShell Gallery and can be found here: Evergreen . The module can be installed from the gallery with: Install-Module -Name Evergreen Import-Module -Name Evergreen","title":"Install from the PowerShell Gallery"},{"location":"install/#updating-the-module","text":"If you have installed a previous version of the module from the gallery, you can install the latest update with Update-Module and the -Force parameter: Update-Module -Name Evergreen -Force","title":"Updating the Module"},{"location":"install/#advanced-installation","text":"In scripted installations (e.g. operating system deployment), you may wish to ensure that the PowerShell Gallery is first trusted before attempting to install the module: if ( Get-PSRepository | Where-Object { $_ . Name -eq \"PSGallery\" -and $_ . InstallationPolicy -ne \"Trusted\" }) { Install-PackageProvider -Name \"NuGet\" -MinimumVersion 2 . 8 . 5 . 208 -Force Set-PSRepository -Name \"PSGallery\" -InstallationPolicy \"Trusted\" } Then we can install or update Evergreen based on whether the module is already installed or out of date: $Installed = Get-Module -Name \"Evergreen\" -ListAvailable | ` Sort-Object -Property @{ Expression = { [System.Version] $_ . Version }; Descending = $true } | ` Select-Object -First 1 $Published = Find-Module -Name \"Evergreen\" if ( $Null -eq $Installed ) { Install-Module -Name \"Evergreen\" } elseif ( [System.Version] $Published . Version -gt [System.Version] $Installed . Version ) { Update-Module -Name \"Evergreen\" }","title":"Advanced Installation"},{"location":"install/#manual-installation-from-the-repository","text":"The module can be downloaded from the GitHub source repository which includes the module in the Evergreen folder. The folder needs to be copied into one of your PowerShell Module Paths. To see the full list of available PowerShell Module paths, use $env:PSModulePath.split(';') in a PowerShell console. Common PowerShell module paths include: Current User: %USERPROFILE%\\Documents\\WindowsPowerShell\\Modules\\ All Users: %ProgramFiles%\\WindowsPowerShell\\Modules\\ OneDrive: $env:OneDrive\\Documents\\WindowsPowerShell\\Modules\\ To install from the repository Download the main branch to your workstation Copy the contents of the Evergreen folder onto your workstation into the desired PowerShell Module path Open a Powershell console with the Run as Administrator option Run Set-ExecutionPolicy using the parameter RemoteSigned or Bypass Unblock the files with Get-ChildItem -Path <path to module> -Recurse | Unblock-File Once installation is complete, you can validate that the module exists by running Get-Module -ListAvailable Evergreen . To use the module, load it with: Import-Module Evergreen","title":"Manual Installation from the Repository"},{"location":"issues/","text":"Known issues \u00b6 General \u00b6 Where an application source is unavailable the value of the URI property returned may be https://stealthpuppy.com/evergreen/issues/ . If you encounter this scenario, follow the troubleshooting steps . Public Functions \u00b6 Get-EvergreenApp \u00b6 Get-EvergreenApp may not fully support proxy servers. This will be fixed in a future release. Private Functions \u00b6 Resolve-DnsNameWrapper \u00b6 Supports Windows platforms only - this function wraps Resolve-DnsName which is not available under PowerShell 6+ on macOS or Linux. Application functions that use this private function will return an error on non-Windows platforms. Get-GitHubRepoRelease \u00b6 Get-GitHubRepoRelease queries release information from a specified GitHub repository to return version and binaries or is used to source the version number for some applications. This function uses an unauthenticated session to the GitHub REST API, thus requests will be [rate limited]. Using the -Verbose parameter with Get-EvergreenApp for those applications that use GitHub as the source, will display the number of available requests to the API. Updating Get-GitHubRepoRelease to support authenticated requests is planned for a future release. Application Functions \u00b6 7zip \u00b6 The 32-bit installers returned by 7Zip link to a SourceForge download page instead of the file directly. These installers can be downloaded by Invoke-WebRequest by setting the UserAgent to the Googlebot . AdobeAcrobat \u00b6 Where Adobe releases an update for Acrobat/Reader DC for Windows ahead of macOS, the current patch release may not be returned. In most cases, Adobe keeps both platforms in sync, so this should be a rare occurrence. The determine the current update version of AdobeAcrobat , the URL for macOS updates is used. This provides a simple text lookup of the latest version number. Note The Windows version of Adobe Acrobat and Reader uses an update URL like: https://armmf.adobe.com/arm-manifests/win/AcrobatDCManifest3.msi , which would require unpacking and parsing the MSI file. Sample code to query the MSI database has been posted here: AdobeReader download links not valid ; however, this approach will only work on a Windows hosts and will not support macOS or Linux. Alternative application - AdobeAcrobatDC and AdobeAcrobatReaderDC use a web API lookup to determine the current version of Adobe Acrobat Reader DC, Acrobat Standard DC, and Acrobat Pro DC. Earlier version of Acrobat are still affected by this issue. AdobeAcrobatReaderDC \u00b6 AdobeAcrobatReaderDC may not return an installer with the latest update . This application determines the available installers from the Adobe Acrobat Reader download page - Adobe does not always immediately make the latest update available in the current downloadable installer version. Validate whether AdobeAcrobat returns the latest update version. CiscoWebEx \u00b6 The versions returned for Cisco WebEx may be out of date. Refer to Cisco WebEx - new app available, Evergreen returning legacy version only until a fix is found. CitrixWorkspaceApp \u00b6 HDX RealTime Media Engine \u00b6 The version of the HDX RealTime Media Engine for Microsoft Skype for Business for Windows returned by CitrixWorkspaceApp is out of date. This is the version of the HDX RTME that is returned by the Workspace App update feed ( https://downloadplugins.citrix.com/ReceiverUpdates/Prod/catalog_win.xml ). Use CitrixWorkspaceAppFeed to find the latest version of the HDX RTME. Note CitrixWorkspaceAppFeed returns a link to the download page and not the installer directly. See Get-CitrixWorkspaceApp does not return the latest Citrix HDX RealTime Media Engine . 404 Error \u00b6 Occasionally Get-EvergreenApp -Name \"CitrixWorkspaceApp\" may fail with the following error: WARNING : Invoke-RestMethodWrapper : Error at URI : https :// downloadplugins . citrix . com / ReceiverUpdates / Prod / catalog_win . xml . WARNING : Invoke-RestMethodWrapper : Error encountered : Response status code does not indicate success : 404 ( Not Found ).. WARNING : Invoke-RestMethodWrapper : For troubleshooting steps see : https :// stealthpuppy . com / evergreen / troubleshoot /. This typically occurs right after the release of a new version of the Workspace app and may return this result for some time. Right after a new release of the Workspace app, Citrix often makes the update XML file unavailable so that clients do not update immediately. You may have to wait until Citrix makes the URL available again for this function to work. Out of Date Update Feed \u00b6 Occasionally Get-EvergreenApp -Name \"CitrixWorkspaceApp\" may not return the latest version of the Citrix Workspace app. This is due to Citrix making changes to the update feed at https://downloadplugins.citrix.com/ReceiverUpdates/Prod/catalog_win.xml to throttle or prevent automatic rollout of the latest Workspace app. The only recourse is to wait until Citrix corrects the update feed to include the latest version of the Workspace app again. GhislerTotalCommander \u00b6 Supports Windows platforms only - this application relies on Resolve-DnsName which is not available under PowerShell 6+ on macOS or Linux. LibreOffice \u00b6 Attention LibreOffice has been removed from Evergreen due to on-going changes that TDF makes to the update mechanism. LibreOffice uses the update host at https://update.libreoffice.org/check.php to determine the available update release. The Document Foundation does not immediately make the update host return the latest version at the time of release. In a scenario where the update host does not return the very latest version and the TDF has pulled the downloads for the same version returned from the update host, LibreOffice is unable to build valid download links. The only recourse at this time is to wait until the TDF tells the update host to return the latest version. Also see LibreOffice version Microsoft365Apps \u00b6 Microsoft365Apps returns publicly documented channels only. Additional channels may be available from the Microsoft 365 Apps update API; however, these may not align to channels documented at microsoft.com, so are not included in this function. Channel properties are listed in the following articles: Configuration options for the Office Deployment Tool , Update channel for Office LTSC 2021 , Update channel for Office 2019 . Full channel names are listed here: Update history for Microsoft 365 Apps . MicrosoftFSLogixApps \u00b6 Depending on release schedules, the preview version of the FSLogix Apps download may not be available. The preview version is found here: https://aka.ms/fslogix/downloadpreview - if no preview version is behind this URL, Get-EvergreenApp -Name MicrosoftFSLogixApps will return an error when attempting to resolve the preview URL, but will continue to return the release version. MicrosoftSsms \u00b6 The product release feed used by the Microsoft SQL Server Management Studio (e.g., SSMS_PRODUCTRELEASESFEED.xml ) includes the internal build number of the SQL Server Management Studio and not the display version, thus the version return will be similar to 15.0.18369.0 instead of the display version: 18.9.1 . See Download SQL Server Management Studio (SSMS) for more info. Also see SQL SSMS is reporting the wrong version . MicrosoftTeams \u00b6 The version number returned by the Microsoft Teams update API may be slightly different to the version number displayed in the ProductVersion property in the MSI or in Programs and Features. For example, Get-EvergreenApp -Name MicrosoftTeams may report a version number of 1.4.00.8872 , but the Windows Installer may report 1.4.0.8872 . Also see Get-MicrosoftTeams displays slightly wrong formatted version number . MicrosoftWvdRemoteDesktop \u00b6 MicrosoftWvdRemoteDesktop may report an HTTP 503 error from some URLs (see an example below). This is intermittent behavior, but the function should still usable data. Suppress this warning with `-WarningAction \"SilentlyContinue\". WARNING : Invoke-WebRequestWrapper : Error at URI : https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE50Mp8 . WARNING : Invoke-WebRequestWrapper : Error encountered : Response status code does not indicate success : 503 ( Service Unavailable ).. WARNING : Invoke-WebRequestWrapper : For troubleshooting steps see : https :// stealthpuppy . com / evergreen / troubleshoot /. WARNING : Get-MicrosoftWvdRemoteDesktop : Unable to retrieve headers from https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE50Mp8 . WARNING : Invoke-WebRequestWrapper : Error at URI : https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE50t3P . WARNING : Invoke-WebRequestWrapper : Error encountered : Response status code does not indicate success : 503 ( Service Unavailable ).. WARNING : Invoke-WebRequestWrapper : For troubleshooting steps see : https :// stealthpuppy . com / evergreen / troubleshoot /. WARNING : Get-MicrosoftWvdRemoteDesktop : Unable to retrieve headers from https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE50t3P . MozillaFirefox \u00b6 Language Support \u00b6 MozillaFirefox will only return the English US installer by default. This has been done due to the lengthy amount of time that the function takes to query the Mozilla site to find the installers for each channel, architecture and file type. This could be up to 12 objects for each language - if the supported languages are included by default, then the function will take several minutes to return an object. Any supported language can be passed to MozillaFirefox by passing a hashtable to -AppParams . For example: Get-EvergreenApp -Name \"MozillaFirefox\" -AppParams @{Language=\"en-GB\", \"es-ES\"} will return the English (UK) and Spanish language installers for Firefox. Most supported languages can be passed to the function as the language short code. The list of languages can be found in the MozillaFirefox manifest. Errors and Warnings \u00b6 MozillaFirefox will warnings and an error similar to the following which is normal - not all channels or installer types may return an object from the Mozilla site that is used to find an installer download URL. In the example below, a call is being made for the ARM64, MSI version of the Extended Support Release which doesn't exist. WARNING : Resolve-SystemNetWebRequest : Error at URI : https :// download . mozilla . org / ? product = firefox-esr-msi-latest-ssl & os = win64-aarch64 & lang = en-US . WARNING : Resolve-SystemNetWebRequest : Response : Exception calling \"GetResponse\" with \"0\" argument ( s ): \"The remote server returned an error: (404) Not Found.\" . WARNING : Resolve-SystemNetWebRequest : For troubleshooting steps see : https :// stealthpuppy . com / evergreen / troubleshoot /. Write-Error : / Users / aaron / projects / evergreen / Evergreen / Apps / Get-MozillaFirefox . ps1 : 38 Line | 38 | $response = Resolve-SystemNetWebRequest @params | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ | Resolve-SystemNetWebRequest : Exception calling \"GetResponse\" with \"0\" argument ( s ): \"The remote server returned an error: (404) Not Found.\" . You can suppress this output with the following syntax: Get-EvergreenApp -Name \"MozillaFirefox\" -ErrorAction \"SilentlyContinue\" -WarningAction \"SilentlyContinue\" OBSStudio \u00b6 Returning the latest version and download for OBS Studio may fail when the OBS Project modifies the availability of the update manifest at https://obsproject.com/update_studio/manifest.json . Get-EvergreenApp -Name OBSStudio will return a 404 error. The only recourse is to wait until the OBS Project makes the manifest available again. Evergreen could query versions from the GitHub repository; however, the the OBS Project does not consistently maintain releases in the repository. In some instances a specific release of OBS Studio may address an issue with the macOS version only and OBSStudio would then return no results. Also see Get-EvergreenApp OBSStudio not working due to a 404 errors . PaintDotNet \u00b6 Get-EvergreenApp -Name PaintDotNet produces the following error under PowerShell on Linux. As a workaround, use Get-EvergreenApp -Name PaintDotNetOfflineInstaller instead. WARNING : Invoke-WebRequestWrapper : Error at URI : https :// www . getpaint . net / updates / versions . 8 . 1000 . 0 . x64 . en . txt . WARNING : Invoke-WebRequestWrapper : Error encountered : The SSL connection could not be established , see inner exception .. WARNING : Invoke-WebRequestWrapper : For troubleshooting steps see : https :// stealthpuppy . com / evergreen / troubleshoot /. Write-Error : / home / aaron /. local / share / powershell / Modules / Evergreen / 2205 . 561 / Apps / Get-PaintDotNet . ps1 : 20 Line | 20 | $Content = Invoke-WebRequestWrapper -Uri $res . Get . Uri | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ | Invoke-WebRequestWrapper : The SSL connection could not be established , see inner exception . VideoLanVlcPlayer \u00b6 VideoLanVlcPlayer may not always return the latest available release - the release returned by the update feed used by the VLC media player may not be the same as the current version available for download from the videolan.org site, due to the version returned in the update feed. The source code for the update site can be found here: VideoLAN organization > update.videolan.org > Repository . VMwareHorizonClient \u00b6 VMwareHorizonClient may not always return the current release - the major version property in the VMware Horizon Client software update data does not use easily sortable versioning. This may be fixed in a future release. Also see VMware Horizon Client reporting out of date version . Note VMwareHorizonClient returns the Horizon Client in .tar format. This the same URL used when the Horizon Client updates itself - you will need to unpack the .tar file to retrieve the executable installer. Zoom \u00b6 Zoom returns versions as Latest for some downloads - the source used by this function does not provide a method for determining the version number. Also see Zoom currently failing","title":"Known issues"},{"location":"issues/#known-issues","text":"","title":"Known issues"},{"location":"issues/#general","text":"Where an application source is unavailable the value of the URI property returned may be https://stealthpuppy.com/evergreen/issues/ . If you encounter this scenario, follow the troubleshooting steps .","title":"General"},{"location":"issues/#public-functions","text":"","title":"Public Functions"},{"location":"issues/#get-evergreenapp","text":"Get-EvergreenApp may not fully support proxy servers. This will be fixed in a future release.","title":"Get-EvergreenApp"},{"location":"issues/#private-functions","text":"","title":"Private Functions"},{"location":"issues/#resolve-dnsnamewrapper","text":"Supports Windows platforms only - this function wraps Resolve-DnsName which is not available under PowerShell 6+ on macOS or Linux. Application functions that use this private function will return an error on non-Windows platforms.","title":"Resolve-DnsNameWrapper"},{"location":"issues/#get-githubreporelease","text":"Get-GitHubRepoRelease queries release information from a specified GitHub repository to return version and binaries or is used to source the version number for some applications. This function uses an unauthenticated session to the GitHub REST API, thus requests will be [rate limited]. Using the -Verbose parameter with Get-EvergreenApp for those applications that use GitHub as the source, will display the number of available requests to the API. Updating Get-GitHubRepoRelease to support authenticated requests is planned for a future release.","title":"Get-GitHubRepoRelease"},{"location":"issues/#application-functions","text":"","title":"Application Functions"},{"location":"issues/#7zip","text":"The 32-bit installers returned by 7Zip link to a SourceForge download page instead of the file directly. These installers can be downloaded by Invoke-WebRequest by setting the UserAgent to the Googlebot .","title":"7zip"},{"location":"issues/#adobeacrobat","text":"Where Adobe releases an update for Acrobat/Reader DC for Windows ahead of macOS, the current patch release may not be returned. In most cases, Adobe keeps both platforms in sync, so this should be a rare occurrence. The determine the current update version of AdobeAcrobat , the URL for macOS updates is used. This provides a simple text lookup of the latest version number. Note The Windows version of Adobe Acrobat and Reader uses an update URL like: https://armmf.adobe.com/arm-manifests/win/AcrobatDCManifest3.msi , which would require unpacking and parsing the MSI file. Sample code to query the MSI database has been posted here: AdobeReader download links not valid ; however, this approach will only work on a Windows hosts and will not support macOS or Linux. Alternative application - AdobeAcrobatDC and AdobeAcrobatReaderDC use a web API lookup to determine the current version of Adobe Acrobat Reader DC, Acrobat Standard DC, and Acrobat Pro DC. Earlier version of Acrobat are still affected by this issue.","title":"AdobeAcrobat"},{"location":"issues/#adobeacrobatreaderdc","text":"AdobeAcrobatReaderDC may not return an installer with the latest update . This application determines the available installers from the Adobe Acrobat Reader download page - Adobe does not always immediately make the latest update available in the current downloadable installer version. Validate whether AdobeAcrobat returns the latest update version.","title":"AdobeAcrobatReaderDC"},{"location":"issues/#ciscowebex","text":"The versions returned for Cisco WebEx may be out of date. Refer to Cisco WebEx - new app available, Evergreen returning legacy version only until a fix is found.","title":"CiscoWebEx"},{"location":"issues/#citrixworkspaceapp","text":"","title":"CitrixWorkspaceApp"},{"location":"issues/#hdx-realtime-media-engine","text":"The version of the HDX RealTime Media Engine for Microsoft Skype for Business for Windows returned by CitrixWorkspaceApp is out of date. This is the version of the HDX RTME that is returned by the Workspace App update feed ( https://downloadplugins.citrix.com/ReceiverUpdates/Prod/catalog_win.xml ). Use CitrixWorkspaceAppFeed to find the latest version of the HDX RTME. Note CitrixWorkspaceAppFeed returns a link to the download page and not the installer directly. See Get-CitrixWorkspaceApp does not return the latest Citrix HDX RealTime Media Engine .","title":"HDX RealTime Media Engine"},{"location":"issues/#404-error","text":"Occasionally Get-EvergreenApp -Name \"CitrixWorkspaceApp\" may fail with the following error: WARNING : Invoke-RestMethodWrapper : Error at URI : https :// downloadplugins . citrix . com / ReceiverUpdates / Prod / catalog_win . xml . WARNING : Invoke-RestMethodWrapper : Error encountered : Response status code does not indicate success : 404 ( Not Found ).. WARNING : Invoke-RestMethodWrapper : For troubleshooting steps see : https :// stealthpuppy . com / evergreen / troubleshoot /. This typically occurs right after the release of a new version of the Workspace app and may return this result for some time. Right after a new release of the Workspace app, Citrix often makes the update XML file unavailable so that clients do not update immediately. You may have to wait until Citrix makes the URL available again for this function to work.","title":"404 Error"},{"location":"issues/#out-of-date-update-feed","text":"Occasionally Get-EvergreenApp -Name \"CitrixWorkspaceApp\" may not return the latest version of the Citrix Workspace app. This is due to Citrix making changes to the update feed at https://downloadplugins.citrix.com/ReceiverUpdates/Prod/catalog_win.xml to throttle or prevent automatic rollout of the latest Workspace app. The only recourse is to wait until Citrix corrects the update feed to include the latest version of the Workspace app again.","title":"Out of Date Update Feed"},{"location":"issues/#ghislertotalcommander","text":"Supports Windows platforms only - this application relies on Resolve-DnsName which is not available under PowerShell 6+ on macOS or Linux.","title":"GhislerTotalCommander"},{"location":"issues/#libreoffice","text":"Attention LibreOffice has been removed from Evergreen due to on-going changes that TDF makes to the update mechanism. LibreOffice uses the update host at https://update.libreoffice.org/check.php to determine the available update release. The Document Foundation does not immediately make the update host return the latest version at the time of release. In a scenario where the update host does not return the very latest version and the TDF has pulled the downloads for the same version returned from the update host, LibreOffice is unable to build valid download links. The only recourse at this time is to wait until the TDF tells the update host to return the latest version. Also see LibreOffice version","title":"LibreOffice"},{"location":"issues/#microsoft365apps","text":"Microsoft365Apps returns publicly documented channels only. Additional channels may be available from the Microsoft 365 Apps update API; however, these may not align to channels documented at microsoft.com, so are not included in this function. Channel properties are listed in the following articles: Configuration options for the Office Deployment Tool , Update channel for Office LTSC 2021 , Update channel for Office 2019 . Full channel names are listed here: Update history for Microsoft 365 Apps .","title":"Microsoft365Apps"},{"location":"issues/#microsoftfslogixapps","text":"Depending on release schedules, the preview version of the FSLogix Apps download may not be available. The preview version is found here: https://aka.ms/fslogix/downloadpreview - if no preview version is behind this URL, Get-EvergreenApp -Name MicrosoftFSLogixApps will return an error when attempting to resolve the preview URL, but will continue to return the release version.","title":"MicrosoftFSLogixApps"},{"location":"issues/#microsoftssms","text":"The product release feed used by the Microsoft SQL Server Management Studio (e.g., SSMS_PRODUCTRELEASESFEED.xml ) includes the internal build number of the SQL Server Management Studio and not the display version, thus the version return will be similar to 15.0.18369.0 instead of the display version: 18.9.1 . See Download SQL Server Management Studio (SSMS) for more info. Also see SQL SSMS is reporting the wrong version .","title":"MicrosoftSsms"},{"location":"issues/#microsoftteams","text":"The version number returned by the Microsoft Teams update API may be slightly different to the version number displayed in the ProductVersion property in the MSI or in Programs and Features. For example, Get-EvergreenApp -Name MicrosoftTeams may report a version number of 1.4.00.8872 , but the Windows Installer may report 1.4.0.8872 . Also see Get-MicrosoftTeams displays slightly wrong formatted version number .","title":"MicrosoftTeams"},{"location":"issues/#microsoftwvdremotedesktop","text":"MicrosoftWvdRemoteDesktop may report an HTTP 503 error from some URLs (see an example below). This is intermittent behavior, but the function should still usable data. Suppress this warning with `-WarningAction \"SilentlyContinue\". WARNING : Invoke-WebRequestWrapper : Error at URI : https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE50Mp8 . WARNING : Invoke-WebRequestWrapper : Error encountered : Response status code does not indicate success : 503 ( Service Unavailable ).. WARNING : Invoke-WebRequestWrapper : For troubleshooting steps see : https :// stealthpuppy . com / evergreen / troubleshoot /. WARNING : Get-MicrosoftWvdRemoteDesktop : Unable to retrieve headers from https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE50Mp8 . WARNING : Invoke-WebRequestWrapper : Error at URI : https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE50t3P . WARNING : Invoke-WebRequestWrapper : Error encountered : Response status code does not indicate success : 503 ( Service Unavailable ).. WARNING : Invoke-WebRequestWrapper : For troubleshooting steps see : https :// stealthpuppy . com / evergreen / troubleshoot /. WARNING : Get-MicrosoftWvdRemoteDesktop : Unable to retrieve headers from https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE50t3P .","title":"MicrosoftWvdRemoteDesktop"},{"location":"issues/#mozillafirefox","text":"","title":"MozillaFirefox"},{"location":"issues/#language-support","text":"MozillaFirefox will only return the English US installer by default. This has been done due to the lengthy amount of time that the function takes to query the Mozilla site to find the installers for each channel, architecture and file type. This could be up to 12 objects for each language - if the supported languages are included by default, then the function will take several minutes to return an object. Any supported language can be passed to MozillaFirefox by passing a hashtable to -AppParams . For example: Get-EvergreenApp -Name \"MozillaFirefox\" -AppParams @{Language=\"en-GB\", \"es-ES\"} will return the English (UK) and Spanish language installers for Firefox. Most supported languages can be passed to the function as the language short code. The list of languages can be found in the MozillaFirefox manifest.","title":"Language Support"},{"location":"issues/#errors-and-warnings","text":"MozillaFirefox will warnings and an error similar to the following which is normal - not all channels or installer types may return an object from the Mozilla site that is used to find an installer download URL. In the example below, a call is being made for the ARM64, MSI version of the Extended Support Release which doesn't exist. WARNING : Resolve-SystemNetWebRequest : Error at URI : https :// download . mozilla . org / ? product = firefox-esr-msi-latest-ssl & os = win64-aarch64 & lang = en-US . WARNING : Resolve-SystemNetWebRequest : Response : Exception calling \"GetResponse\" with \"0\" argument ( s ): \"The remote server returned an error: (404) Not Found.\" . WARNING : Resolve-SystemNetWebRequest : For troubleshooting steps see : https :// stealthpuppy . com / evergreen / troubleshoot /. Write-Error : / Users / aaron / projects / evergreen / Evergreen / Apps / Get-MozillaFirefox . ps1 : 38 Line | 38 | $response = Resolve-SystemNetWebRequest @params | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ | Resolve-SystemNetWebRequest : Exception calling \"GetResponse\" with \"0\" argument ( s ): \"The remote server returned an error: (404) Not Found.\" . You can suppress this output with the following syntax: Get-EvergreenApp -Name \"MozillaFirefox\" -ErrorAction \"SilentlyContinue\" -WarningAction \"SilentlyContinue\"","title":"Errors and Warnings"},{"location":"issues/#obsstudio","text":"Returning the latest version and download for OBS Studio may fail when the OBS Project modifies the availability of the update manifest at https://obsproject.com/update_studio/manifest.json . Get-EvergreenApp -Name OBSStudio will return a 404 error. The only recourse is to wait until the OBS Project makes the manifest available again. Evergreen could query versions from the GitHub repository; however, the the OBS Project does not consistently maintain releases in the repository. In some instances a specific release of OBS Studio may address an issue with the macOS version only and OBSStudio would then return no results. Also see Get-EvergreenApp OBSStudio not working due to a 404 errors .","title":"OBSStudio"},{"location":"issues/#paintdotnet","text":"Get-EvergreenApp -Name PaintDotNet produces the following error under PowerShell on Linux. As a workaround, use Get-EvergreenApp -Name PaintDotNetOfflineInstaller instead. WARNING : Invoke-WebRequestWrapper : Error at URI : https :// www . getpaint . net / updates / versions . 8 . 1000 . 0 . x64 . en . txt . WARNING : Invoke-WebRequestWrapper : Error encountered : The SSL connection could not be established , see inner exception .. WARNING : Invoke-WebRequestWrapper : For troubleshooting steps see : https :// stealthpuppy . com / evergreen / troubleshoot /. Write-Error : / home / aaron /. local / share / powershell / Modules / Evergreen / 2205 . 561 / Apps / Get-PaintDotNet . ps1 : 20 Line | 20 | $Content = Invoke-WebRequestWrapper -Uri $res . Get . Uri | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ | Invoke-WebRequestWrapper : The SSL connection could not be established , see inner exception .","title":"PaintDotNet"},{"location":"issues/#videolanvlcplayer","text":"VideoLanVlcPlayer may not always return the latest available release - the release returned by the update feed used by the VLC media player may not be the same as the current version available for download from the videolan.org site, due to the version returned in the update feed. The source code for the update site can be found here: VideoLAN organization > update.videolan.org > Repository .","title":"VideoLanVlcPlayer"},{"location":"issues/#vmwarehorizonclient","text":"VMwareHorizonClient may not always return the current release - the major version property in the VMware Horizon Client software update data does not use easily sortable versioning. This may be fixed in a future release. Also see VMware Horizon Client reporting out of date version . Note VMwareHorizonClient returns the Horizon Client in .tar format. This the same URL used when the Horizon Client updates itself - you will need to unpack the .tar file to retrieve the executable installer.","title":"VMwareHorizonClient"},{"location":"issues/#zoom","text":"Zoom returns versions as Latest for some downloads - the source used by this function does not provide a method for determining the version number. Also see Zoom currently failing","title":"Zoom"},{"location":"newlibrary/","text":"Create a new Evergreen library \u00b6 About Evergreen Libraries \u00b6 An Evergreen library is a directory that stores multiple versions of downloaded application installers, defined by EvergreenLibrary.json and gathered by Get-EvergreenApp and Save-EvergreenApp . Evergreen typically returns only the most recent version of an application. An Evergreen library enables the download and storage of multiple versions of an application installer including the details for those versions. This functionality enables the installation of a specific version of an application as required. What makes an Evergreen library \u00b6 An Evergreen library is a directory on a file system that contains EvergreenLibrary.json which defines the applications that will be downloaded and stored into the library. In the listing below, EvergreenLibrary.json lists the applications and how the output from Get-EvergreenApp should be filtered to store the specific application installer. { \"Name\" : \"EvergreenLibrary\" , \"Applications\" : [ { \"Name\" : \"Microsoft.NET\" , \"EvergreenApp\" : \"Microsoft.NET\" , \"Filter\" : \"$_.Architecture -eq \\\"x64\\\" -and $_.Installer -eq \\\"windowsdesktop\\\" -and $_.Channel -eq \\\"LTS\\\"\" }, { \"Name\" : \"MicrosoftOneDrive\" , \"EvergreenApp\" : \"MicrosoftOneDrive\" , \"Filter\" : \"$_.Architecture -eq \\\"AMD64\\\" -and $_.Ring -eq \\\"Production\\\"\" }, { \"Name\" : \"MicrosoftEdge\" , \"EvergreenApp\" : \"MicrosoftEdge\" , \"Filter\" : \"$_.Platform -eq \\\"Windows\\\" -and $_.Channel -eq \\\"Stable\\\" -and $_.Release -eq \\\"Enterprise\\\" -and $_.Architecture -eq \\\"x64\\\"\" }, { \"Name\" : \"MicrosoftTeams\" , \"EvergreenApp\" : \"MicrosoftTeams\" , \"Filter\" : \"$_.Ring -eq \\\"General\\\" -and $_.Architecture -eq \\\"x64\\\" -and $_.Type -eq \\\"msi\\\"\" } ] } The filter can define any property from an application version object, so that you can download only the installer type that you require for the library. For example, you may have a library with production or release version of installers, and another library that hosts preview versions of application installers. Creating an Evergreen library \u00b6 To create a new Evergreen library, use New-EvergreenLibrary and specifiy a valid local or UNC path: New-EvergreenLibrary -Path \"E:\\EvergreenLibrary\" New-EvergreenLibrary will create the target directory and copy the default EvergreenLibrary.json into the path. The library will now be ready to download the 64-bit, release versions of: Microsoft.NET Desktop Runtime Microsoft OneDrive Microsoft Edge Microsoft Teams If you would like to customise the library, open EvergreenLibrary.json in a JSON editor (e.g. Visual Studio Code) and add or remove applications as required.","title":"Create a library"},{"location":"newlibrary/#create-a-new-evergreen-library","text":"","title":"Create a new Evergreen library"},{"location":"newlibrary/#about-evergreen-libraries","text":"An Evergreen library is a directory that stores multiple versions of downloaded application installers, defined by EvergreenLibrary.json and gathered by Get-EvergreenApp and Save-EvergreenApp . Evergreen typically returns only the most recent version of an application. An Evergreen library enables the download and storage of multiple versions of an application installer including the details for those versions. This functionality enables the installation of a specific version of an application as required.","title":"About Evergreen Libraries"},{"location":"newlibrary/#what-makes-an-evergreen-library","text":"An Evergreen library is a directory on a file system that contains EvergreenLibrary.json which defines the applications that will be downloaded and stored into the library. In the listing below, EvergreenLibrary.json lists the applications and how the output from Get-EvergreenApp should be filtered to store the specific application installer. { \"Name\" : \"EvergreenLibrary\" , \"Applications\" : [ { \"Name\" : \"Microsoft.NET\" , \"EvergreenApp\" : \"Microsoft.NET\" , \"Filter\" : \"$_.Architecture -eq \\\"x64\\\" -and $_.Installer -eq \\\"windowsdesktop\\\" -and $_.Channel -eq \\\"LTS\\\"\" }, { \"Name\" : \"MicrosoftOneDrive\" , \"EvergreenApp\" : \"MicrosoftOneDrive\" , \"Filter\" : \"$_.Architecture -eq \\\"AMD64\\\" -and $_.Ring -eq \\\"Production\\\"\" }, { \"Name\" : \"MicrosoftEdge\" , \"EvergreenApp\" : \"MicrosoftEdge\" , \"Filter\" : \"$_.Platform -eq \\\"Windows\\\" -and $_.Channel -eq \\\"Stable\\\" -and $_.Release -eq \\\"Enterprise\\\" -and $_.Architecture -eq \\\"x64\\\"\" }, { \"Name\" : \"MicrosoftTeams\" , \"EvergreenApp\" : \"MicrosoftTeams\" , \"Filter\" : \"$_.Ring -eq \\\"General\\\" -and $_.Architecture -eq \\\"x64\\\" -and $_.Type -eq \\\"msi\\\"\" } ] } The filter can define any property from an application version object, so that you can download only the installer type that you require for the library. For example, you may have a library with production or release version of installers, and another library that hosts preview versions of application installers.","title":"What makes an Evergreen library"},{"location":"newlibrary/#creating-an-evergreen-library","text":"To create a new Evergreen library, use New-EvergreenLibrary and specifiy a valid local or UNC path: New-EvergreenLibrary -Path \"E:\\EvergreenLibrary\" New-EvergreenLibrary will create the target directory and copy the default EvergreenLibrary.json into the path. The library will now be ready to download the 64-bit, release versions of: Microsoft.NET Desktop Runtime Microsoft OneDrive Microsoft Edge Microsoft Teams If you would like to customise the library, open EvergreenLibrary.json in a JSON editor (e.g. Visual Studio Code) and add or remove applications as required.","title":"Creating an Evergreen library"},{"location":"save/","text":"Download installers \u00b6 Evergreen includes the function Save-EvergreenApp that simplifies downloading application installers that are returned from Get-EvergreenApp . All applications will return at least a Version and URI property with many returning additional properties including Architecture , Language , Type , Ring , Channel and Release , dependent on the target application. Additionally, the installer file name is typically determined dynamically with the URI property. To retrieve and download an application installer, we need to use code similar to the following that the filters for the required download and determines the file name before using Invoke-WebRequest to download the file. $Teams = Get-EvergreenApp -Name MicrosoftTeams | Where-Object { $_ . Architecture -eq \"x64\" -and $_ . Ring -eq \"General\" } $TeamsInstaller = Split-Path -Path $Teams . Uri -Leaf Invoke-WebRequest -Uri $Teams . Uri -OutFile \".\\$TeamsInstaller\" -UseBasicParsing This is a simple example, but an application with additional properties and output values is likely to require more complex code to download. For example, Microsoft OneDrive includes a few additional properties and several items in the returned object Version : 89 . 0 . 774 . 68 Platform : Windows Channel : Stable Release : Enterprise Architecture : x64 Date : 1 / 4 / 2021 7 : 29 : 00 pm Hash : 6E1856B2972688D109F550B0A62C264E9829FF1F392E3BE0FC308900AEFD3455 URI : https :// msedge . sf . dl . delivery . mp . microsoft . com / filestreamingservice / files / a67b9c83 - 1671 - 45ab - 982f-e02318eeffc9 / MicrosoftEdgeEnterpriseX64 . msi Save-EvergreenApp accepts the output from each application and simplifies downloading the installers included in an application object by determining the target file name, and constructing a target directory path based on the properties in the application output. Get-EvergreenApp -Name MicrosoftOneDrive | Save-EvergreenApp -Path \"C:\\Apps\\OneDrive\" Save-EvergreenApp will create a folder structure below the path provided (e.g. C:\\Apps\\OneDrive ) built from the various properties in the application object passed to it. A folder structure, based on the available properties in the following list will be created in this order - Channel , Release , Ring , Version , Language , Architecture . Save-EvergreenApp will return the path to each downloaded file that can be used passed to other functions in a script. In the example using MicrosoftOneDrive above, Save-EvergreenApp returns output similar to this: Path ---- C :\\ Apps \\ OneDrive \\ Enterprise \\ 20 . 169 . 0823 . 0008 \\ OneDriveSetup . exe C :\\ Apps \\ OneDrive \\ Production \\ 21 . 030 . 0211 . 0002 \\ OneDriveSetup . exe C :\\ Apps \\ OneDrive \\ Production \\ 21 . 052 . 0314 . 0001 \\ OneDriveSetup . exe C :\\ Apps \\ OneDrive \\ Insider \\ 21 . 056 . 0318 . 0001 \\ OneDriveSetup . exe To download application installers into a single directory, the -CustomPath parameter can be used. Note that an application object can return multiple versions or channels of an application with the same installer name - when using -CustomPath , the first installer will be saved and subsequent installers with the same file name will be skipped. Attention Save-EvergreenApp -CustomPath will only download the first installer passed to the function where the object includes multiple installers with the same file name. Therefore, when using -CustomPath , it would best to filter the output from Get-EvergreenApp before passing it to Save-EvergreenApp . For example: Get-EvergreenApp -Name MicrosoftOneDrive | ` | Where-Object { $_ . Ring -eq \"Enterprise\" -and $_ . Architecture -eq \"AMD64\" -and $_ . Type -eq \"exe\" } | ` Save-EvergreenApp -Path \"C:\\Apps\\OneDrive\" Parameters \u00b6 InputObject \u00b6 An object returned from Get-EvergreenApp with at least the Version and URI properties. Path \u00b6 The parent directory under which a directory structure will be created and application installers saved into. Typically the target path used will be a path per application. CustomPath \u00b6 The target directory into which the application installers will be directly saved into. Typically the target path used will be a path per application. Verbose \u00b6 The -Verbose parameter can be useful for observing application downloads and save paths, including troubleshooting when the expected application details are not returned. When using the -Verbose parameter, Invoke-WebRequest will show download progress which significantly impacts download speed. To suppress download progress, add the -NoProgress switch parameter as well. -NoProgress \u00b6 Save-EvergreenApp uses Invoke-WebRequest to download target application installers. Download progress is suppressed by default for faster downloads; however, when -Verbose is used, download progress will be displayed. Use -NoProgress with -Verbose to suppress download progress while also displaying verbose output. -Force \u00b6 Forces this function to download the target application installers from the URI property even if they already exist in the target directory. Alias \u00b6 Save-EvergreenApp has an alias of sea to simplify downloading applications, for example: PS / Users / aaron > gea Slack | sea -Path / Users / aaron / Temp / Slack","title":"Download installers"},{"location":"save/#download-installers","text":"Evergreen includes the function Save-EvergreenApp that simplifies downloading application installers that are returned from Get-EvergreenApp . All applications will return at least a Version and URI property with many returning additional properties including Architecture , Language , Type , Ring , Channel and Release , dependent on the target application. Additionally, the installer file name is typically determined dynamically with the URI property. To retrieve and download an application installer, we need to use code similar to the following that the filters for the required download and determines the file name before using Invoke-WebRequest to download the file. $Teams = Get-EvergreenApp -Name MicrosoftTeams | Where-Object { $_ . Architecture -eq \"x64\" -and $_ . Ring -eq \"General\" } $TeamsInstaller = Split-Path -Path $Teams . Uri -Leaf Invoke-WebRequest -Uri $Teams . Uri -OutFile \".\\$TeamsInstaller\" -UseBasicParsing This is a simple example, but an application with additional properties and output values is likely to require more complex code to download. For example, Microsoft OneDrive includes a few additional properties and several items in the returned object Version : 89 . 0 . 774 . 68 Platform : Windows Channel : Stable Release : Enterprise Architecture : x64 Date : 1 / 4 / 2021 7 : 29 : 00 pm Hash : 6E1856B2972688D109F550B0A62C264E9829FF1F392E3BE0FC308900AEFD3455 URI : https :// msedge . sf . dl . delivery . mp . microsoft . com / filestreamingservice / files / a67b9c83 - 1671 - 45ab - 982f-e02318eeffc9 / MicrosoftEdgeEnterpriseX64 . msi Save-EvergreenApp accepts the output from each application and simplifies downloading the installers included in an application object by determining the target file name, and constructing a target directory path based on the properties in the application output. Get-EvergreenApp -Name MicrosoftOneDrive | Save-EvergreenApp -Path \"C:\\Apps\\OneDrive\" Save-EvergreenApp will create a folder structure below the path provided (e.g. C:\\Apps\\OneDrive ) built from the various properties in the application object passed to it. A folder structure, based on the available properties in the following list will be created in this order - Channel , Release , Ring , Version , Language , Architecture . Save-EvergreenApp will return the path to each downloaded file that can be used passed to other functions in a script. In the example using MicrosoftOneDrive above, Save-EvergreenApp returns output similar to this: Path ---- C :\\ Apps \\ OneDrive \\ Enterprise \\ 20 . 169 . 0823 . 0008 \\ OneDriveSetup . exe C :\\ Apps \\ OneDrive \\ Production \\ 21 . 030 . 0211 . 0002 \\ OneDriveSetup . exe C :\\ Apps \\ OneDrive \\ Production \\ 21 . 052 . 0314 . 0001 \\ OneDriveSetup . exe C :\\ Apps \\ OneDrive \\ Insider \\ 21 . 056 . 0318 . 0001 \\ OneDriveSetup . exe To download application installers into a single directory, the -CustomPath parameter can be used. Note that an application object can return multiple versions or channels of an application with the same installer name - when using -CustomPath , the first installer will be saved and subsequent installers with the same file name will be skipped. Attention Save-EvergreenApp -CustomPath will only download the first installer passed to the function where the object includes multiple installers with the same file name. Therefore, when using -CustomPath , it would best to filter the output from Get-EvergreenApp before passing it to Save-EvergreenApp . For example: Get-EvergreenApp -Name MicrosoftOneDrive | ` | Where-Object { $_ . Ring -eq \"Enterprise\" -and $_ . Architecture -eq \"AMD64\" -and $_ . Type -eq \"exe\" } | ` Save-EvergreenApp -Path \"C:\\Apps\\OneDrive\"","title":"Download installers"},{"location":"save/#parameters","text":"","title":"Parameters"},{"location":"save/#inputobject","text":"An object returned from Get-EvergreenApp with at least the Version and URI properties.","title":"InputObject"},{"location":"save/#path","text":"The parent directory under which a directory structure will be created and application installers saved into. Typically the target path used will be a path per application.","title":"Path"},{"location":"save/#custompath","text":"The target directory into which the application installers will be directly saved into. Typically the target path used will be a path per application.","title":"CustomPath"},{"location":"save/#verbose","text":"The -Verbose parameter can be useful for observing application downloads and save paths, including troubleshooting when the expected application details are not returned. When using the -Verbose parameter, Invoke-WebRequest will show download progress which significantly impacts download speed. To suppress download progress, add the -NoProgress switch parameter as well.","title":"Verbose"},{"location":"save/#-noprogress","text":"Save-EvergreenApp uses Invoke-WebRequest to download target application installers. Download progress is suppressed by default for faster downloads; however, when -Verbose is used, download progress will be displayed. Use -NoProgress with -Verbose to suppress download progress while also displaying verbose output.","title":"-NoProgress"},{"location":"save/#-force","text":"Forces this function to download the target application installers from the URI property even if they already exist in the target directory.","title":"-Force"},{"location":"save/#alias","text":"Save-EvergreenApp has an alias of sea to simplify downloading applications, for example: PS / Users / aaron > gea Slack | sea -Path / Users / aaron / Temp / Slack","title":"Alias"},{"location":"test/","text":"Test Installers \u00b6 Evergreen includes the function Test-EvergreenApp that can test whether the application installer URLs returned from Get-EvergreenApp exist at the URL specified. Test-EvergreenApp will enable you to quickly validate whether the application installer exists. In the following example, we can test whether the URLs returned by MicrosoftOneDrive exist: Get-EvergreenApp -Name \"MicrosoftOneDrive\" | Where-Object { $_ . Type -eq \"exe\" } | Test-EvergreenApp URI Result --- ------ https :// oneclient . sfx . ms / Win / MsitFast / 22 . 082 . 0417 . 0001 / amd64 / OneDriveSetup . exe True https :// oneclient . sfx . ms / Win / MsitFast / 22 . 082 . 0417 . 0001 / OneDriveSetup . exe True https :// oneclient . sfx . ms / Win / Insiders / 22 . 077 . 0410 . 0007 / OneDriveSetup . exe True https :// oneclient . sfx . ms / Win / Insiders / 22 . 077 . 0410 . 0007 / amd64 / OneDriveSetup . exe True https :// oneclient . sfx . ms / Win / MsitSlow / 22 . 077 . 0410 . 0006 / OneDriveSetup . exe True https :// oneclient . sfx . ms / Win / MsitSlow / 22 . 077 . 0410 . 0006 / amd64 / OneDriveSetup . exe True https :// oneclient . sfx . ms / Win / Insiders / 22 . 070 . 0403 . 0004 / amd64 / OneDriveSetup . exe True https :// oneclient . sfx . ms / Win / Insiders / 22 . 070 . 0403 . 0004 / OneDriveSetup . exe True https :// oneclient . sfx . ms / Win / Prod / 22 . 065 . 0412 . 0004 / amd64 / OneDriveSetup . exe True https :// oneclient . sfx . ms / Win / Prod / 22 . 065 . 0412 . 0004 / OneDriveSetup . exe True https :// oneclient . sfx . ms / Win / Enterprise / 21 . 230 . 1107 . 0004 / OneDriveSetup . exe True https :// oneclient . sfx . ms / Win / Enterprise / 21 . 230 . 1107 . 0004 / amd64 / OneDriveSetup . \u2026 True Parameters \u00b6 InputObject \u00b6 An object returned from Get-EvergreenApp with at least the Version and URI properties. Verbose \u00b6 The -Verbose parameter can be useful for observing application downloads and save paths, including troubleshooting when the expected application details are not returned. When using the -Verbose parameter, Invoke-WebRequest will show download progress which significantly impacts download speed. To suppress download progress, add the -NoProgress switch parameter as well. Alias \u00b6 Test-EvergreenApp has an alias of tea to simplify testing applications, for example: PS / Users / aaron > gea MicrosoftTeams | tea","title":"Test installer URLs"},{"location":"test/#test-installers","text":"Evergreen includes the function Test-EvergreenApp that can test whether the application installer URLs returned from Get-EvergreenApp exist at the URL specified. Test-EvergreenApp will enable you to quickly validate whether the application installer exists. In the following example, we can test whether the URLs returned by MicrosoftOneDrive exist: Get-EvergreenApp -Name \"MicrosoftOneDrive\" | Where-Object { $_ . Type -eq \"exe\" } | Test-EvergreenApp URI Result --- ------ https :// oneclient . sfx . ms / Win / MsitFast / 22 . 082 . 0417 . 0001 / amd64 / OneDriveSetup . exe True https :// oneclient . sfx . ms / Win / MsitFast / 22 . 082 . 0417 . 0001 / OneDriveSetup . exe True https :// oneclient . sfx . ms / Win / Insiders / 22 . 077 . 0410 . 0007 / OneDriveSetup . exe True https :// oneclient . sfx . ms / Win / Insiders / 22 . 077 . 0410 . 0007 / amd64 / OneDriveSetup . exe True https :// oneclient . sfx . ms / Win / MsitSlow / 22 . 077 . 0410 . 0006 / OneDriveSetup . exe True https :// oneclient . sfx . ms / Win / MsitSlow / 22 . 077 . 0410 . 0006 / amd64 / OneDriveSetup . exe True https :// oneclient . sfx . ms / Win / Insiders / 22 . 070 . 0403 . 0004 / amd64 / OneDriveSetup . exe True https :// oneclient . sfx . ms / Win / Insiders / 22 . 070 . 0403 . 0004 / OneDriveSetup . exe True https :// oneclient . sfx . ms / Win / Prod / 22 . 065 . 0412 . 0004 / amd64 / OneDriveSetup . exe True https :// oneclient . sfx . ms / Win / Prod / 22 . 065 . 0412 . 0004 / OneDriveSetup . exe True https :// oneclient . sfx . ms / Win / Enterprise / 21 . 230 . 1107 . 0004 / OneDriveSetup . exe True https :// oneclient . sfx . ms / Win / Enterprise / 21 . 230 . 1107 . 0004 / amd64 / OneDriveSetup . \u2026 True","title":"Test Installers"},{"location":"test/#parameters","text":"","title":"Parameters"},{"location":"test/#inputobject","text":"An object returned from Get-EvergreenApp with at least the Version and URI properties.","title":"InputObject"},{"location":"test/#verbose","text":"The -Verbose parameter can be useful for observing application downloads and save paths, including troubleshooting when the expected application details are not returned. When using the -Verbose parameter, Invoke-WebRequest will show download progress which significantly impacts download speed. To suppress download progress, add the -NoProgress switch parameter as well.","title":"Verbose"},{"location":"test/#alias","text":"Test-EvergreenApp has an alias of tea to simplify testing applications, for example: PS / Users / aaron > gea MicrosoftTeams | tea","title":"Alias"},{"location":"troubleshoot/","text":"Troubleshooting \u00b6 Wait and Try Again \u00b6 The most common issues we see are transient - because Evergreen sources updates at the time you run the Get-EvergreenApp , the results can be affected by anything between you and the application vendor data source. An issue could be caused by network or DNS issues, of often by a vendor making changes on their end. If you experience an issue, wait an hour and try again. Function Errors \u00b6 If you encounter an error when returning details for an existing application, re-run the Get-EvergreenApp with the -Verbose parameter. This will display additional details and should provide some indication as to where the request is failing. In most cases, the issue will be caused by the vendor's source locations being temporarily unavailable (which should eventually resolve) or changing, which may require an update to the module. Example - MicrosoftWvdInfraAgent \u00b6 In this example, we can see that calling MicrosoftWvdInfraAgent results in a HTTP 503 error. Running the command later in the day, resulted in a successful request. Here we've encountered an issue with the vendor's source which was resolved without further action. Get-EvergreenApp -Name \"MicrosoftWvdInfraAgent\" Invoke-WebRequestWrapper : Invoke-WebRequestWrapper : The remote server returned an error : ( 503 ) Server Unavailable .. At C :\\ projects \\ evergreen \\ Evergreen \\ Apps \\ Get-MicrosoftWvdInfraAgent . ps1 : 25 char : 16 + $Content = Invoke-WebRequestWrapper @params + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : NotSpecified : (:) [ Write-Error ], WriteErrorException + FullyQualifiedErrorId : Microsoft . PowerShell . Commands . WriteErrorException , Invoke-WebRequestWrapper Example - MicrosoftWvdMultimediaRedirection \u00b6 In this example, we again have a HTTP 503 error, so the source location is probably unavailable. Get-EvergreenApp -Name \"MicrosoftWvdMultimediaRedirection\" WARNING : Invoke-WebRequestWrapper : Error at URI : https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE4QWrF . WARNING : Invoke-WebRequestWrapper : Error encountered : Response status code does not indicate success : 503 ( Service Unavailable ).. WARNING : Invoke-WebRequestWrapper : For troubleshooting steps see : https :// stealthpuppy . com / evergreen / troubleshoot /. Write-Error : / Users / aaron / projects / evergreen / Evergreen / Apps / Get-MicrosoftWvdMultimediaRedirection . ps1 : 25 Line | 25 | $Content = Invoke-WebRequestWrapper @params | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ | Invoke-WebRequestWrapper : Response status code does not indicate success : 503 ( Service Unavailable ).. WARNING : Get-MicrosoftWvdMultimediaRedirection : Failed to return a header from https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE4QWrF . Exception : / Users / aaron / projects / evergreen / Evergreen / Public / Get-EvergreenApp . ps1 : 80 Line | 80 | throw \"Failed to capture output from: Get-$Name.\" | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ | Failed to capture output from : Get-MicrosoftWvdMultimediaRedirection . If we run the same command with the -Verbose parameter, some more detail will be provided. Get-EvergreenApp -Name \"MicrosoftWvdMultimediaRedirection\" -Verbose VERBOSE : Function path : / Users / aaron / projects / evergreen / Evergreen / Apps / Get-MicrosoftWvdMultimediaRedirection . ps1 VERBOSE : Function exists : / Users / aaron / projects / evergreen / Evergreen / Apps / Get-MicrosoftWvdMultimediaRedirection . ps1 . VERBOSE : Dot sourcing : / Users / aaron / projects / evergreen / Evergreen / Apps / Get-MicrosoftWvdMultimediaRedirection . ps1 . VERBOSE : Get-FunctionResource : read application resource strings from [/ Users / aaron / projects / evergreen / Evergreen / Manifests / MicrosoftWvdMultimediaRedirection . json ] VERBOSE : Calling : Get-MicrosoftWvdMultimediaRedirection . VERBOSE : Invoke-WebRequestWrapper : Invoke-WebRequest parameter : [ Method : Head ]. VERBOSE : Invoke-WebRequestWrapper : Invoke-WebRequest parameter : [ UserAgent : Mozilla / 5 . 0 ( Macintosh ; Darwin 21 . 5 . 0 Darwin Kernel Version 21 . 5 . 0 : Tue Apr 26 21 : 08 : 29 PDT 2022 ; root : xnu - 8020 . 121 . 3 ~ 4 / RELEASE_ARM64_T8101 ; en-AU ) AppleWebKit / 534 . 6 ( KHTML , like Gecko ) Chrome / 7 . 0 . 500 . 0 Safari / 534 . 6 ]. VERBOSE : Invoke-WebRequestWrapper : Invoke-WebRequest parameter : [ UseBasicParsing : True ]. VERBOSE : Invoke-WebRequestWrapper : Invoke-WebRequest parameter : [ Uri : https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE4QWrF ]. VERBOSE : HEAD with 0-byte payload VERBOSE : received 175-byte response of content type text / html WARNING : Invoke-WebRequestWrapper : Error at URI : https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE4QWrF . WARNING : Invoke-WebRequestWrapper : Error encountered : Response status code does not indicate success : 503 ( Service Unavailable ).. WARNING : Invoke-WebRequestWrapper : For troubleshooting steps see : https :// stealthpuppy . com / evergreen / troubleshoot /. Write-Error : / Users / aaron / projects / evergreen / Evergreen / Apps / Get-MicrosoftWvdMultimediaRedirection . ps1 : 25 Line | 25 | $Content = Invoke-WebRequestWrapper @params | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ | Invoke-WebRequestWrapper : Response status code does not indicate success : 503 ( Service Unavailable ).. WARNING : Get-MicrosoftWvdMultimediaRedirection : Failed to return a header from https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE4QWrF . Exception : / Users / aaron / projects / evergreen / Evergreen / Public / Get-EvergreenApp . ps1 : 80 Line | 80 | throw \"Failed to capture output from: Get-$Name.\" | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ | Failed to capture output from : Get-MicrosoftWvdMultimediaRedirection . Example - Zoom \u00b6 In the example below, let's return details for Zoom with the -Verbose parameter which will provide an idea of what Evergreen is doing as it retrieves details for Zoom: Get-EvergreenApp -Name \"Zoom\" -Verbose VERBOSE : Get-EvergreenApp : Function exists : / Users / aaron / Projects / evergreen / Evergreen / Apps / Get-Zoom . ps1 . VERBOSE : Get-EvergreenApp : Dot sourcing : / Users / aaron / Projects / evergreen / Evergreen / Apps / Get-Zoom . ps1 . VERBOSE : Get-EvergreenApp : Calling : Get-Zoom . VERBOSE : Get-FunctionResource : read application resource strings from [/ Users / aaron / Projects / evergreen / Evergreen / Manifests / Zoom . json ] VERBOSE : Resolve-SystemNetWebRequest : Attempting to resolve : https :// zoom . us / download / vdi / ZoomCitrixHDXMediaPlugin . msi . VERBOSE : Resolve-SystemNetWebRequest : Response : [OK] . VERBOSE : Resolve-SystemNetWebRequest : Resolved to : [ https :// cdn . zoom . us / prod / vdi / ZoomCitrixHDXMediaPlugin . msi ? _x_zm_rtaid = 1ntgQ-l3TsyzTXmWzDs59w . 1625872867055 . 20bd6639bacc03053f5e85d49d21fc77 & _x_zm_rhtaid = 731 ]. VERBOSE : Resolve-SystemNetWebRequest : Attempting to resolve : https :// zoom . us / client / latest / ZoomInstaller . exe . VERBOSE : Resolve-SystemNetWebRequest : Response : [OK] . VERBOSE : Resolve-SystemNetWebRequest : Resolved to : [ https :// cdn . zoom . us / prod / 5 . 7 . 1 . 543 / ZoomInstaller . exe ]. VERBOSE : Resolve-SystemNetWebRequest : Attempting to resolve : https :// zoom . us / client / latest / ZoomOutlookPluginSetup . msi . VERBOSE : Resolve-SystemNetWebRequest : Response : [OK] . VERBOSE : Resolve-SystemNetWebRequest : Resolved to : [ https :// cdn . zoom . us / prod / 5 . 7 . 0 . 64 / ZoomOutlookPluginSetup . msi ]. VERBOSE : Resolve-SystemNetWebRequest : Attempting to resolve : https :// zoom . us / client / latest / ZoomNotesPluginSetup . msi . VERBOSE : Resolve-SystemNetWebRequest : Response : [OK] . VERBOSE : Resolve-SystemNetWebRequest : Resolved to : [ https :// cdn . zoom . us / prod / 5 . 7 . 0 . 65 / ZoomNotesPluginSetup . msi ]. VERBOSE : Resolve-SystemNetWebRequest : Attempting to resolve : https :// zoom . us / client / latest / ZoomInstallerFull . msi . VERBOSE : Resolve-SystemNetWebRequest : Response : [OK] . VERBOSE : Resolve-SystemNetWebRequest : Resolved to : [ https :// cdn . zoom . us / prod / 5 . 7 . 1 . 543 / ZoomInstallerFull . msi ]. VERBOSE : Resolve-SystemNetWebRequest : Attempting to resolve : https :// zoom . us / client / latest / ZoomRooms . exe . WARNING : Resolve-SystemNetWebRequest : Error at URI : https :// zoom . us / client / latest / ZoomRooms . exe . WARNING : Resolve-SystemNetWebRequest : Response : - WARNING : Resolve-SystemNetWebRequest : For troubleshooting steps see : https :// stealthpuppy . com / evergreen / troubleshoot /. VERBOSE : Get-Zoom : Setting fallback URL to : https :// stealthpuppy . com / evergreen / issues /. VERBOSE : Resolve-SystemNetWebRequest : Attempting to resolve : https :// zoom . us / client / latest / ZoomLyncPluginSetup . msi . VERBOSE : Resolve-SystemNetWebRequest : Response : [OK] . VERBOSE : Resolve-SystemNetWebRequest : Resolved to : [ https :// cdn . zoom . us / prod / 5 . 2 . 44882 . 0827 / ZoomLyncPluginSetup . msi ]. VERBOSE : Resolve-SystemNetWebRequest : Attempting to resolve : https :// zoom . us / download / vdi / ZoomVmwareMediaPlugin . msi . VERBOSE : Resolve-SystemNetWebRequest : Response : [OK] . VERBOSE : Resolve-SystemNetWebRequest : Resolved to : [ https :// cdn . zoom . us / prod / vdi / ZoomVmwareMediaPlugin . msi ? _x_zm_rtaid = kow6DBRDQhO8sS9-JyHTDQ . 1625872876745 . f65b9ac6613cb7a22686fc40291be0bf & _x_zm_rhtaid = 705 ]. VERBOSE : Resolve-SystemNetWebRequest : Attempting to resolve : https :// zoom . us / download / vdi / ZoomInstallerVDI . msi . VERBOSE : Resolve-SystemNetWebRequest : Response : [OK] . VERBOSE : Resolve-SystemNetWebRequest : Resolved to : [ https :// cdn . zoom . us / prod / vdi / ZoomInstallerVDI . msi ? _x_zm_rtaid = EiXK_i85Qnyxl0PnXE6ITg . 1625872878653 . 8a666f93edfe18920e810d72dadd4246 & _x_zm_rhtaid = 751 ]. VERBOSE : Get-EvergreenApp : Output result from : / Users / aaron / Projects / evergreen / Evergreen / Apps / Get-Zoom . ps1 . In this request we can see there's an issue at https://zoom.us/client/latest/ZoomRooms.exe . Validating this URL in the browser or with Invoke-WebRequest we can see the the source is unavailable. The vendor may have temporarily moved the source, thus Evergreen will work once the source is available again. If the vendor has updated the source location permanently, Evergreen will require updates to use the new source locations. Output Errors \u00b6 Suppressing Errors and Warning \u00b6 Some functions may output errors and warnings, but still return application version information. In the example below, MicrosoftWvdRemoteDesktop returns data, but outputs several warnings: Get-EvergreenApp -Name \"MicrosoftWvdRemoteDesktop\" WARNING : Invoke-WebRequestWrapper : Error at URI : https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE51od9 . WARNING : Invoke-WebRequestWrapper : Error encountered : Response status code does not indicate success : 503 ( Service Unavailable ).. WARNING : Invoke-WebRequestWrapper : For troubleshooting steps see : https :// stealthpuppy . com / evergreen / troubleshoot /. WARNING : Get-MicrosoftWvdRemoteDesktop : Unable to retrieve headers from https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE51od9 . WARNING : Invoke-WebRequestWrapper : Error at URI : https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE51gy7 . WARNING : Invoke-WebRequestWrapper : Error encountered : Response status code does not indicate success : 503 ( Service Unavailable ).. WARNING : Invoke-WebRequestWrapper : For troubleshooting steps see : https :// stealthpuppy . com / evergreen / troubleshoot /. WARNING : Get-MicrosoftWvdRemoteDesktop : Unable to retrieve headers from https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE51gy7 . WARNING : Invoke-WebRequestWrapper : Error at URI : https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE51od9 . WARNING : Invoke-WebRequestWrapper : Error encountered : Response status code does not indicate success : 503 ( Service Unavailable ).. WARNING : Invoke-WebRequestWrapper : For troubleshooting steps see : https :// stealthpuppy . com / evergreen / troubleshoot /. WARNING : Get-MicrosoftWvdRemoteDesktop : Unable to retrieve headers from https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE51od9 . WARNING : Invoke-WebRequestWrapper : Error at URI : https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE51gy7 . WARNING : Invoke-WebRequestWrapper : Error encountered : Response status code does not indicate success : 503 ( Service Unavailable ).. WARNING : Invoke-WebRequestWrapper : For troubleshooting steps see : https :// stealthpuppy . com / evergreen / troubleshoot /. WARNING : Get-MicrosoftWvdRemoteDesktop : Unable to retrieve headers from https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE51gy7 . These warnings can be suppressed with the -WarningAction parameter: Get-EvergreenApp -Name \"MicrosoftWvdRemoteDesktop\" -ErrorAction \"SilentlyContinue\" -WarningAction \"SilentlyContinue\" Unexpected Output \u00b6 Where the output from a function is producing output that is clearly incorrect, you should log an issue . What may be more common is filtering the output incorrectly and not receiving the expected result. Here's an example output from MicrosoftWvdRemoteDesktop which has several releases with multiple properties. Viewing the output without any filtering will show all releases and all properties: Get-EvergreenApp -Name \"MicrosoftWvdRemoteDesktop\" | Format-Table Version Architecture Channel Date Filename URI ------- ------------ ------- ---- -------- --- 1 . 2 . 3401 . 0 ARM64 Insider Unknown RemoteDesktop_1 . 2 . 3401 . 0_ARM64 . msi https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE51od9 1 . 2 . 3401 . 0 x64 Insider 19 / 7 / 2022 RemoteDesktop_1 . 2 . 3401 . 0_x64 . msi https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE51gy5 1 . 2 . 3401 . 0 x86 Insider Unknown RemoteDesktop_1 . 2 . 3401 . 0_x86 . msi https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE51gy7 1 . 2 . 3401 . 0 ARM64 Dogfood Unknown RemoteDesktop_1 . 2 . 3401 . 0_ARM64 . msi https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE51od9 1 . 2 . 3401 . 0 x64 Dogfood 19 / 7 / 2022 RemoteDesktop_1 . 2 . 3401 . 0_x64 . msi https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE51gy5 1 . 2 . 3401 . 0 x86 Dogfood Unknown RemoteDesktop_1 . 2 . 3401 . 0_x86 . msi https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE51gy7 1 . 2 . 3317 . 0 ARM64 Public 13 / 7 / 2022 RemoteDesktop_1 . 2 . 3317 . 0_ARM64 . msi https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE50W7e 1 . 2 . 3317 . 0 x64 Public 13 / 7 / 2022 RemoteDesktop_1 . 2 . 3317 . 0_x64 . msi https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE518ld 1 . 2 . 3317 . 0 x86 Public 13 / 7 / 2022 RemoteDesktop_1 . 2 . 3317 . 0_x86 . msi https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE50W7f To return a single release, we can filter the output with Where-Object , which does require syntax to be correct and use the expected value for each property in the filter: Get-EvergreenApp -Name \"MicrosoftWvdRemoteDesktop\" | Where-Object { $_ . Architecture -eq \"x64\" -and $_ . Channel -eq \"Public\" } Version : 1 . 2 . 3317 . 0 Architecture : x64 Channel : Public Date : 13 / 7 / 2022 Filename : RemoteDesktop_1 . 2 . 3317 . 0_x64 . msi URI : https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE518ld","title":"Troubleshooting"},{"location":"troubleshoot/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"troubleshoot/#wait-and-try-again","text":"The most common issues we see are transient - because Evergreen sources updates at the time you run the Get-EvergreenApp , the results can be affected by anything between you and the application vendor data source. An issue could be caused by network or DNS issues, of often by a vendor making changes on their end. If you experience an issue, wait an hour and try again.","title":"Wait and Try Again"},{"location":"troubleshoot/#function-errors","text":"If you encounter an error when returning details for an existing application, re-run the Get-EvergreenApp with the -Verbose parameter. This will display additional details and should provide some indication as to where the request is failing. In most cases, the issue will be caused by the vendor's source locations being temporarily unavailable (which should eventually resolve) or changing, which may require an update to the module.","title":"Function Errors"},{"location":"troubleshoot/#example-microsoftwvdinfraagent","text":"In this example, we can see that calling MicrosoftWvdInfraAgent results in a HTTP 503 error. Running the command later in the day, resulted in a successful request. Here we've encountered an issue with the vendor's source which was resolved without further action. Get-EvergreenApp -Name \"MicrosoftWvdInfraAgent\" Invoke-WebRequestWrapper : Invoke-WebRequestWrapper : The remote server returned an error : ( 503 ) Server Unavailable .. At C :\\ projects \\ evergreen \\ Evergreen \\ Apps \\ Get-MicrosoftWvdInfraAgent . ps1 : 25 char : 16 + $Content = Invoke-WebRequestWrapper @params + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : NotSpecified : (:) [ Write-Error ], WriteErrorException + FullyQualifiedErrorId : Microsoft . PowerShell . Commands . WriteErrorException , Invoke-WebRequestWrapper","title":"Example - MicrosoftWvdInfraAgent"},{"location":"troubleshoot/#example-microsoftwvdmultimediaredirection","text":"In this example, we again have a HTTP 503 error, so the source location is probably unavailable. Get-EvergreenApp -Name \"MicrosoftWvdMultimediaRedirection\" WARNING : Invoke-WebRequestWrapper : Error at URI : https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE4QWrF . WARNING : Invoke-WebRequestWrapper : Error encountered : Response status code does not indicate success : 503 ( Service Unavailable ).. WARNING : Invoke-WebRequestWrapper : For troubleshooting steps see : https :// stealthpuppy . com / evergreen / troubleshoot /. Write-Error : / Users / aaron / projects / evergreen / Evergreen / Apps / Get-MicrosoftWvdMultimediaRedirection . ps1 : 25 Line | 25 | $Content = Invoke-WebRequestWrapper @params | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ | Invoke-WebRequestWrapper : Response status code does not indicate success : 503 ( Service Unavailable ).. WARNING : Get-MicrosoftWvdMultimediaRedirection : Failed to return a header from https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE4QWrF . Exception : / Users / aaron / projects / evergreen / Evergreen / Public / Get-EvergreenApp . ps1 : 80 Line | 80 | throw \"Failed to capture output from: Get-$Name.\" | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ | Failed to capture output from : Get-MicrosoftWvdMultimediaRedirection . If we run the same command with the -Verbose parameter, some more detail will be provided. Get-EvergreenApp -Name \"MicrosoftWvdMultimediaRedirection\" -Verbose VERBOSE : Function path : / Users / aaron / projects / evergreen / Evergreen / Apps / Get-MicrosoftWvdMultimediaRedirection . ps1 VERBOSE : Function exists : / Users / aaron / projects / evergreen / Evergreen / Apps / Get-MicrosoftWvdMultimediaRedirection . ps1 . VERBOSE : Dot sourcing : / Users / aaron / projects / evergreen / Evergreen / Apps / Get-MicrosoftWvdMultimediaRedirection . ps1 . VERBOSE : Get-FunctionResource : read application resource strings from [/ Users / aaron / projects / evergreen / Evergreen / Manifests / MicrosoftWvdMultimediaRedirection . json ] VERBOSE : Calling : Get-MicrosoftWvdMultimediaRedirection . VERBOSE : Invoke-WebRequestWrapper : Invoke-WebRequest parameter : [ Method : Head ]. VERBOSE : Invoke-WebRequestWrapper : Invoke-WebRequest parameter : [ UserAgent : Mozilla / 5 . 0 ( Macintosh ; Darwin 21 . 5 . 0 Darwin Kernel Version 21 . 5 . 0 : Tue Apr 26 21 : 08 : 29 PDT 2022 ; root : xnu - 8020 . 121 . 3 ~ 4 / RELEASE_ARM64_T8101 ; en-AU ) AppleWebKit / 534 . 6 ( KHTML , like Gecko ) Chrome / 7 . 0 . 500 . 0 Safari / 534 . 6 ]. VERBOSE : Invoke-WebRequestWrapper : Invoke-WebRequest parameter : [ UseBasicParsing : True ]. VERBOSE : Invoke-WebRequestWrapper : Invoke-WebRequest parameter : [ Uri : https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE4QWrF ]. VERBOSE : HEAD with 0-byte payload VERBOSE : received 175-byte response of content type text / html WARNING : Invoke-WebRequestWrapper : Error at URI : https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE4QWrF . WARNING : Invoke-WebRequestWrapper : Error encountered : Response status code does not indicate success : 503 ( Service Unavailable ).. WARNING : Invoke-WebRequestWrapper : For troubleshooting steps see : https :// stealthpuppy . com / evergreen / troubleshoot /. Write-Error : / Users / aaron / projects / evergreen / Evergreen / Apps / Get-MicrosoftWvdMultimediaRedirection . ps1 : 25 Line | 25 | $Content = Invoke-WebRequestWrapper @params | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ | Invoke-WebRequestWrapper : Response status code does not indicate success : 503 ( Service Unavailable ).. WARNING : Get-MicrosoftWvdMultimediaRedirection : Failed to return a header from https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE4QWrF . Exception : / Users / aaron / projects / evergreen / Evergreen / Public / Get-EvergreenApp . ps1 : 80 Line | 80 | throw \"Failed to capture output from: Get-$Name.\" | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ | Failed to capture output from : Get-MicrosoftWvdMultimediaRedirection .","title":"Example - MicrosoftWvdMultimediaRedirection"},{"location":"troubleshoot/#example-zoom","text":"In the example below, let's return details for Zoom with the -Verbose parameter which will provide an idea of what Evergreen is doing as it retrieves details for Zoom: Get-EvergreenApp -Name \"Zoom\" -Verbose VERBOSE : Get-EvergreenApp : Function exists : / Users / aaron / Projects / evergreen / Evergreen / Apps / Get-Zoom . ps1 . VERBOSE : Get-EvergreenApp : Dot sourcing : / Users / aaron / Projects / evergreen / Evergreen / Apps / Get-Zoom . ps1 . VERBOSE : Get-EvergreenApp : Calling : Get-Zoom . VERBOSE : Get-FunctionResource : read application resource strings from [/ Users / aaron / Projects / evergreen / Evergreen / Manifests / Zoom . json ] VERBOSE : Resolve-SystemNetWebRequest : Attempting to resolve : https :// zoom . us / download / vdi / ZoomCitrixHDXMediaPlugin . msi . VERBOSE : Resolve-SystemNetWebRequest : Response : [OK] . VERBOSE : Resolve-SystemNetWebRequest : Resolved to : [ https :// cdn . zoom . us / prod / vdi / ZoomCitrixHDXMediaPlugin . msi ? _x_zm_rtaid = 1ntgQ-l3TsyzTXmWzDs59w . 1625872867055 . 20bd6639bacc03053f5e85d49d21fc77 & _x_zm_rhtaid = 731 ]. VERBOSE : Resolve-SystemNetWebRequest : Attempting to resolve : https :// zoom . us / client / latest / ZoomInstaller . exe . VERBOSE : Resolve-SystemNetWebRequest : Response : [OK] . VERBOSE : Resolve-SystemNetWebRequest : Resolved to : [ https :// cdn . zoom . us / prod / 5 . 7 . 1 . 543 / ZoomInstaller . exe ]. VERBOSE : Resolve-SystemNetWebRequest : Attempting to resolve : https :// zoom . us / client / latest / ZoomOutlookPluginSetup . msi . VERBOSE : Resolve-SystemNetWebRequest : Response : [OK] . VERBOSE : Resolve-SystemNetWebRequest : Resolved to : [ https :// cdn . zoom . us / prod / 5 . 7 . 0 . 64 / ZoomOutlookPluginSetup . msi ]. VERBOSE : Resolve-SystemNetWebRequest : Attempting to resolve : https :// zoom . us / client / latest / ZoomNotesPluginSetup . msi . VERBOSE : Resolve-SystemNetWebRequest : Response : [OK] . VERBOSE : Resolve-SystemNetWebRequest : Resolved to : [ https :// cdn . zoom . us / prod / 5 . 7 . 0 . 65 / ZoomNotesPluginSetup . msi ]. VERBOSE : Resolve-SystemNetWebRequest : Attempting to resolve : https :// zoom . us / client / latest / ZoomInstallerFull . msi . VERBOSE : Resolve-SystemNetWebRequest : Response : [OK] . VERBOSE : Resolve-SystemNetWebRequest : Resolved to : [ https :// cdn . zoom . us / prod / 5 . 7 . 1 . 543 / ZoomInstallerFull . msi ]. VERBOSE : Resolve-SystemNetWebRequest : Attempting to resolve : https :// zoom . us / client / latest / ZoomRooms . exe . WARNING : Resolve-SystemNetWebRequest : Error at URI : https :// zoom . us / client / latest / ZoomRooms . exe . WARNING : Resolve-SystemNetWebRequest : Response : - WARNING : Resolve-SystemNetWebRequest : For troubleshooting steps see : https :// stealthpuppy . com / evergreen / troubleshoot /. VERBOSE : Get-Zoom : Setting fallback URL to : https :// stealthpuppy . com / evergreen / issues /. VERBOSE : Resolve-SystemNetWebRequest : Attempting to resolve : https :// zoom . us / client / latest / ZoomLyncPluginSetup . msi . VERBOSE : Resolve-SystemNetWebRequest : Response : [OK] . VERBOSE : Resolve-SystemNetWebRequest : Resolved to : [ https :// cdn . zoom . us / prod / 5 . 2 . 44882 . 0827 / ZoomLyncPluginSetup . msi ]. VERBOSE : Resolve-SystemNetWebRequest : Attempting to resolve : https :// zoom . us / download / vdi / ZoomVmwareMediaPlugin . msi . VERBOSE : Resolve-SystemNetWebRequest : Response : [OK] . VERBOSE : Resolve-SystemNetWebRequest : Resolved to : [ https :// cdn . zoom . us / prod / vdi / ZoomVmwareMediaPlugin . msi ? _x_zm_rtaid = kow6DBRDQhO8sS9-JyHTDQ . 1625872876745 . f65b9ac6613cb7a22686fc40291be0bf & _x_zm_rhtaid = 705 ]. VERBOSE : Resolve-SystemNetWebRequest : Attempting to resolve : https :// zoom . us / download / vdi / ZoomInstallerVDI . msi . VERBOSE : Resolve-SystemNetWebRequest : Response : [OK] . VERBOSE : Resolve-SystemNetWebRequest : Resolved to : [ https :// cdn . zoom . us / prod / vdi / ZoomInstallerVDI . msi ? _x_zm_rtaid = EiXK_i85Qnyxl0PnXE6ITg . 1625872878653 . 8a666f93edfe18920e810d72dadd4246 & _x_zm_rhtaid = 751 ]. VERBOSE : Get-EvergreenApp : Output result from : / Users / aaron / Projects / evergreen / Evergreen / Apps / Get-Zoom . ps1 . In this request we can see there's an issue at https://zoom.us/client/latest/ZoomRooms.exe . Validating this URL in the browser or with Invoke-WebRequest we can see the the source is unavailable. The vendor may have temporarily moved the source, thus Evergreen will work once the source is available again. If the vendor has updated the source location permanently, Evergreen will require updates to use the new source locations.","title":"Example - Zoom"},{"location":"troubleshoot/#output-errors","text":"","title":"Output Errors"},{"location":"troubleshoot/#suppressing-errors-and-warning","text":"Some functions may output errors and warnings, but still return application version information. In the example below, MicrosoftWvdRemoteDesktop returns data, but outputs several warnings: Get-EvergreenApp -Name \"MicrosoftWvdRemoteDesktop\" WARNING : Invoke-WebRequestWrapper : Error at URI : https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE51od9 . WARNING : Invoke-WebRequestWrapper : Error encountered : Response status code does not indicate success : 503 ( Service Unavailable ).. WARNING : Invoke-WebRequestWrapper : For troubleshooting steps see : https :// stealthpuppy . com / evergreen / troubleshoot /. WARNING : Get-MicrosoftWvdRemoteDesktop : Unable to retrieve headers from https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE51od9 . WARNING : Invoke-WebRequestWrapper : Error at URI : https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE51gy7 . WARNING : Invoke-WebRequestWrapper : Error encountered : Response status code does not indicate success : 503 ( Service Unavailable ).. WARNING : Invoke-WebRequestWrapper : For troubleshooting steps see : https :// stealthpuppy . com / evergreen / troubleshoot /. WARNING : Get-MicrosoftWvdRemoteDesktop : Unable to retrieve headers from https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE51gy7 . WARNING : Invoke-WebRequestWrapper : Error at URI : https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE51od9 . WARNING : Invoke-WebRequestWrapper : Error encountered : Response status code does not indicate success : 503 ( Service Unavailable ).. WARNING : Invoke-WebRequestWrapper : For troubleshooting steps see : https :// stealthpuppy . com / evergreen / troubleshoot /. WARNING : Get-MicrosoftWvdRemoteDesktop : Unable to retrieve headers from https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE51od9 . WARNING : Invoke-WebRequestWrapper : Error at URI : https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE51gy7 . WARNING : Invoke-WebRequestWrapper : Error encountered : Response status code does not indicate success : 503 ( Service Unavailable ).. WARNING : Invoke-WebRequestWrapper : For troubleshooting steps see : https :// stealthpuppy . com / evergreen / troubleshoot /. WARNING : Get-MicrosoftWvdRemoteDesktop : Unable to retrieve headers from https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE51gy7 . These warnings can be suppressed with the -WarningAction parameter: Get-EvergreenApp -Name \"MicrosoftWvdRemoteDesktop\" -ErrorAction \"SilentlyContinue\" -WarningAction \"SilentlyContinue\"","title":"Suppressing Errors and Warning"},{"location":"troubleshoot/#unexpected-output","text":"Where the output from a function is producing output that is clearly incorrect, you should log an issue . What may be more common is filtering the output incorrectly and not receiving the expected result. Here's an example output from MicrosoftWvdRemoteDesktop which has several releases with multiple properties. Viewing the output without any filtering will show all releases and all properties: Get-EvergreenApp -Name \"MicrosoftWvdRemoteDesktop\" | Format-Table Version Architecture Channel Date Filename URI ------- ------------ ------- ---- -------- --- 1 . 2 . 3401 . 0 ARM64 Insider Unknown RemoteDesktop_1 . 2 . 3401 . 0_ARM64 . msi https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE51od9 1 . 2 . 3401 . 0 x64 Insider 19 / 7 / 2022 RemoteDesktop_1 . 2 . 3401 . 0_x64 . msi https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE51gy5 1 . 2 . 3401 . 0 x86 Insider Unknown RemoteDesktop_1 . 2 . 3401 . 0_x86 . msi https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE51gy7 1 . 2 . 3401 . 0 ARM64 Dogfood Unknown RemoteDesktop_1 . 2 . 3401 . 0_ARM64 . msi https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE51od9 1 . 2 . 3401 . 0 x64 Dogfood 19 / 7 / 2022 RemoteDesktop_1 . 2 . 3401 . 0_x64 . msi https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE51gy5 1 . 2 . 3401 . 0 x86 Dogfood Unknown RemoteDesktop_1 . 2 . 3401 . 0_x86 . msi https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE51gy7 1 . 2 . 3317 . 0 ARM64 Public 13 / 7 / 2022 RemoteDesktop_1 . 2 . 3317 . 0_ARM64 . msi https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE50W7e 1 . 2 . 3317 . 0 x64 Public 13 / 7 / 2022 RemoteDesktop_1 . 2 . 3317 . 0_x64 . msi https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE518ld 1 . 2 . 3317 . 0 x86 Public 13 / 7 / 2022 RemoteDesktop_1 . 2 . 3317 . 0_x86 . msi https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE50W7f To return a single release, we can filter the output with Where-Object , which does require syntax to be correct and use the expected value for each property in the filter: Get-EvergreenApp -Name \"MicrosoftWvdRemoteDesktop\" | Where-Object { $_ . Architecture -eq \"x64\" -and $_ . Channel -eq \"Public\" } Version : 1 . 2 . 3317 . 0 Architecture : x64 Channel : Public Date : 13 / 7 / 2022 Filename : RemoteDesktop_1 . 2 . 3317 . 0_x64 . msi URI : https :// query . prod . cms . rt . microsoft . com / cms / api / am / binary / RE518ld","title":"Unexpected Output"},{"location":"under/","text":"Under the hood \u00b6 Evergreen is a self-contained PowerShell module, that once installed does not require access to any additional content other than official vendor sources used to retrieve details for a specified application. Due to Evergreen's approach to finding the latest version and download URL for an application, custom code is required for most applications. While some applications have a common source location such as GitHub (that provides an API for releases), most applications require querying an application specific API or site to return details for that application. Module structure \u00b6 Evergreen includes the following directory structure: <ModuleBase>/Public - public functions including Get-EvergreenApp , Find-EvergreenApp and Save-EvergreenApp <ModuleBase>/Apps - internal per-application functions that contain the logic for retrieving application details. These are often unique for each application <ModuleBase>/Manifests - each application includes a manifest in JSON format that includes application specific details used by the per-application functions. These describe details of the application including URLs used to determine the latest version of the application <ModuleBase>/Private - internal functions containing reusable code Public \u00b6 The Public folder includes all functions exported from Evergreen: Export-EvergreenApp.ps1 Export-EvergreenManifest.ps1 Find-EvergreenApp.ps1 Get-EvergreenApp.ps1 Get-EvergreenLibrary.ps1 Invoke-EvergreenApp.ps1 Invoke-EvergreenLibraryUpdate.ps1 New-EvergreenLibrary.ps1 Save-EvergreenApp.ps1 Test-EvergreenApp.ps1 Apps \u00b6 The Apps folder includes application specific functions that do the hard work of determining details for the target application. For example, Get-MicrosoftEdge queries the official Edge versions list hosted at https://edgeupdates.microsoft.com/api/products . This allows the function to use the same process that Edge itself uses to determine the latest version of Edge and the URL to download the installer. When using Get-EvergreenApp -Name MicrosoftEdge , Get-EvergreenApp calls Get-MicrosoftEdge and passes the result back to the pipeline. While most functions includes code unique to that application, several applications use GitHub or SourceForge as a source to determine application versions and updates thus these functions can use more shared code than other functions. Manifests \u00b6 Each application includes a manifest file in JSON format that includes details that are used by the internal application function when retrieving the application version and download URI. The manifest structure includes three primary properties - Name (the vendor and application name), Source (a link to an official site), and Get , which defines items such as the URL used to find the application updates. The base manifest structure will look similar to the following: { \"Name\" : \"Vendor Application name\" , \"Source\" : \"https://www.vendorwebsite.com/product\" , \"Get\" : { \"Update\" : { \"Uri\" : \"https://update.vendorwebsite.com/api/product\" } }, \"Download\" : { \"Uri\" : \"https://download.vendorwebsite.com/files\" }, } Additionally, each manifest defines the property Install that includes details about installing the application; however, note that while this is included for many applications, this isn't intended to provide a definitive construct for installing applications. Private \u00b6 The Private folder includes re-usable code, used by many of the application functions. Several key functions include: Get-GitHubRepoRelease - returns releases from a target GitHub repository Get-SourceForgeRepoRelease - returns releases from a target SourceForge repository Invoke-RestMethodWrapper - provides logic around Invoke-RestMethod to return content from an update API Invoke-WebRequestWrapper - provides logic around Invoke-WebRequest to return the content from a target URI","title":"Under the hood"},{"location":"under/#under-the-hood","text":"Evergreen is a self-contained PowerShell module, that once installed does not require access to any additional content other than official vendor sources used to retrieve details for a specified application. Due to Evergreen's approach to finding the latest version and download URL for an application, custom code is required for most applications. While some applications have a common source location such as GitHub (that provides an API for releases), most applications require querying an application specific API or site to return details for that application.","title":"Under the hood"},{"location":"under/#module-structure","text":"Evergreen includes the following directory structure: <ModuleBase>/Public - public functions including Get-EvergreenApp , Find-EvergreenApp and Save-EvergreenApp <ModuleBase>/Apps - internal per-application functions that contain the logic for retrieving application details. These are often unique for each application <ModuleBase>/Manifests - each application includes a manifest in JSON format that includes application specific details used by the per-application functions. These describe details of the application including URLs used to determine the latest version of the application <ModuleBase>/Private - internal functions containing reusable code","title":"Module structure"},{"location":"under/#public","text":"The Public folder includes all functions exported from Evergreen: Export-EvergreenApp.ps1 Export-EvergreenManifest.ps1 Find-EvergreenApp.ps1 Get-EvergreenApp.ps1 Get-EvergreenLibrary.ps1 Invoke-EvergreenApp.ps1 Invoke-EvergreenLibraryUpdate.ps1 New-EvergreenLibrary.ps1 Save-EvergreenApp.ps1 Test-EvergreenApp.ps1","title":"Public"},{"location":"under/#apps","text":"The Apps folder includes application specific functions that do the hard work of determining details for the target application. For example, Get-MicrosoftEdge queries the official Edge versions list hosted at https://edgeupdates.microsoft.com/api/products . This allows the function to use the same process that Edge itself uses to determine the latest version of Edge and the URL to download the installer. When using Get-EvergreenApp -Name MicrosoftEdge , Get-EvergreenApp calls Get-MicrosoftEdge and passes the result back to the pipeline. While most functions includes code unique to that application, several applications use GitHub or SourceForge as a source to determine application versions and updates thus these functions can use more shared code than other functions.","title":"Apps"},{"location":"under/#manifests","text":"Each application includes a manifest file in JSON format that includes details that are used by the internal application function when retrieving the application version and download URI. The manifest structure includes three primary properties - Name (the vendor and application name), Source (a link to an official site), and Get , which defines items such as the URL used to find the application updates. The base manifest structure will look similar to the following: { \"Name\" : \"Vendor Application name\" , \"Source\" : \"https://www.vendorwebsite.com/product\" , \"Get\" : { \"Update\" : { \"Uri\" : \"https://update.vendorwebsite.com/api/product\" } }, \"Download\" : { \"Uri\" : \"https://download.vendorwebsite.com/files\" }, } Additionally, each manifest defines the property Install that includes details about installing the application; however, note that while this is included for many applications, this isn't intended to provide a definitive construct for installing applications.","title":"Manifests"},{"location":"under/#private","text":"The Private folder includes re-usable code, used by many of the application functions. Several key functions include: Get-GitHubRepoRelease - returns releases from a target GitHub repository Get-SourceForgeRepoRelease - returns releases from a target SourceForge repository Invoke-RestMethodWrapper - provides logic around Invoke-RestMethod to return content from an update API Invoke-WebRequestWrapper - provides logic around Invoke-WebRequest to return the content from a target URI","title":"Private"},{"location":"updatelibrary/","text":"Update an Evergreen Library \u00b6 To update a library, use Invoke-EvergreenLibraryUpdate - this function will read the EvergreenLibrary.json file and use Get-EvergreenApp and Save-EvergreenApp to populate the library with the application installers and maintain a manifest of the application version information for later reference. Here's an example - EvergreenLibrary.json contains the following entry for Microsoft Teams: { \"Name\" : \"MicrosoftTeams\" , \"EvergreenApp\" : \"MicrosoftTeams\" , \"Filter\" : \"$_.Ring -eq \\\"General\\\" -and $_.Architecture -eq \\\"x64\\\" -and $_.Type -eq \\\"msi\\\"\" } Name - defines the application folder for the library. You may want to download both the 32-bit and 64-bit version of the Microsoft Teams installer EvergreenApp - defines the application name supported by Evergreen. The list of supported application names can be found with Find-EvergreenApp Filter - this is the filter typically used with Get-EvergreenApp | Where-Object to filter the application version information for a specific application installer The Microsoft Teams installer will be downloaded in this example to the following folder structure: E:\\EvergreenLibrary\\MicrosoftTeams\\General\\1.5.00.17656\\x64 . After the installers are successfully downloaded, the application version information is saved. For this example, E:\\EvergreenLibrary\\MicrosoftTeams\\MicrosoftTeams.json will be saved with the following details: { \"Version\" : \"1.5.00.17656\" , \"URI\" : \"https://statics.teams.cdn.office.net/production-windows-x64/1.5.00.17656/Teams_windows_x64.msi\" , \"Type\" : \"msi\" , \"Ring\" : \"General\" , \"Path\" : \"/Users/aaron/Temp/Evergreen/MicrosoftTeams/General/1.5.00.17656/x64/Teams_windows_x64.msi\" , \"Architecture\" : \"x64\" } Each time a new version of Team installer is downloaded, MicrosoftTeams.json is updated with the new version for later use. How to update a library \u00b6 Invoke-EvergreenLibraryUpdate has a single parameter - -Path , which should be the path to the Evergreen library: Invoke-EvergreenLibraryUpdate -Path \"E:\\EvergreenLibrary\" If a path is specified that does not contain EvergreenLibrary.json and error will be thrown. To download new application installers when a new version is detected, Invoke-EvergreenLibraryUpdate can be run via a scheduled task or other automation tools. This provides a simple method to update the library and make new application available for install or packaging.","title":"Update a library"},{"location":"updatelibrary/#update-an-evergreen-library","text":"To update a library, use Invoke-EvergreenLibraryUpdate - this function will read the EvergreenLibrary.json file and use Get-EvergreenApp and Save-EvergreenApp to populate the library with the application installers and maintain a manifest of the application version information for later reference. Here's an example - EvergreenLibrary.json contains the following entry for Microsoft Teams: { \"Name\" : \"MicrosoftTeams\" , \"EvergreenApp\" : \"MicrosoftTeams\" , \"Filter\" : \"$_.Ring -eq \\\"General\\\" -and $_.Architecture -eq \\\"x64\\\" -and $_.Type -eq \\\"msi\\\"\" } Name - defines the application folder for the library. You may want to download both the 32-bit and 64-bit version of the Microsoft Teams installer EvergreenApp - defines the application name supported by Evergreen. The list of supported application names can be found with Find-EvergreenApp Filter - this is the filter typically used with Get-EvergreenApp | Where-Object to filter the application version information for a specific application installer The Microsoft Teams installer will be downloaded in this example to the following folder structure: E:\\EvergreenLibrary\\MicrosoftTeams\\General\\1.5.00.17656\\x64 . After the installers are successfully downloaded, the application version information is saved. For this example, E:\\EvergreenLibrary\\MicrosoftTeams\\MicrosoftTeams.json will be saved with the following details: { \"Version\" : \"1.5.00.17656\" , \"URI\" : \"https://statics.teams.cdn.office.net/production-windows-x64/1.5.00.17656/Teams_windows_x64.msi\" , \"Type\" : \"msi\" , \"Ring\" : \"General\" , \"Path\" : \"/Users/aaron/Temp/Evergreen/MicrosoftTeams/General/1.5.00.17656/x64/Teams_windows_x64.msi\" , \"Architecture\" : \"x64\" } Each time a new version of Team installer is downloaded, MicrosoftTeams.json is updated with the new version for later use.","title":"Update an Evergreen Library"},{"location":"updatelibrary/#how-to-update-a-library","text":"Invoke-EvergreenLibraryUpdate has a single parameter - -Path , which should be the path to the Evergreen library: Invoke-EvergreenLibraryUpdate -Path \"E:\\EvergreenLibrary\" If a path is specified that does not contain EvergreenLibrary.json and error will be thrown. To download new application installers when a new version is detected, Invoke-EvergreenLibraryUpdate can be run via a scheduled task or other automation tools. This provides a simple method to update the library and make new application available for install or packaging.","title":"How to update a library"},{"location":"use/","text":"Using Evergreen \u00b6 Get-EvergreenApp is used to return application details by specifying an application with the -Name parameter. For example, let's find the latest version of the Microsoft FSLogix Apps agent: Get-EvergreenApp -Name \"MicrosoftFSLogixApps\" This will return output similar to the following that lists the version number and download URL for the application. This application output also includes the release date: Version : 2 . 9 . 7979 . 62170 Date : 9 / 11 / 2021 Channel : Production URI : https :// download . microsoft . com / download / 3 / f / 7 / 3f755dbd-debe - 46d4 - 811c - 3e7c87bc4408 / FSLogix_Apps_2 . 9 . 7979 . 62170 . zip All output properties are strings that can be acted on with other functions and cmdlets including filtering the output with Where-Object . Output \u00b6 Each Evergreen application returns at least two properties in the object is sends to the pipeline: Version - a string property that is the version number of the application. If you need these in a version format, cast them with [System.Version] URI - a string property that is the download location for the latest version of the application. These will be publicly available locations that provide installers in typically Windows installer formats, e.g., exe , msi . Some downloads may be in other formats, such as zip that will need to be extracted before install Several applications may include additional properties in their output, which will often require filtering, including: Architecture - the processor architecture of the installer Type - an application may return installer downloads in exe , msi , zip , format etc. In some instances, Type may return slightly different data Ring , Channel , and/or Release - some applications include different release rings or channels for enterprise use. The value of this property is often unique to that application Language - some application installers may support specific languages Date - in some cases, Evergreen can return the release date of the returned version Filter Output \u00b6 Where an application returns more than one object to the pipeline, you will need to filter the output with Where-Object or Sort-Object . For example, Get-EvergreenApp -Name MicrosoftTeams returns both the 32-bit and 64-bit versions of the General and Preview release rings ot the Microsoft Teams installer. As most environments should be on 64-bit Windows these days, we can filter the 64-bit version of Teams with: Get-EvergreenApp -Name \"MicrosoftTeams\" | Where-Object { $_ . Architecture -eq \"x64\" -and $_ . Ring -eq \"General\" -and $_ . Type -eq \"msi\" } This will return details of the 64-bit Microsoft Teams installer that we can use in a script. Version : 1 . 4 . 00 . 32771 Ring : General Architecture : x64 Type : msi URI : https :// statics . teams . cdn . office . net / production-windows-x64 / 1 . 4 . 00 . 32771 / Teams_windows_x64 . msi Use Output \u00b6 With the filtered output we can download the latest version of Microsoft Teams before copying it to a target location or installing it directly to the current system. The following commands filters Get-EvergreenApp -Name MicrosoftTeams to get the latest version and download, then downloads the installer with Save-EvergreenApp and finally uses msiexec to install Teams in a VDI supported configuration: $Teams = Get-EvergreenApp -Name \"MicrosoftTeams\" | Where-Object { $_ . Architecture -eq \"x64\" -and $_ . Ring -eq \"General\" -and $_ . Type -eq \"msi\" } $TeamsInstaller = $Teams | Save-EvergreenApp -Path \"C:\\Temp\\Teams\" & \"$env:SystemRoot\\System32\\msiexec.exe\" \"/package $( $TeamsInstaller . FullName ) ALLUSER=1 ALLUSERS=1 /quiet\" Parameters \u00b6 Name \u00b6 The -Name parameter is used to specify the application name to return details for. This is a required parameter. The list of supported applications can be found with Find-EvergreenApp . Verbose \u00b6 The -Verbose parameter can be useful for observing where the application details are obtained from (e.g. the application update URL) and for troubleshooting when the expected application details are not returned. Alias \u00b6 Get-EvergreenApp has an alias of gea to simplify retrieving application details, for example: PS / Users / aaron > gea Slack Version : 4 . 14 . 0 Platform : PerMachine Architecture : x64 URI : https :// downloads . slack-edge . com / releases / windows / 4 . 14 . 0 / prod / x64 / slack-standalone - 4 . 14 . 0 . 0 . msi","title":"Using Evergreen"},{"location":"use/#using-evergreen","text":"Get-EvergreenApp is used to return application details by specifying an application with the -Name parameter. For example, let's find the latest version of the Microsoft FSLogix Apps agent: Get-EvergreenApp -Name \"MicrosoftFSLogixApps\" This will return output similar to the following that lists the version number and download URL for the application. This application output also includes the release date: Version : 2 . 9 . 7979 . 62170 Date : 9 / 11 / 2021 Channel : Production URI : https :// download . microsoft . com / download / 3 / f / 7 / 3f755dbd-debe - 46d4 - 811c - 3e7c87bc4408 / FSLogix_Apps_2 . 9 . 7979 . 62170 . zip All output properties are strings that can be acted on with other functions and cmdlets including filtering the output with Where-Object .","title":"Using Evergreen"},{"location":"use/#output","text":"Each Evergreen application returns at least two properties in the object is sends to the pipeline: Version - a string property that is the version number of the application. If you need these in a version format, cast them with [System.Version] URI - a string property that is the download location for the latest version of the application. These will be publicly available locations that provide installers in typically Windows installer formats, e.g., exe , msi . Some downloads may be in other formats, such as zip that will need to be extracted before install Several applications may include additional properties in their output, which will often require filtering, including: Architecture - the processor architecture of the installer Type - an application may return installer downloads in exe , msi , zip , format etc. In some instances, Type may return slightly different data Ring , Channel , and/or Release - some applications include different release rings or channels for enterprise use. The value of this property is often unique to that application Language - some application installers may support specific languages Date - in some cases, Evergreen can return the release date of the returned version","title":"Output"},{"location":"use/#filter-output","text":"Where an application returns more than one object to the pipeline, you will need to filter the output with Where-Object or Sort-Object . For example, Get-EvergreenApp -Name MicrosoftTeams returns both the 32-bit and 64-bit versions of the General and Preview release rings ot the Microsoft Teams installer. As most environments should be on 64-bit Windows these days, we can filter the 64-bit version of Teams with: Get-EvergreenApp -Name \"MicrosoftTeams\" | Where-Object { $_ . Architecture -eq \"x64\" -and $_ . Ring -eq \"General\" -and $_ . Type -eq \"msi\" } This will return details of the 64-bit Microsoft Teams installer that we can use in a script. Version : 1 . 4 . 00 . 32771 Ring : General Architecture : x64 Type : msi URI : https :// statics . teams . cdn . office . net / production-windows-x64 / 1 . 4 . 00 . 32771 / Teams_windows_x64 . msi","title":"Filter Output"},{"location":"use/#use-output","text":"With the filtered output we can download the latest version of Microsoft Teams before copying it to a target location or installing it directly to the current system. The following commands filters Get-EvergreenApp -Name MicrosoftTeams to get the latest version and download, then downloads the installer with Save-EvergreenApp and finally uses msiexec to install Teams in a VDI supported configuration: $Teams = Get-EvergreenApp -Name \"MicrosoftTeams\" | Where-Object { $_ . Architecture -eq \"x64\" -and $_ . Ring -eq \"General\" -and $_ . Type -eq \"msi\" } $TeamsInstaller = $Teams | Save-EvergreenApp -Path \"C:\\Temp\\Teams\" & \"$env:SystemRoot\\System32\\msiexec.exe\" \"/package $( $TeamsInstaller . FullName ) ALLUSER=1 ALLUSERS=1 /quiet\"","title":"Use Output"},{"location":"use/#parameters","text":"","title":"Parameters"},{"location":"use/#name","text":"The -Name parameter is used to specify the application name to return details for. This is a required parameter. The list of supported applications can be found with Find-EvergreenApp .","title":"Name"},{"location":"use/#verbose","text":"The -Verbose parameter can be useful for observing where the application details are obtained from (e.g. the application update URL) and for troubleshooting when the expected application details are not returned.","title":"Verbose"},{"location":"use/#alias","text":"Get-EvergreenApp has an alias of gea to simplify retrieving application details, for example: PS / Users / aaron > gea Slack Version : 4 . 14 . 0 Platform : PerMachine Architecture : x64 URI : https :// downloads . slack-edge . com / releases / windows / 4 . 14 . 0 / prod / x64 / slack-standalone - 4 . 14 . 0 . 0 . msi","title":"Alias"},{"location":"why/","text":"Why \u00b6 Evergreen's focus is on integration with PowerShell as a simple solution to provide application version numbers and download URLs. This has many use cases, including: Integration with Azure DevOps or Packer to create evergreen machine images on-premises, in Azure, AWS, or other cloud platforms Import applications into Microsoft Endpoint Manager - keep the Microsoft Deployment Toolkit, Configuration Manager or Microsoft Intune up to date with the latest versions of applications Validating or auditing a desktop image to ensure the current version of an application is installed Audit installed application versions in an image or a Windows desktop Create a library of application installers - by regularly running Evergreen functions, you can retrieve and download the current version of an application and store it in an application directory structure for later use Track application updates to stay on top of new releases Submitting manifests to Winget or Chocolatey or similar - Evergreen can return an object with a version number and download URL that can be used to construct manifests for the most recent versions There are several community and commercial solutions that manage application deployment and updates already. This module isn't intended to compete against those, and Evergreen isn't intended to be a fully featured package manager for Windows. Evergreen can be complementary to 3 rd party solutions - for example, Evergreen can be used with the Chocolatey Automatic Package Updater Module to find the latest version of an application and then create and submit a Chocolatey package, or it can be used to create a Windows Package Manager manifest (see a sample script here: New-WinGetManifest.ps1 ).","title":"Why Evergreen"},{"location":"why/#why","text":"Evergreen's focus is on integration with PowerShell as a simple solution to provide application version numbers and download URLs. This has many use cases, including: Integration with Azure DevOps or Packer to create evergreen machine images on-premises, in Azure, AWS, or other cloud platforms Import applications into Microsoft Endpoint Manager - keep the Microsoft Deployment Toolkit, Configuration Manager or Microsoft Intune up to date with the latest versions of applications Validating or auditing a desktop image to ensure the current version of an application is installed Audit installed application versions in an image or a Windows desktop Create a library of application installers - by regularly running Evergreen functions, you can retrieve and download the current version of an application and store it in an application directory structure for later use Track application updates to stay on top of new releases Submitting manifests to Winget or Chocolatey or similar - Evergreen can return an object with a version number and download URL that can be used to construct manifests for the most recent versions There are several community and commercial solutions that manage application deployment and updates already. This module isn't intended to compete against those, and Evergreen isn't intended to be a fully featured package manager for Windows. Evergreen can be complementary to 3 rd party solutions - for example, Evergreen can be used with the Chocolatey Automatic Package Updater Module to find the latest version of an application and then create and submit a Chocolatey package, or it can be used to create a Windows Package Manager manifest (see a sample script here: New-WinGetManifest.ps1 ).","title":"Why"},{"location":"help/en-US/Export-EvergreenApp/","text":"Export-EvergreenApp \u00b6 SYNOPSIS \u00b6 Exports application details gathered by Get-EvergreenApp to an external JSON file. This function reads any existing JSON for that application, adds the new version content, sorts for unique versions, then outputs the new content back to the target JSON file. SYNTAX \u00b6 Export-EvergreenApp [ -InputObject ] < PSObject > [ -Path < String >] [< CommonParameters >] DESCRIPTION \u00b6 Export application details gathered by Get-EvergreenApp to an external JSON file. This function reads any existing JSON for that application, adds the new version content, sorts for unique versions, then outputs the new content back to the target JSON file. EXAMPLES \u00b6 EXAMPLE 1 \u00b6 $OneDrive = Get-EvergreenApp -Name \"MicrosoftOneDrive\" Save-EvergreenApp -InputObject $OneDrive -Path \"C:\\Evergreen\\OneDrive\" Export-EvergreenApp -InputObject $OneDrive -Path \"C:\\Evergreen\\OneDrive\\MicrosoftOneDrive.json\" Description: Get-EvergreenApp returns version information for MicrosoftOneDrive . Save-EvergreenApp is then used to save the returned installers to C:\\Evergreen\\OneDrive . Version information is then saved to C:\\Evergreen\\OneDrive\\MicrosoftOneDrive.json with Export-EvergreenApp . If version information is already stored in the target file, the additional version information is saved to the same file. PARAMETERS \u00b6 -InputObject \u00b6 Export-EvergreenApp accepts the PSObject from Get-EvergreenApp . Type : PSObject Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -Path \u00b6 Specifies a path to the JSON file where version information will be stored. If the file does not exist, the parent directory must already exist. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS \u00b6 System.Management.Automation.PSObject \u00b6 Export-EvergreenApp accepts the output from Get-EvergreenApp. OUTPUTS \u00b6 NOTES \u00b6 Site: https://stealthpuppy.com Author: Aaron Parker Twitter: @stealthpuppy RELATED LINKS \u00b6 Export application version information:","title":"Export-EvergreenApp"},{"location":"help/en-US/Export-EvergreenApp/#export-evergreenapp","text":"","title":"Export-EvergreenApp"},{"location":"help/en-US/Export-EvergreenApp/#synopsis","text":"Exports application details gathered by Get-EvergreenApp to an external JSON file. This function reads any existing JSON for that application, adds the new version content, sorts for unique versions, then outputs the new content back to the target JSON file.","title":"SYNOPSIS"},{"location":"help/en-US/Export-EvergreenApp/#syntax","text":"Export-EvergreenApp [ -InputObject ] < PSObject > [ -Path < String >] [< CommonParameters >]","title":"SYNTAX"},{"location":"help/en-US/Export-EvergreenApp/#description","text":"Export application details gathered by Get-EvergreenApp to an external JSON file. This function reads any existing JSON for that application, adds the new version content, sorts for unique versions, then outputs the new content back to the target JSON file.","title":"DESCRIPTION"},{"location":"help/en-US/Export-EvergreenApp/#examples","text":"","title":"EXAMPLES"},{"location":"help/en-US/Export-EvergreenApp/#example-1","text":"$OneDrive = Get-EvergreenApp -Name \"MicrosoftOneDrive\" Save-EvergreenApp -InputObject $OneDrive -Path \"C:\\Evergreen\\OneDrive\" Export-EvergreenApp -InputObject $OneDrive -Path \"C:\\Evergreen\\OneDrive\\MicrosoftOneDrive.json\" Description: Get-EvergreenApp returns version information for MicrosoftOneDrive . Save-EvergreenApp is then used to save the returned installers to C:\\Evergreen\\OneDrive . Version information is then saved to C:\\Evergreen\\OneDrive\\MicrosoftOneDrive.json with Export-EvergreenApp . If version information is already stored in the target file, the additional version information is saved to the same file.","title":"EXAMPLE 1"},{"location":"help/en-US/Export-EvergreenApp/#parameters","text":"","title":"PARAMETERS"},{"location":"help/en-US/Export-EvergreenApp/#-inputobject","text":"Export-EvergreenApp accepts the PSObject from Get-EvergreenApp . Type : PSObject Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-InputObject"},{"location":"help/en-US/Export-EvergreenApp/#-path","text":"Specifies a path to the JSON file where version information will be stored. If the file does not exist, the parent directory must already exist. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"help/en-US/Export-EvergreenApp/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"help/en-US/Export-EvergreenApp/#inputs","text":"","title":"INPUTS"},{"location":"help/en-US/Export-EvergreenApp/#systemmanagementautomationpsobject","text":"Export-EvergreenApp accepts the output from Get-EvergreenApp.","title":"System.Management.Automation.PSObject"},{"location":"help/en-US/Export-EvergreenApp/#outputs","text":"","title":"OUTPUTS"},{"location":"help/en-US/Export-EvergreenApp/#notes","text":"Site: https://stealthpuppy.com Author: Aaron Parker Twitter: @stealthpuppy","title":"NOTES"},{"location":"help/en-US/Export-EvergreenApp/#related-links","text":"Export application version information:","title":"RELATED LINKS"},{"location":"help/en-US/Export-EvergreenManifest/","text":"Export-EvergreenManifest \u00b6 SYNOPSIS \u00b6 Exports an Evergreen application JSON manifest as a hashtable. SYNTAX \u00b6 Export-EvergreenManifest [ -Name ] < String > [< CommonParameters >] DESCRIPTION \u00b6 Exports an Evergreen application JSON manifest as a hashtable that can be used for various functions including scripting or saving to an external file. EXAMPLES \u00b6 EXAMPLE 1 \u00b6 Export-EvergreenManifest -Name \"MicrosoftEdge\" Description: Exports the application manifest for the application \"MicrosoftEdge\". PARAMETERS \u00b6 -Name \u00b6 The application name to return details for. The list of supported applications can be found with Find-EvergreenApp . Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS \u00b6 System.String \u00b6 OUTPUTS \u00b6 System.Management.Automation.PSObject \u00b6 NOTES \u00b6 Site: https://stealthpuppy.com Author: Aaron Parker Twitter: @stealthpuppy RELATED LINKS \u00b6 Getting started with Evergreen:","title":"Export-EvergreenManifest"},{"location":"help/en-US/Export-EvergreenManifest/#export-evergreenmanifest","text":"","title":"Export-EvergreenManifest"},{"location":"help/en-US/Export-EvergreenManifest/#synopsis","text":"Exports an Evergreen application JSON manifest as a hashtable.","title":"SYNOPSIS"},{"location":"help/en-US/Export-EvergreenManifest/#syntax","text":"Export-EvergreenManifest [ -Name ] < String > [< CommonParameters >]","title":"SYNTAX"},{"location":"help/en-US/Export-EvergreenManifest/#description","text":"Exports an Evergreen application JSON manifest as a hashtable that can be used for various functions including scripting or saving to an external file.","title":"DESCRIPTION"},{"location":"help/en-US/Export-EvergreenManifest/#examples","text":"","title":"EXAMPLES"},{"location":"help/en-US/Export-EvergreenManifest/#example-1","text":"Export-EvergreenManifest -Name \"MicrosoftEdge\" Description: Exports the application manifest for the application \"MicrosoftEdge\".","title":"EXAMPLE 1"},{"location":"help/en-US/Export-EvergreenManifest/#parameters","text":"","title":"PARAMETERS"},{"location":"help/en-US/Export-EvergreenManifest/#-name","text":"The application name to return details for. The list of supported applications can be found with Find-EvergreenApp . Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"help/en-US/Export-EvergreenManifest/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"help/en-US/Export-EvergreenManifest/#inputs","text":"","title":"INPUTS"},{"location":"help/en-US/Export-EvergreenManifest/#systemstring","text":"","title":"System.String"},{"location":"help/en-US/Export-EvergreenManifest/#outputs","text":"","title":"OUTPUTS"},{"location":"help/en-US/Export-EvergreenManifest/#systemmanagementautomationpsobject","text":"","title":"System.Management.Automation.PSObject"},{"location":"help/en-US/Export-EvergreenManifest/#notes","text":"Site: https://stealthpuppy.com Author: Aaron Parker Twitter: @stealthpuppy","title":"NOTES"},{"location":"help/en-US/Export-EvergreenManifest/#related-links","text":"Getting started with Evergreen:","title":"RELATED LINKS"},{"location":"help/en-US/Find-EvergreenApp/","text":"Find-EvergreenApp \u00b6 SYNOPSIS \u00b6 Outputs a table with the applications that Evergreen supports. SYNTAX \u00b6 Find-EvergreenApp [[ -Name ] < String >] [< CommonParameters >] DESCRIPTION \u00b6 Returns a table built from the internal application manifests to list the applications supported by Evergreen. The table includes the Name (the internal name used when querying for the application via Get-EvergreenApp ), Application (typically the full vendor and application name) and Link (a URL hosting official vendor information about the application) properties. EXAMPLES \u00b6 EXAMPLE 1 \u00b6 Find-EvergreenApp Description: Returns a table with the all of the applications currently supported by Evergreen. EXAMPLE 2 \u00b6 Find-EvergreenApp -Name \"Edge\" Description: Returns a table with the all of the currently supported applications that match \"Edge\". EXAMPLE 3 \u00b6 Find-EvergreenApp -Name \"Microsoft\" Description: Returns a table with the all of the currently supported applications that match \"Microsoft\". PARAMETERS \u00b6 -Name \u00b6 The application name to return details for. This can be the entire application name or a portion thereof. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS \u00b6 System.String \u00b6 OUTPUTS \u00b6 System.Management.Automation.PSObject \u00b6 NOTES \u00b6 Site: https://stealthpuppy.com Author: Aaron Parker Twitter: @stealthpuppy RELATED LINKS \u00b6 Find supported applications:","title":"Find-EvergreenApp"},{"location":"help/en-US/Find-EvergreenApp/#find-evergreenapp","text":"","title":"Find-EvergreenApp"},{"location":"help/en-US/Find-EvergreenApp/#synopsis","text":"Outputs a table with the applications that Evergreen supports.","title":"SYNOPSIS"},{"location":"help/en-US/Find-EvergreenApp/#syntax","text":"Find-EvergreenApp [[ -Name ] < String >] [< CommonParameters >]","title":"SYNTAX"},{"location":"help/en-US/Find-EvergreenApp/#description","text":"Returns a table built from the internal application manifests to list the applications supported by Evergreen. The table includes the Name (the internal name used when querying for the application via Get-EvergreenApp ), Application (typically the full vendor and application name) and Link (a URL hosting official vendor information about the application) properties.","title":"DESCRIPTION"},{"location":"help/en-US/Find-EvergreenApp/#examples","text":"","title":"EXAMPLES"},{"location":"help/en-US/Find-EvergreenApp/#example-1","text":"Find-EvergreenApp Description: Returns a table with the all of the applications currently supported by Evergreen.","title":"EXAMPLE 1"},{"location":"help/en-US/Find-EvergreenApp/#example-2","text":"Find-EvergreenApp -Name \"Edge\" Description: Returns a table with the all of the currently supported applications that match \"Edge\".","title":"EXAMPLE 2"},{"location":"help/en-US/Find-EvergreenApp/#example-3","text":"Find-EvergreenApp -Name \"Microsoft\" Description: Returns a table with the all of the currently supported applications that match \"Microsoft\".","title":"EXAMPLE 3"},{"location":"help/en-US/Find-EvergreenApp/#parameters","text":"","title":"PARAMETERS"},{"location":"help/en-US/Find-EvergreenApp/#-name","text":"The application name to return details for. This can be the entire application name or a portion thereof. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Name"},{"location":"help/en-US/Find-EvergreenApp/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"help/en-US/Find-EvergreenApp/#inputs","text":"","title":"INPUTS"},{"location":"help/en-US/Find-EvergreenApp/#systemstring","text":"","title":"System.String"},{"location":"help/en-US/Find-EvergreenApp/#outputs","text":"","title":"OUTPUTS"},{"location":"help/en-US/Find-EvergreenApp/#systemmanagementautomationpsobject","text":"","title":"System.Management.Automation.PSObject"},{"location":"help/en-US/Find-EvergreenApp/#notes","text":"Site: https://stealthpuppy.com Author: Aaron Parker Twitter: @stealthpuppy","title":"NOTES"},{"location":"help/en-US/Find-EvergreenApp/#related-links","text":"Find supported applications:","title":"RELATED LINKS"},{"location":"help/en-US/Get-EvergreenApp/","text":"Get-EvergreenApp \u00b6 SYNOPSIS \u00b6 Returns the latest version and download URL/s for an application supported by the Evergreen module. SYNTAX \u00b6 Get-EvergreenApp [ -Name ] < String > [< CommonParameters >] DESCRIPTION \u00b6 Queries the internal application functions and manifests included in the module to find the latest version and download link/s for the specified application. The output from this function can be passed to Where-Object to filter for a specific download based on properties including processor architecture, file type or other properties. Get-EvergreenApp uses official vendor sites including update APIs, web queries, and code repository locations to return details of a target application at run time. EXAMPLES \u00b6 EXAMPLE 1 \u00b6 Get-EvergreenApp -Name \"MicrosoftEdge\" Version : 89 . 0 . 774 . 76 Platform : Windows Channel : Stable Release : Enterprise Architecture : x64 Date : 12 / 4 / 2021 Hash : 9E7A29B4BE6E1CD707F80B4B79008F19D2D5DD5C774D317A493EC6DE5BE0B7D7 URI : https :// msedge . sf . dl . delivery . mp . microsoft . com / filestreamingservice / files / 4d12f620 - 174c - 4259 - 85e6 - 8a80ea45ff10 / MicrosoftEdgeEnterpriseX64 . msi Description: Returns the current version and download URLs for Microsoft Edge using the official Microsoft Edge update API at https://edgeupdates.microsoft.com/api/products . EXAMPLE 2 \u00b6 Get-EvergreenApp -Name \"MicrosoftEdge\" | Where-Object { $_ . Architecture -eq \"x64\" -and $_ . Channel -eq \"Stable\" -and $_ . Release -eq \"Enterprise\" } Description: Returns the current version and download URL for the Stable channel of the 64-bit Enterprise ring of Microsoft Edge. EXAMPLE 3 \u00b6 ( Get-EvergreenApp -Name \"MicrosoftOneDrive\" | Where-Object { $_ . Type -eq \"Exe\" -and $_ . Ring -eq \"Production\" }) | ` Sort-Object -Property @{ Expression = { [System.Version] $_ . Version }; Descending = $true } | Select-Object -First 1 Description: Returns the current version and download URL for the Production ring of Microsoft OneDrive and selects the latest version in the event that more that one release is returned. EXAMPLE 4 \u00b6 Get-EvergreenApp -Name \"AdobeAcrobatReaderDC\" | Where-Object { $_ . Language -eq \"English\" -and $_ . Architecture -eq \"x86\" } Description: Returns the current version and download URL that matches the English language, 32-bit release of Adobe Acrobat Reader DC. EXAMPLE 5 \u00b6 Find-EvergreenApp -Name \"Teams\" | Get-EvergreenApp Description: Lists the available applications matching the string \"Teams\" (for example, Microsoft Teams), and passes the output to Get-EvergreenApp , which will query the matching application name. Note that Get-EvergreenApp will only process the first application returned on the pipeline and not all multiple matching applications. EXAMPLE 6 \u00b6 Get-EvergreenApp -Name \"MicrosoftTeams\" | Save-EvergreenApp -Path \"C:\\Apps\\Teams\" Description: Get-EvergreenApp returns the details for the latest version of Microsoft Teams which is passed via the pipeline to Save-EvergreenApp . The output is used to save the target URLs to C:\\Apps\\Teams using a directory structure based on the returned object. In this case, the Ring and Architecture properties of the returned object will be used in the directory structure. EXAMPLE 7 \u00b6 Get-EvergreenApp -Name \"MozillaFirefox\" -AppParams @{ Language = \"en-GB\" , \"es-ES\" } Description: Passes en-GB an es-ES languages to MozillaFirefox to return downloads for these languages rather than the default en-US. EXAMPLE 8 \u00b6 Get-EvergreenApp -Name \"GitHubRelease\" -AppParams @{ Uri = \"https://api.github.com/repos/atom/atom/releases/latest\" } Description: Passes a custom repository to the internal application function for GetHubRelease rather than using the repository embedded into the manifest, allowing Get-EvergreenApp to find the releases for an application hosted on GitHub that isn't already supported by Evergreen. PARAMETERS \u00b6 -Name \u00b6 The application name to return details for. The list of supported applications can be found with Find-EvergreenApp . Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False -AppParams \u00b6 A hashtable of parameters to pass to the internal application function. Accepts a hashtable of keys and values that will be passed to the internal application function to enable additional functionality (application function dependent). Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS \u00b6 System.String \u00b6 OUTPUTS \u00b6 System.Management.Automation.PSObject \u00b6 NOTES \u00b6 Site: https://stealthpuppy.com Author: Aaron Parker Twitter: @stealthpuppy RELATED LINKS \u00b6 Use Evergreen:","title":"Get-EvergreenApp"},{"location":"help/en-US/Get-EvergreenApp/#get-evergreenapp","text":"","title":"Get-EvergreenApp"},{"location":"help/en-US/Get-EvergreenApp/#synopsis","text":"Returns the latest version and download URL/s for an application supported by the Evergreen module.","title":"SYNOPSIS"},{"location":"help/en-US/Get-EvergreenApp/#syntax","text":"Get-EvergreenApp [ -Name ] < String > [< CommonParameters >]","title":"SYNTAX"},{"location":"help/en-US/Get-EvergreenApp/#description","text":"Queries the internal application functions and manifests included in the module to find the latest version and download link/s for the specified application. The output from this function can be passed to Where-Object to filter for a specific download based on properties including processor architecture, file type or other properties. Get-EvergreenApp uses official vendor sites including update APIs, web queries, and code repository locations to return details of a target application at run time.","title":"DESCRIPTION"},{"location":"help/en-US/Get-EvergreenApp/#examples","text":"","title":"EXAMPLES"},{"location":"help/en-US/Get-EvergreenApp/#example-1","text":"Get-EvergreenApp -Name \"MicrosoftEdge\" Version : 89 . 0 . 774 . 76 Platform : Windows Channel : Stable Release : Enterprise Architecture : x64 Date : 12 / 4 / 2021 Hash : 9E7A29B4BE6E1CD707F80B4B79008F19D2D5DD5C774D317A493EC6DE5BE0B7D7 URI : https :// msedge . sf . dl . delivery . mp . microsoft . com / filestreamingservice / files / 4d12f620 - 174c - 4259 - 85e6 - 8a80ea45ff10 / MicrosoftEdgeEnterpriseX64 . msi Description: Returns the current version and download URLs for Microsoft Edge using the official Microsoft Edge update API at https://edgeupdates.microsoft.com/api/products .","title":"EXAMPLE 1"},{"location":"help/en-US/Get-EvergreenApp/#example-2","text":"Get-EvergreenApp -Name \"MicrosoftEdge\" | Where-Object { $_ . Architecture -eq \"x64\" -and $_ . Channel -eq \"Stable\" -and $_ . Release -eq \"Enterprise\" } Description: Returns the current version and download URL for the Stable channel of the 64-bit Enterprise ring of Microsoft Edge.","title":"EXAMPLE 2"},{"location":"help/en-US/Get-EvergreenApp/#example-3","text":"( Get-EvergreenApp -Name \"MicrosoftOneDrive\" | Where-Object { $_ . Type -eq \"Exe\" -and $_ . Ring -eq \"Production\" }) | ` Sort-Object -Property @{ Expression = { [System.Version] $_ . Version }; Descending = $true } | Select-Object -First 1 Description: Returns the current version and download URL for the Production ring of Microsoft OneDrive and selects the latest version in the event that more that one release is returned.","title":"EXAMPLE 3"},{"location":"help/en-US/Get-EvergreenApp/#example-4","text":"Get-EvergreenApp -Name \"AdobeAcrobatReaderDC\" | Where-Object { $_ . Language -eq \"English\" -and $_ . Architecture -eq \"x86\" } Description: Returns the current version and download URL that matches the English language, 32-bit release of Adobe Acrobat Reader DC.","title":"EXAMPLE 4"},{"location":"help/en-US/Get-EvergreenApp/#example-5","text":"Find-EvergreenApp -Name \"Teams\" | Get-EvergreenApp Description: Lists the available applications matching the string \"Teams\" (for example, Microsoft Teams), and passes the output to Get-EvergreenApp , which will query the matching application name. Note that Get-EvergreenApp will only process the first application returned on the pipeline and not all multiple matching applications.","title":"EXAMPLE 5"},{"location":"help/en-US/Get-EvergreenApp/#example-6","text":"Get-EvergreenApp -Name \"MicrosoftTeams\" | Save-EvergreenApp -Path \"C:\\Apps\\Teams\" Description: Get-EvergreenApp returns the details for the latest version of Microsoft Teams which is passed via the pipeline to Save-EvergreenApp . The output is used to save the target URLs to C:\\Apps\\Teams using a directory structure based on the returned object. In this case, the Ring and Architecture properties of the returned object will be used in the directory structure.","title":"EXAMPLE 6"},{"location":"help/en-US/Get-EvergreenApp/#example-7","text":"Get-EvergreenApp -Name \"MozillaFirefox\" -AppParams @{ Language = \"en-GB\" , \"es-ES\" } Description: Passes en-GB an es-ES languages to MozillaFirefox to return downloads for these languages rather than the default en-US.","title":"EXAMPLE 7"},{"location":"help/en-US/Get-EvergreenApp/#example-8","text":"Get-EvergreenApp -Name \"GitHubRelease\" -AppParams @{ Uri = \"https://api.github.com/repos/atom/atom/releases/latest\" } Description: Passes a custom repository to the internal application function for GetHubRelease rather than using the repository embedded into the manifest, allowing Get-EvergreenApp to find the releases for an application hosted on GitHub that isn't already supported by Evergreen.","title":"EXAMPLE 8"},{"location":"help/en-US/Get-EvergreenApp/#parameters","text":"","title":"PARAMETERS"},{"location":"help/en-US/Get-EvergreenApp/#-name","text":"The application name to return details for. The list of supported applications can be found with Find-EvergreenApp . Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False","title":"-Name"},{"location":"help/en-US/Get-EvergreenApp/#-appparams","text":"A hashtable of parameters to pass to the internal application function. Accepts a hashtable of keys and values that will be passed to the internal application function to enable additional functionality (application function dependent). Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-AppParams"},{"location":"help/en-US/Get-EvergreenApp/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"help/en-US/Get-EvergreenApp/#inputs","text":"","title":"INPUTS"},{"location":"help/en-US/Get-EvergreenApp/#systemstring","text":"","title":"System.String"},{"location":"help/en-US/Get-EvergreenApp/#outputs","text":"","title":"OUTPUTS"},{"location":"help/en-US/Get-EvergreenApp/#systemmanagementautomationpsobject","text":"","title":"System.Management.Automation.PSObject"},{"location":"help/en-US/Get-EvergreenApp/#notes","text":"Site: https://stealthpuppy.com Author: Aaron Parker Twitter: @stealthpuppy","title":"NOTES"},{"location":"help/en-US/Get-EvergreenApp/#related-links","text":"Use Evergreen:","title":"RELATED LINKS"},{"location":"help/en-US/Get-EvergreenLibrary/","text":"Get-EvergreenLibrary \u00b6 SYNOPSIS \u00b6 Returns details about an Evergreen library. SYNTAX \u00b6 Get-EvergreenLibrary [ -Path ] < FileInfo > [< CommonParameters >] DESCRIPTION \u00b6 Returns details about an Evergreen library at a specified path. This will include details of the library stored in EvergreenLibrary.json and application version information stored for each application in the library. Application downloads and application version information must first be downloaded via Invoke-EvergreenLibraryUpdate . EXAMPLES \u00b6 Example 1 \u00b6 PS C :\\> Get-EvergreenLibrary -Path \"E:\\EvergreenLibrary\" Returns details about the Evergreen library at E:\\EvergreenLibrary, including application version information stored for each application. PARAMETERS \u00b6 -Path \u00b6 Specify the path to the library. Type : FileInfo Parameter Sets : (All) Aliases : Required : True Position : 0 Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS \u00b6 System.IO.FileInfo \u00b6 OUTPUTS \u00b6 System.Object \u00b6 NOTES \u00b6 Site: https://stealthpuppy.com Author: Aaron Parker Twitter: @stealthpuppy RELATED LINKS \u00b6 Create an Evergreen library:","title":"Get-EvergreenLibrary"},{"location":"help/en-US/Get-EvergreenLibrary/#get-evergreenlibrary","text":"","title":"Get-EvergreenLibrary"},{"location":"help/en-US/Get-EvergreenLibrary/#synopsis","text":"Returns details about an Evergreen library.","title":"SYNOPSIS"},{"location":"help/en-US/Get-EvergreenLibrary/#syntax","text":"Get-EvergreenLibrary [ -Path ] < FileInfo > [< CommonParameters >]","title":"SYNTAX"},{"location":"help/en-US/Get-EvergreenLibrary/#description","text":"Returns details about an Evergreen library at a specified path. This will include details of the library stored in EvergreenLibrary.json and application version information stored for each application in the library. Application downloads and application version information must first be downloaded via Invoke-EvergreenLibraryUpdate .","title":"DESCRIPTION"},{"location":"help/en-US/Get-EvergreenLibrary/#examples","text":"","title":"EXAMPLES"},{"location":"help/en-US/Get-EvergreenLibrary/#example-1","text":"PS C :\\> Get-EvergreenLibrary -Path \"E:\\EvergreenLibrary\" Returns details about the Evergreen library at E:\\EvergreenLibrary, including application version information stored for each application.","title":"Example 1"},{"location":"help/en-US/Get-EvergreenLibrary/#parameters","text":"","title":"PARAMETERS"},{"location":"help/en-US/Get-EvergreenLibrary/#-path","text":"Specify the path to the library. Type : FileInfo Parameter Sets : (All) Aliases : Required : True Position : 0 Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False","title":"-Path"},{"location":"help/en-US/Get-EvergreenLibrary/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"help/en-US/Get-EvergreenLibrary/#inputs","text":"","title":"INPUTS"},{"location":"help/en-US/Get-EvergreenLibrary/#systemiofileinfo","text":"","title":"System.IO.FileInfo"},{"location":"help/en-US/Get-EvergreenLibrary/#outputs","text":"","title":"OUTPUTS"},{"location":"help/en-US/Get-EvergreenLibrary/#systemobject","text":"","title":"System.Object"},{"location":"help/en-US/Get-EvergreenLibrary/#notes","text":"Site: https://stealthpuppy.com Author: Aaron Parker Twitter: @stealthpuppy","title":"NOTES"},{"location":"help/en-US/Get-EvergreenLibrary/#related-links","text":"Create an Evergreen library:","title":"RELATED LINKS"},{"location":"help/en-US/Invoke-EvergreenLibraryUpdate/","text":"Invoke-EvergreenLibraryUpdate \u00b6 SYNOPSIS \u00b6 Invokes the update and download of application installers in an Evergreen library. Invoke-EvergreenLibraryUpdate reads the library manifest ( EvergreenLibrary.json ) which defines the applications in the library and uses Get-EvergreenApp and Save-EvergreenApp to download the latest installers to the library. SYNTAX \u00b6 Invoke-EvergreenLibraryUpdate [ -Path ] < FileInfo > [ -WhatIf ] [ -Confirm ] [< CommonParameters >] DESCRIPTION \u00b6 An Evergreen library can be used to maintain multiple versions of application installers, rather than always using the latest installer. An Evergreen library allows you to install the version of an application required for a specific environment including rolling back to a previous version of an application. An Evergreen library also enables you to build an image build without requiring internet access, by downloading the application installers to the library and then using those installers during the image build process. Invoke-EvergreenLibraryUpdate invokes the update and download of application installers in an Evergreen library. Invoke-EvergreenLibraryUpdate reads the library manifest ( EvergreenLibrary.json ) which defines the applications in the library and uses Get-EvergreenApp and Save-EvergreenApp to download the latest installers to the library. EXAMPLES \u00b6 EXAMPLE 1 \u00b6 Invoke-EvergreenLibraryUpdate -Path \"E:\\EvergreenLibrary\" Description: Invoke-EvergreenLibraryUpdate reads the library manifest EvergreenLibrary.json located in E:\\EvergreenLibrary which defines the applications for that library. It uses Get-EvergreenApp and Save-EvergreenApp to download the latest installers to the library. PARAMETERS \u00b6 -Path \u00b6 Specifies the path to the Evergreen library. The path must include EvergreenLibrary.json, in the expected structure, which defines the applications to be stored in the library. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -WhatIf \u00b6 Shows what would happen if the cmdlet runs. Type : SwitchParameter Parameter Sets : (All) Aliases : wi Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS \u00b6 System.String \u00b6 Invoke-EvergreenLibraryUpdate accepts a string parameter. OUTPUTS \u00b6 NOTES \u00b6 Site: https://stealthpuppy.com Author: Aaron Parker Twitter: @stealthpuppy RELATED LINKS \u00b6 Update an Evergreen library:","title":"Invoke-EvergreenLibraryUpdate"},{"location":"help/en-US/Invoke-EvergreenLibraryUpdate/#invoke-evergreenlibraryupdate","text":"","title":"Invoke-EvergreenLibraryUpdate"},{"location":"help/en-US/Invoke-EvergreenLibraryUpdate/#synopsis","text":"Invokes the update and download of application installers in an Evergreen library. Invoke-EvergreenLibraryUpdate reads the library manifest ( EvergreenLibrary.json ) which defines the applications in the library and uses Get-EvergreenApp and Save-EvergreenApp to download the latest installers to the library.","title":"SYNOPSIS"},{"location":"help/en-US/Invoke-EvergreenLibraryUpdate/#syntax","text":"Invoke-EvergreenLibraryUpdate [ -Path ] < FileInfo > [ -WhatIf ] [ -Confirm ] [< CommonParameters >]","title":"SYNTAX"},{"location":"help/en-US/Invoke-EvergreenLibraryUpdate/#description","text":"An Evergreen library can be used to maintain multiple versions of application installers, rather than always using the latest installer. An Evergreen library allows you to install the version of an application required for a specific environment including rolling back to a previous version of an application. An Evergreen library also enables you to build an image build without requiring internet access, by downloading the application installers to the library and then using those installers during the image build process. Invoke-EvergreenLibraryUpdate invokes the update and download of application installers in an Evergreen library. Invoke-EvergreenLibraryUpdate reads the library manifest ( EvergreenLibrary.json ) which defines the applications in the library and uses Get-EvergreenApp and Save-EvergreenApp to download the latest installers to the library.","title":"DESCRIPTION"},{"location":"help/en-US/Invoke-EvergreenLibraryUpdate/#examples","text":"","title":"EXAMPLES"},{"location":"help/en-US/Invoke-EvergreenLibraryUpdate/#example-1","text":"Invoke-EvergreenLibraryUpdate -Path \"E:\\EvergreenLibrary\" Description: Invoke-EvergreenLibraryUpdate reads the library manifest EvergreenLibrary.json located in E:\\EvergreenLibrary which defines the applications for that library. It uses Get-EvergreenApp and Save-EvergreenApp to download the latest installers to the library.","title":"EXAMPLE 1"},{"location":"help/en-US/Invoke-EvergreenLibraryUpdate/#parameters","text":"","title":"PARAMETERS"},{"location":"help/en-US/Invoke-EvergreenLibraryUpdate/#-path","text":"Specifies the path to the Evergreen library. The path must include EvergreenLibrary.json, in the expected structure, which defines the applications to be stored in the library. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Path"},{"location":"help/en-US/Invoke-EvergreenLibraryUpdate/#-whatif","text":"Shows what would happen if the cmdlet runs. Type : SwitchParameter Parameter Sets : (All) Aliases : wi Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-WhatIf"},{"location":"help/en-US/Invoke-EvergreenLibraryUpdate/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"help/en-US/Invoke-EvergreenLibraryUpdate/#inputs","text":"","title":"INPUTS"},{"location":"help/en-US/Invoke-EvergreenLibraryUpdate/#systemstring","text":"Invoke-EvergreenLibraryUpdate accepts a string parameter.","title":"System.String"},{"location":"help/en-US/Invoke-EvergreenLibraryUpdate/#outputs","text":"","title":"OUTPUTS"},{"location":"help/en-US/Invoke-EvergreenLibraryUpdate/#notes","text":"Site: https://stealthpuppy.com Author: Aaron Parker Twitter: @stealthpuppy","title":"NOTES"},{"location":"help/en-US/Invoke-EvergreenLibraryUpdate/#related-links","text":"Update an Evergreen library:","title":"RELATED LINKS"},{"location":"help/en-US/New-EvergreenLibrary/","text":"New-EvergreenLibrary \u00b6 SYNOPSIS \u00b6 Creates an Evergreen library at the specified path. SYNTAX \u00b6 New-EvergreenLibrary [ -Path ] < FileInfo > [ -Name < String >] [ -WhatIf ] [ -Confirm ] [< CommonParameters >] DESCRIPTION \u00b6 Creates an Evergreen library at the specified path. An Evergreen library is a directory with a manifest file that defines the application installers to be stored in the library ( EvergreenLibrary.json ). New-EvergreenLibrary will create a default library in the specified path, after which the manifest file can be manually updated to define the application list for the library. EXAMPLES \u00b6 EXAMPLE 1 \u00b6 New-EvergreenLibrary -Path \"E:\\EvergreenLibrary\" Description: Creates a new Evergreen library in the path E:\\EvergreenLibrary. EXAMPLE 2 \u00b6 New-EvergreenLibrary -Path \"E:\\EvergreenLibrary\" -Name \"AzureVirtualDesktopProd\" Description: Creates a new Evergreen library in the path E:\\EvergreenLibrary. Assigns the name AzureVirtualDesktopProd to the manifest file - EvergreenLibrary.json . PARAMETERS \u00b6 -Path \u00b6 Specifies the path to the Evergreen library. It is expected that the target location is empty. If the path includes EvergreenLibrary.json, New-EvergreenLibrary will not make changes to the manifest. Type : Path Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -Name \u00b6 Specify a name for the library. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -WhatIf \u00b6 Shows what would happen if the cmdlet runs. Type : SwitchParameter Parameter Sets : (All) Aliases : wi Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS \u00b6 System.String \u00b6 New-EvergreenLibrary accepts string parameters. OUTPUTS \u00b6 NOTES \u00b6 Site: https://stealthpuppy.com Author: Aaron Parker Twitter: @stealthpuppy RELATED LINKS \u00b6 Create an Evergreen library:","title":"New-EvergreenLibrary"},{"location":"help/en-US/New-EvergreenLibrary/#new-evergreenlibrary","text":"","title":"New-EvergreenLibrary"},{"location":"help/en-US/New-EvergreenLibrary/#synopsis","text":"Creates an Evergreen library at the specified path.","title":"SYNOPSIS"},{"location":"help/en-US/New-EvergreenLibrary/#syntax","text":"New-EvergreenLibrary [ -Path ] < FileInfo > [ -Name < String >] [ -WhatIf ] [ -Confirm ] [< CommonParameters >]","title":"SYNTAX"},{"location":"help/en-US/New-EvergreenLibrary/#description","text":"Creates an Evergreen library at the specified path. An Evergreen library is a directory with a manifest file that defines the application installers to be stored in the library ( EvergreenLibrary.json ). New-EvergreenLibrary will create a default library in the specified path, after which the manifest file can be manually updated to define the application list for the library.","title":"DESCRIPTION"},{"location":"help/en-US/New-EvergreenLibrary/#examples","text":"","title":"EXAMPLES"},{"location":"help/en-US/New-EvergreenLibrary/#example-1","text":"New-EvergreenLibrary -Path \"E:\\EvergreenLibrary\" Description: Creates a new Evergreen library in the path E:\\EvergreenLibrary.","title":"EXAMPLE 1"},{"location":"help/en-US/New-EvergreenLibrary/#example-2","text":"New-EvergreenLibrary -Path \"E:\\EvergreenLibrary\" -Name \"AzureVirtualDesktopProd\" Description: Creates a new Evergreen library in the path E:\\EvergreenLibrary. Assigns the name AzureVirtualDesktopProd to the manifest file - EvergreenLibrary.json .","title":"EXAMPLE 2"},{"location":"help/en-US/New-EvergreenLibrary/#parameters","text":"","title":"PARAMETERS"},{"location":"help/en-US/New-EvergreenLibrary/#-path","text":"Specifies the path to the Evergreen library. It is expected that the target location is empty. If the path includes EvergreenLibrary.json, New-EvergreenLibrary will not make changes to the manifest. Type : Path Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Path"},{"location":"help/en-US/New-EvergreenLibrary/#-name","text":"Specify a name for the library. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"help/en-US/New-EvergreenLibrary/#-whatif","text":"Shows what would happen if the cmdlet runs. Type : SwitchParameter Parameter Sets : (All) Aliases : wi Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-WhatIf"},{"location":"help/en-US/New-EvergreenLibrary/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"help/en-US/New-EvergreenLibrary/#inputs","text":"","title":"INPUTS"},{"location":"help/en-US/New-EvergreenLibrary/#systemstring","text":"New-EvergreenLibrary accepts string parameters.","title":"System.String"},{"location":"help/en-US/New-EvergreenLibrary/#outputs","text":"","title":"OUTPUTS"},{"location":"help/en-US/New-EvergreenLibrary/#notes","text":"Site: https://stealthpuppy.com Author: Aaron Parker Twitter: @stealthpuppy","title":"NOTES"},{"location":"help/en-US/New-EvergreenLibrary/#related-links","text":"Create an Evergreen library:","title":"RELATED LINKS"},{"location":"help/en-US/Save-EvergreenApp/","text":"Save-EvergreenApp \u00b6 SYNOPSIS \u00b6 Downloads target URIs passed to this function from Get-EvergreenApp into a directory structure. SYNTAX \u00b6 Path (Default) \u00b6 Save-EvergreenApp [ -InputObject ] < PSObject > [[ -Path ] < FileInfo >] [[ -Proxy ] < String >] [[ -ProxyCredential ] < PSCredential >] [ -Force ] [ -NoProgress ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >] CustomPath \u00b6 Save-EvergreenApp [ -InputObject ] < PSObject > [ -CustomPath < FileInfo >] [[ -Proxy ] < String >] [[ -ProxyCredential ] < PSCredential >] [ -Force ] [ -NoProgress ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >] DESCRIPTION \u00b6 Saves target URLs passed to this function from Get-EvergreenApp output to into a directory structure below -Path using the properties from the object passed to the function. Get-EvergreenApp will return an object that may include application properties including (in the following order) - Product, Track, Channel, Release, Ring, Version, Language, and (processor) Architecture. Only properties that exist on the target object will be used. This simplifies saving the target application installers or updaters into a consistent directory structure without having to build the target directory structure yourself or deal with other functions to download the file. To override the default behaviour that creates the directory structure based on the properties of the object passed to the function, use the -CustomPath parameter to specify an exact path to save files into. Note that this method download the first file and then will skip files from an object passed from Get-EvergreenApp that includes files with the same name. EXAMPLES \u00b6 EXAMPLE 1 \u00b6 Get-EvergreenApp -Name \"AdobeAcrobat\" | Save-EvergreenApp -Path \"C:\\Temp\\Adobe\" Description: Downloads each file specified in the URIs returned by Get-EvergreenApp -Name \"AdobeAcrobat\" to a directory structure below C:\\Temp\\Adobe, resulting in a directory structure per file like: C:\\Temp\\Adobe\\ \\ \\ \\ \\ . EXAMPLE 2 \u00b6 Get-EvergreenApp -Name \"AdobeAcrobat\" | Save-EvergreenApp -CustomPath \"C:\\Temp\\Adobe\" Description: Downloads all of the URIs returned by Get-EvergreenApp -Name \"AdobeAcrobat\" to a directory named C:\\Temp\\Adobe. All files specified in the URI property will be saved into this directory. PARAMETERS \u00b6 -InputObject \u00b6 Save-EvergreenApp accepts the PSObject from Get-EvergreenApp . Save-EvergreenApp will test for the existence of at least these properties - Version and URI. Type : PSObject Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -Path \u00b6 The target directory under which a directory structure will be created and application installers saved into. Typically the target path used will be a path per application. Type : System.IO.FileInfo Parameter Sets : Path Aliases : Required : False Position : 2 Default value : (Resolve-Path -Path $PWD) Accept pipeline input : False Accept wildcard characters : False -CustomPath \u00b6 Specify a single directory path where all application installers will be saved into. No sub-directories will be created. Type : System.IO.FileInfo Parameter Sets : CustomPath Aliases : Required : False Position : 2 Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False -Proxy \u00b6 Specifies a proxy server for the request, rather than connecting directly to the internet resource. Enter the URI of a network proxy server. Note - this is experimental support for proxies. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -ProxyCredential \u00b6 Specifies a user account that has permission to use the proxy server that is specified by the Proxy parameter. The default is the current user. Type a user name, such as User01 or Domain01\\User01, User@Domain.Com , or enter a PSCredential object, such as one generated by the Get-Credential cmdlet. This parameter is valid only when the Proxy parameter is also used in the command. Note - this is experimental support for proxy servers and has not been extensively tested. Type : PSCredential Parameter Sets : (All) Aliases : Required : False Position : Named Default value : [ System.Management.Automation.PSCredential ] ::Empty Accept pipeline input : False Accept wildcard characters : False -NoProgress \u00b6 Save-EvergreenApp uses Invoke-WebRequest to download target application installers. Download progress is suppressed by default for faster downloads; however, when -Verbose is used, download progress will be displayed. Use -NoProgress with -Verbose to suppress download progress while also displaying verbose output. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -WhatIf \u00b6 Shows what would happen if the cmdlet runs. The cmdlet is not run. Type : SwitchParameter Parameter Sets : (All) Aliases : wi Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Confirm \u00b6 Prompts you for confirmation before running the cmdlet. Type : SwitchParameter Parameter Sets : (All) Aliases : cf Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Force \u00b6 Forces this function to download the target application installers from the URI property even if they already exist in the target directory. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS \u00b6 System.Management.Automation.PSObject \u00b6 Save-EvergreenApp accepts the output from Get-EvergreenApp. OUTPUTS \u00b6 System.Management.Automation.PSObject \u00b6 Provides a list of paths of the downloaded target files. NOTES \u00b6 Site: https://stealthpuppy.com Author: Aaron Parker Twitter: @stealthpuppy RELATED LINKS \u00b6 Download application installers:","title":"Save-EvergreenApp"},{"location":"help/en-US/Save-EvergreenApp/#save-evergreenapp","text":"","title":"Save-EvergreenApp"},{"location":"help/en-US/Save-EvergreenApp/#synopsis","text":"Downloads target URIs passed to this function from Get-EvergreenApp into a directory structure.","title":"SYNOPSIS"},{"location":"help/en-US/Save-EvergreenApp/#syntax","text":"","title":"SYNTAX"},{"location":"help/en-US/Save-EvergreenApp/#path-default","text":"Save-EvergreenApp [ -InputObject ] < PSObject > [[ -Path ] < FileInfo >] [[ -Proxy ] < String >] [[ -ProxyCredential ] < PSCredential >] [ -Force ] [ -NoProgress ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >]","title":"Path (Default)"},{"location":"help/en-US/Save-EvergreenApp/#custompath","text":"Save-EvergreenApp [ -InputObject ] < PSObject > [ -CustomPath < FileInfo >] [[ -Proxy ] < String >] [[ -ProxyCredential ] < PSCredential >] [ -Force ] [ -NoProgress ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >]","title":"CustomPath"},{"location":"help/en-US/Save-EvergreenApp/#description","text":"Saves target URLs passed to this function from Get-EvergreenApp output to into a directory structure below -Path using the properties from the object passed to the function. Get-EvergreenApp will return an object that may include application properties including (in the following order) - Product, Track, Channel, Release, Ring, Version, Language, and (processor) Architecture. Only properties that exist on the target object will be used. This simplifies saving the target application installers or updaters into a consistent directory structure without having to build the target directory structure yourself or deal with other functions to download the file. To override the default behaviour that creates the directory structure based on the properties of the object passed to the function, use the -CustomPath parameter to specify an exact path to save files into. Note that this method download the first file and then will skip files from an object passed from Get-EvergreenApp that includes files with the same name.","title":"DESCRIPTION"},{"location":"help/en-US/Save-EvergreenApp/#examples","text":"","title":"EXAMPLES"},{"location":"help/en-US/Save-EvergreenApp/#example-1","text":"Get-EvergreenApp -Name \"AdobeAcrobat\" | Save-EvergreenApp -Path \"C:\\Temp\\Adobe\" Description: Downloads each file specified in the URIs returned by Get-EvergreenApp -Name \"AdobeAcrobat\" to a directory structure below C:\\Temp\\Adobe, resulting in a directory structure per file like: C:\\Temp\\Adobe\\ \\ \\ \\ \\ .","title":"EXAMPLE 1"},{"location":"help/en-US/Save-EvergreenApp/#example-2","text":"Get-EvergreenApp -Name \"AdobeAcrobat\" | Save-EvergreenApp -CustomPath \"C:\\Temp\\Adobe\" Description: Downloads all of the URIs returned by Get-EvergreenApp -Name \"AdobeAcrobat\" to a directory named C:\\Temp\\Adobe. All files specified in the URI property will be saved into this directory.","title":"EXAMPLE 2"},{"location":"help/en-US/Save-EvergreenApp/#parameters","text":"","title":"PARAMETERS"},{"location":"help/en-US/Save-EvergreenApp/#-inputobject","text":"Save-EvergreenApp accepts the PSObject from Get-EvergreenApp . Save-EvergreenApp will test for the existence of at least these properties - Version and URI. Type : PSObject Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-InputObject"},{"location":"help/en-US/Save-EvergreenApp/#-path","text":"The target directory under which a directory structure will be created and application installers saved into. Typically the target path used will be a path per application. Type : System.IO.FileInfo Parameter Sets : Path Aliases : Required : False Position : 2 Default value : (Resolve-Path -Path $PWD) Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"help/en-US/Save-EvergreenApp/#-custompath","text":"Specify a single directory path where all application installers will be saved into. No sub-directories will be created. Type : System.IO.FileInfo Parameter Sets : CustomPath Aliases : Required : False Position : 2 Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False","title":"-CustomPath"},{"location":"help/en-US/Save-EvergreenApp/#-proxy","text":"Specifies a proxy server for the request, rather than connecting directly to the internet resource. Enter the URI of a network proxy server. Note - this is experimental support for proxies. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Proxy"},{"location":"help/en-US/Save-EvergreenApp/#-proxycredential","text":"Specifies a user account that has permission to use the proxy server that is specified by the Proxy parameter. The default is the current user. Type a user name, such as User01 or Domain01\\User01, User@Domain.Com , or enter a PSCredential object, such as one generated by the Get-Credential cmdlet. This parameter is valid only when the Proxy parameter is also used in the command. Note - this is experimental support for proxy servers and has not been extensively tested. Type : PSCredential Parameter Sets : (All) Aliases : Required : False Position : Named Default value : [ System.Management.Automation.PSCredential ] ::Empty Accept pipeline input : False Accept wildcard characters : False","title":"-ProxyCredential"},{"location":"help/en-US/Save-EvergreenApp/#-noprogress","text":"Save-EvergreenApp uses Invoke-WebRequest to download target application installers. Download progress is suppressed by default for faster downloads; however, when -Verbose is used, download progress will be displayed. Use -NoProgress with -Verbose to suppress download progress while also displaying verbose output. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-NoProgress"},{"location":"help/en-US/Save-EvergreenApp/#-whatif","text":"Shows what would happen if the cmdlet runs. The cmdlet is not run. Type : SwitchParameter Parameter Sets : (All) Aliases : wi Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-WhatIf"},{"location":"help/en-US/Save-EvergreenApp/#-confirm","text":"Prompts you for confirmation before running the cmdlet. Type : SwitchParameter Parameter Sets : (All) Aliases : cf Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Confirm"},{"location":"help/en-US/Save-EvergreenApp/#-force","text":"Forces this function to download the target application installers from the URI property even if they already exist in the target directory. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Force"},{"location":"help/en-US/Save-EvergreenApp/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"help/en-US/Save-EvergreenApp/#inputs","text":"","title":"INPUTS"},{"location":"help/en-US/Save-EvergreenApp/#systemmanagementautomationpsobject","text":"Save-EvergreenApp accepts the output from Get-EvergreenApp.","title":"System.Management.Automation.PSObject"},{"location":"help/en-US/Save-EvergreenApp/#outputs","text":"","title":"OUTPUTS"},{"location":"help/en-US/Save-EvergreenApp/#systemmanagementautomationpsobject_1","text":"Provides a list of paths of the downloaded target files.","title":"System.Management.Automation.PSObject"},{"location":"help/en-US/Save-EvergreenApp/#notes","text":"Site: https://stealthpuppy.com Author: Aaron Parker Twitter: @stealthpuppy","title":"NOTES"},{"location":"help/en-US/Save-EvergreenApp/#related-links","text":"Download application installers:","title":"RELATED LINKS"},{"location":"help/en-US/Test-EvergreenApp/","text":"Test-EvergreenApp \u00b6 SYNOPSIS \u00b6 Validates target URIs passed to this function from Get-EvergreenApp . SYNTAX \u00b6 Test-EvergreenApp [ -InputObject ] < PSObject > [[ -Proxy ] < String >] [[ -ProxyCredential ] < PSCredential >] [ -Force ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >] DESCRIPTION \u00b6 Evergreen includes the function Test-EvergreenApp that can test whether the application installer URLs returned from Get-EvergreenApp exist at the URL specified. Test-EvergreenApp will enable you to quickly validate whether the application installer exists. EXAMPLES \u00b6 EXAMPLE 1 \u00b6 Get-EvergreenApp -Name \"MicrosoftOneDrive\" | Test-EvergreenApp Description: Validates the URI properties for each object returned from Get-EvergreenApp -Name \"MicrosoftOneDrive\" and returns a true or false result if the URI exists or does not exist. PARAMETERS \u00b6 -InputObject \u00b6 Test-EvergreenApp accepts the PSObject from Get-EvergreenApp . Test-EvergreenApp will test for the existence of at least these properties - Version and URI. Type : PSObject Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -Proxy \u00b6 Specifies a proxy server for the request, rather than connecting directly to the internet resource. Enter the URI of a network proxy server. Note - this is experimental support for proxies. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -ProxyCredential \u00b6 Specifies a user account that has permission to use the proxy server that is specified by the Proxy parameter. The default is the current user. Type a user name, such as User01 or Domain01\\User01, User@Domain.Com , or enter a PSCredential object, such as one generated by the Get-Credential cmdlet. This parameter is valid only when the Proxy parameter is also used in the command. Note - this is experimental support for proxy servers and has not been extensively tested. Type : PSCredential Parameter Sets : (All) Aliases : Required : False Position : Named Default value : [ System.Management.Automation.PSCredential ] ::Empty Accept pipeline input : False Accept wildcard characters : False -WhatIf \u00b6 Shows what would happen if the cmdlet runs. The cmdlet is not run. Type : SwitchParameter Parameter Sets : (All) Aliases : wi Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS \u00b6 System.Management.Automation.PSObject \u00b6 Test-EvergreenApp accepts the output from Get-EvergreenApp. OUTPUTS \u00b6 System.Management.Automation.PSObject \u00b6 Provides a list URLs and a true/false result. NOTES \u00b6 Site: https://stealthpuppy.com Author: Aaron Parker Twitter: @stealthpuppy RELATED LINKS \u00b6 Download application installers:","title":"Test-EvergreenApp"},{"location":"help/en-US/Test-EvergreenApp/#test-evergreenapp","text":"","title":"Test-EvergreenApp"},{"location":"help/en-US/Test-EvergreenApp/#synopsis","text":"Validates target URIs passed to this function from Get-EvergreenApp .","title":"SYNOPSIS"},{"location":"help/en-US/Test-EvergreenApp/#syntax","text":"Test-EvergreenApp [ -InputObject ] < PSObject > [[ -Proxy ] < String >] [[ -ProxyCredential ] < PSCredential >] [ -Force ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >]","title":"SYNTAX"},{"location":"help/en-US/Test-EvergreenApp/#description","text":"Evergreen includes the function Test-EvergreenApp that can test whether the application installer URLs returned from Get-EvergreenApp exist at the URL specified. Test-EvergreenApp will enable you to quickly validate whether the application installer exists.","title":"DESCRIPTION"},{"location":"help/en-US/Test-EvergreenApp/#examples","text":"","title":"EXAMPLES"},{"location":"help/en-US/Test-EvergreenApp/#example-1","text":"Get-EvergreenApp -Name \"MicrosoftOneDrive\" | Test-EvergreenApp Description: Validates the URI properties for each object returned from Get-EvergreenApp -Name \"MicrosoftOneDrive\" and returns a true or false result if the URI exists or does not exist.","title":"EXAMPLE 1"},{"location":"help/en-US/Test-EvergreenApp/#parameters","text":"","title":"PARAMETERS"},{"location":"help/en-US/Test-EvergreenApp/#-inputobject","text":"Test-EvergreenApp accepts the PSObject from Get-EvergreenApp . Test-EvergreenApp will test for the existence of at least these properties - Version and URI. Type : PSObject Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-InputObject"},{"location":"help/en-US/Test-EvergreenApp/#-proxy","text":"Specifies a proxy server for the request, rather than connecting directly to the internet resource. Enter the URI of a network proxy server. Note - this is experimental support for proxies. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Proxy"},{"location":"help/en-US/Test-EvergreenApp/#-proxycredential","text":"Specifies a user account that has permission to use the proxy server that is specified by the Proxy parameter. The default is the current user. Type a user name, such as User01 or Domain01\\User01, User@Domain.Com , or enter a PSCredential object, such as one generated by the Get-Credential cmdlet. This parameter is valid only when the Proxy parameter is also used in the command. Note - this is experimental support for proxy servers and has not been extensively tested. Type : PSCredential Parameter Sets : (All) Aliases : Required : False Position : Named Default value : [ System.Management.Automation.PSCredential ] ::Empty Accept pipeline input : False Accept wildcard characters : False","title":"-ProxyCredential"},{"location":"help/en-US/Test-EvergreenApp/#-whatif","text":"Shows what would happen if the cmdlet runs. The cmdlet is not run. Type : SwitchParameter Parameter Sets : (All) Aliases : wi Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-WhatIf"},{"location":"help/en-US/Test-EvergreenApp/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"help/en-US/Test-EvergreenApp/#inputs","text":"","title":"INPUTS"},{"location":"help/en-US/Test-EvergreenApp/#systemmanagementautomationpsobject","text":"Test-EvergreenApp accepts the output from Get-EvergreenApp.","title":"System.Management.Automation.PSObject"},{"location":"help/en-US/Test-EvergreenApp/#outputs","text":"","title":"OUTPUTS"},{"location":"help/en-US/Test-EvergreenApp/#systemmanagementautomationpsobject_1","text":"Provides a list URLs and a true/false result.","title":"System.Management.Automation.PSObject"},{"location":"help/en-US/Test-EvergreenApp/#notes","text":"Site: https://stealthpuppy.com Author: Aaron Parker Twitter: @stealthpuppy","title":"NOTES"},{"location":"help/en-US/Test-EvergreenApp/#related-links","text":"Download application installers:","title":"RELATED LINKS"},{"location":"help/en-US/about_Evergreen/","text":"Evergreen \u00b6 about_Evergreen \u00b6 SHORT DESCRIPTION \u00b6 Return the latest version and download URLs for a set of common Windows applications. LONG DESCRIPTION \u00b6 Evergreen is a PowerShell module that returns the latest version and download URLs for a set of common Windows applications. The module consists of simple functions to use in scripts when performing several tasks including: Retrieve the latest version of a particular application to comparing against a version already installed or downloaded Return the URL for the latest version of the application to download it for local installation or deployment to target machines Evergreen is intended for use in solutions used to automate software deployments. These solutions could be: Image creation with Hashicorp Packer - images can be created with the latest version of a set of applications Import applications into Microsoft Endpoint Manager - keep Configuration Manager or Microsoft Intune up to date with the latest versions of applications Create a library of application installers - by regularly running Evergreen functions, you can retrieve and download the current version of an application and store it in an application directory structure for later use Submitting manifests to Winget or Chocolatey or similar - Evergreen can return an object with a version number and download URL that can be used to construct manifests for the most recent versions Primary functions in Evergreen are: Get-EvergreenApp - returns details of the latest release of an application including the version number and download URL Save-EvergreenApp - simplifies downloading application URLs returned from Get-EvergreenApp Find-EvergreenApp - lists applications supported by the module","title":"about_Evergreen"},{"location":"help/en-US/about_Evergreen/#evergreen","text":"","title":"Evergreen"},{"location":"help/en-US/about_Evergreen/#about_evergreen","text":"","title":"about_Evergreen"},{"location":"help/en-US/about_Evergreen/#short-description","text":"Return the latest version and download URLs for a set of common Windows applications.","title":"SHORT DESCRIPTION"},{"location":"help/en-US/about_Evergreen/#long-description","text":"Evergreen is a PowerShell module that returns the latest version and download URLs for a set of common Windows applications. The module consists of simple functions to use in scripts when performing several tasks including: Retrieve the latest version of a particular application to comparing against a version already installed or downloaded Return the URL for the latest version of the application to download it for local installation or deployment to target machines Evergreen is intended for use in solutions used to automate software deployments. These solutions could be: Image creation with Hashicorp Packer - images can be created with the latest version of a set of applications Import applications into Microsoft Endpoint Manager - keep Configuration Manager or Microsoft Intune up to date with the latest versions of applications Create a library of application installers - by regularly running Evergreen functions, you can retrieve and download the current version of an application and store it in an application directory structure for later use Submitting manifests to Winget or Chocolatey or similar - Evergreen can return an object with a version number and download URL that can be used to construct manifests for the most recent versions Primary functions in Evergreen are: Get-EvergreenApp - returns details of the latest release of an application including the version number and download URL Save-EvergreenApp - simplifies downloading application URLs returned from Get-EvergreenApp Find-EvergreenApp - lists applications supported by the module","title":"LONG DESCRIPTION"}]}